---
title: "fishblicc Support & Package Creation"
author: "Paul Medley"
date:   "August 2022"
format: html
editor: visual
---

# Package Guide

The general guide is from

[R Packages (2e) (r-pkgs.org)](https://r-pkgs.org/)

by Wickham and Bryan.

Specific to this package, rstantools were used. An excellent guide was provided by

[Step by step guide for creating a package that depends on RStan â€¢ rstantools (mc-stan.org)](https://mc-stan.org/rstantools/articles/minimal-rstan-package.html)

by Siegert, Gabry, Lysy, and Goodrich

```{r packages}
library("here")
library("devtools")
library("rstantools")
library("usethis")
system2("powershell", args=c("Set-Content", "-Path", paste0(here(),"\\.Rproj.user"), "-Stream", "com.dropbox.ignored", "-Value", "1"))

# The package was created using:
# rstantools::rstan_create_package(
#   path="E:/Dropbox/Routines/fishblicc",
# )

#packageVersion("devtools")
# use_git()  # Sets up git. Needed only once


```

```{r SetUpPackages}
# add additional package dependences
usethis::use_package("stats")
usethis::use_package("statmod")
usethis::use_package("ggplot2")
usethis::use_package("tidyr")
usethis::use_package("dplyr")
usethis::use_package("purrr")
usethis::use_package("posterior")
usethis::use_package("tibble")
usethis::use_package("bayesplot", "Suggests")
usethis::use_tidy_description()   #orders and formats DESCRIPTION fields
```

```{r UpdatePackages}
rstan_config()  #run when Stan file names change

# Following compiles Stan code and creates the package
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent=TRUE)
roxygen2::roxygenize()  # Needs to be run twice apparently

# If Add new Stan file, e.g., inst/stan/new.stan
pkgbuild::compile_dll() # to preform a fake R CMD install.
roxygen2::roxygenize()  # to update the documentation etc.

document()  # updates documentation

#use_testthat(3)   # Sets up testing skeleton
use_test("BLICC_Model")
use_test("BLICC_ObsExp")
use_test("BLICC_Plots")
use_test("BLICC_PR")
use_test("BLICC_stan")

```

```{r CheckPackage}
check()    # Checks package is OK

#| echo: false
use_r("blicc_stan") # edit R file

load_all()  # To test functions as though they are installed as package
#devtools::install()     # to install the package locally.

# install the package locally
install.packages("../fishblicc", repos=NULL, type="source")
```

```{r DataCreation}
#library("rstan")
#rstan_options(auto_write = TRUE)
load_all()
#options(mc.cores = parallel::detectCores())

eg_ld <- blicc_dat(LLB = 10:35, a=1.0e-4, b=2.95, L50=24,
                 fq=c(0,1,2,5,26,70,72,66,36,34,25,24,20,
                      10,12,5,3,5,6,4,2,0,2,0,1,0), Linf=c(32, 3))

eg_slim <- blicc_fit(eg_ld, nwarmup=500, thin=2)
eg_rp <- blicc_ref_pts(eg_slim, eg_ld)
#save(eg_ld, eg_slim, eg_rp, file=here("output", "blicc_results.rda"))
#load("D:/paula/Dropbox/Routines/BLICC/output/blicc_results.rda")

usethis::use_data(eg_ld, eg_slim, eg_rp, compress="xz", overwrite=T)
```

The `echo: false` option disables the printing of code (only output is displayed).

To do

standard key diagnostics from rstan

check and report divergence, ESS, rhat,

pp_check (draw sample) (posterior)

observed expected plot (bayesplot)

SPR with 20, 30 and 40% ref pt + table probabilities

observed and expected at SPR 20, 30, 40 and 100 (ggplot2)

YPR plots + uncertainty (ggplot2)

# TEST RUNS

```{r Test, eval=F}
load_all()
# eg_ld <- blicc_dat(LLB = 10:35, a=1.0e-4, b=2.95, L50=24,
#           fq=c(0,1,2,5,26,70,72,66,36,34,25,24,20,
#                10,12,5,3,5,6,4,2,0,2,0,1,0), Linf=c(32, 3))
# eg_slim <- blicc_fit(ld, thin=4)
# eg_rp <- eg_ref_pts(eg_slim, eg_ld)

# Fit
ld <- blicc_dat(LLB = 10:35, a=1.0e-4, b=2.95, L50=24,
                 fq=c(0,1,2,5,26,70,72,66,36,34,25,24,
                      20,10,12,5,3,5,6,4,2,0,2,0,1,0), 
                Linf=c(32, 3), NK=50)
stf <- blicc_fit(ld, ntarget=100, nwarmup=200, nchain=1)   # quick test
stf
# Model
plot(Rsel_dsnormal(seq(20.5, 50.5, by=1), 32, 0.01, 0.02), 
     ty="l", ylab="Selectivity")
glq <- statmod::gauss.quad(90, kind = "laguerre", alpha = 0.0)
S <- RSurvival_Est(glq$nodes, glq$weights, Len=15:55, 
                   Zki=c(rep(1.5, 10), rep(3, 31)), 100, 100/80)
plot(y=S, x=15:55, type="l")
glq <- statmod::gauss.quad(110, kind = "laguerre", alpha = 0.0)
S <- RSurvival_Est(glq$nodes, glq$weights, Len=15:55, 
                   Zki=c(rep(1.5, 10), rep(3, 31)), 100, 100/50)
P <- RNinInterval(S, Zki=c(rep(1.5, 10), rep(3, 31)))
plot(y=P, x=15:55, type="l")
plot(y=mature_biomass_at_length(eg_ld), x=eg_ld$LMP, type="l")
plot(y=weight_at_length(eg_ld), x=eg_ld$LMP, type="l")

# Observed-expected
rp_df <- blicc_ref_pts(eg_slim, eg_ld) # very slow...
summary(rp_df)

eg_lx <- blicc_expect_len(eg_rp, eg_ld)

plot_expected_frequency(eg_rp, eg_lx, eg_ld)
plot_selectivity(eg_lx, eg_ld)
plot_SPR_density(eg_rp)
plot_FkF40_density(eg_rp)
plot_efq_FRP(eg_rp, eg_lx, eg_ld)
plot_efq_SRP(eg_rp, eg_lx, eg_ld)
plot_SPR_contour(eg_rp, eg_ld)
plot_YPR_contour(eg_rp, eg_ld)
```
