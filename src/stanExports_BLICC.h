// Generated by rstantools.  Do not edit by hand.

/*
    fishblicc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishblicc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishblicc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_BLICC_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_BLICC");
    reader.add_event(413, 411, "end", "model_BLICC");
    return reader;
}
template <typename T1__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, 1> >
gauss_laguerre_quad(const int& nt,
                        const T1__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        local_scalar_t__ r8_epsilon(DUMMY_VAR__);
        (void) r8_epsilon;  // dummy to suppress unused var warning
        stan::math::initialize(r8_epsilon, DUMMY_VAR__);
        stan::math::fill(r8_epsilon, DUMMY_VAR__);
        stan::math::assign(r8_epsilon,2.220446049250313E-016);
        current_statement_begin__ = 31;
        int itn(0);
        (void) itn;  // dummy to suppress unused var warning
        stan::math::fill(itn, std::numeric_limits<int>::min());
        stan::math::assign(itn,30);
        current_statement_begin__ = 32;
        validate_non_negative_index("aj", "nt", nt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aj(nt);
        stan::math::initialize(aj, DUMMY_VAR__);
        stan::math::fill(aj, DUMMY_VAR__);
        current_statement_begin__ = 33;
        validate_non_negative_index("bj", "nt", nt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bj(nt);
        stan::math::initialize(bj, DUMMY_VAR__);
        stan::math::fill(bj, DUMMY_VAR__);
        current_statement_begin__ = 34;
        validate_non_negative_index("wt", "nt", nt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> wt(nt);
        stan::math::initialize(wt, DUMMY_VAR__);
        stan::math::fill(wt, DUMMY_VAR__);
        stan::math::assign(wt,rep_vector(0, nt));
        current_statement_begin__ = 35;
        local_scalar_t__ zemu(DUMMY_VAR__);
        (void) zemu;  // dummy to suppress unused var warning
        stan::math::initialize(zemu, DUMMY_VAR__);
        stan::math::fill(zemu, DUMMY_VAR__);
        stan::math::assign(zemu,stan::math::tgamma((alpha + 1.0)));
        current_statement_begin__ = 36;
        validate_non_negative_index("knot_wt", "nt", nt);
        validate_non_negative_index("knot_wt", "2", 2);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > knot_wt(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(nt));
        stan::math::initialize(knot_wt, DUMMY_VAR__);
        stan::math::fill(knot_wt, DUMMY_VAR__);
        current_statement_begin__ = 37;
        int m(0);
        (void) m;  // dummy to suppress unused var warning
        stan::math::fill(m, std::numeric_limits<int>::min());
        current_statement_begin__ = 38;
        int mml(0);
        (void) mml;  // dummy to suppress unused var warning
        stan::math::fill(mml, std::numeric_limits<int>::min());
        current_statement_begin__ = 39;
        int k(0);
        (void) k;  // dummy to suppress unused var warning
        stan::math::fill(k, std::numeric_limits<int>::min());
        current_statement_begin__ = 40;
        local_scalar_t__ b(DUMMY_VAR__);
        (void) b;  // dummy to suppress unused var warning
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        current_statement_begin__ = 41;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        current_statement_begin__ = 42;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        current_statement_begin__ = 43;
        local_scalar_t__ g(DUMMY_VAR__);
        (void) g;  // dummy to suppress unused var warning
        stan::math::initialize(g, DUMMY_VAR__);
        stan::math::fill(g, DUMMY_VAR__);
        current_statement_begin__ = 44;
        local_scalar_t__ sign_g(DUMMY_VAR__);
        (void) sign_g;  // dummy to suppress unused var warning
        stan::math::initialize(sign_g, DUMMY_VAR__);
        stan::math::fill(sign_g, DUMMY_VAR__);
        current_statement_begin__ = 45;
        local_scalar_t__ p(DUMMY_VAR__);
        (void) p;  // dummy to suppress unused var warning
        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p, DUMMY_VAR__);
        current_statement_begin__ = 46;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        current_statement_begin__ = 47;
        local_scalar_t__ s(DUMMY_VAR__);
        (void) s;  // dummy to suppress unused var warning
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        {
        current_statement_begin__ = 50;
        validate_non_negative_index("i", "nt", nt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> i(nt);
        stan::math::initialize(i, DUMMY_VAR__);
        stan::math::fill(i, DUMMY_VAR__);
        stan::math::assign(i,cumulative_sum(rep_vector(1, nt)));
        current_statement_begin__ = 51;
        stan::math::assign(aj, add(subtract(multiply(2.0, i), 1.0), alpha));
        current_statement_begin__ = 52;
        stan::math::assign(bj, stan::math::sqrt(elt_multiply(i, add(i, alpha))));
        }
        current_statement_begin__ = 54;
        stan::model::assign(wt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    stan::math::sqrt(zemu), 
                    "assigning variable wt");
        current_statement_begin__ = 56;
        if (as_bool(logical_eq(nt, 1))) {
            current_statement_begin__ = 57;
            stan::model::assign(knot_wt, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        aj, 
                        "assigning variable knot_wt");
            current_statement_begin__ = 58;
            stan::model::assign(knot_wt, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        square(wt), 
                        "assigning variable knot_wt");
            current_statement_begin__ = 59;
            return stan::math::promote_scalar<fun_return_scalar_t__>(knot_wt);
        }
        current_statement_begin__ = 62;
        stan::model::assign(bj, 
                    stan::model::cons_list(stan::model::index_uni(nt), stan::model::nil_index_list()), 
                    0.0, 
                    "assigning variable bj");
        current_statement_begin__ = 64;
        for (int ll = 1; ll <= nt; ++ll) {
            {
            current_statement_begin__ = 65;
            int j(0);
            (void) j;  // dummy to suppress unused var warning
            stan::math::fill(j, std::numeric_limits<int>::min());
            stan::math::assign(j,0);
            current_statement_begin__ = 66;
            int Do_Loop(0);
            (void) Do_Loop;  // dummy to suppress unused var warning
            stan::math::fill(Do_Loop, std::numeric_limits<int>::min());
            stan::math::assign(Do_Loop,1);
            current_statement_begin__ = 67;
            while (as_bool(Do_Loop)) {
                current_statement_begin__ = 68;
                stan::math::assign(m, ll);
                current_statement_begin__ = 69;
                while (as_bool((primitive_value(logical_lt(m, nt)) && primitive_value(logical_gt(stan::math::fabs(get_base1(bj, m, "bj", 1)), (r8_epsilon * (stan::math::fabs(get_base1(aj, m, "aj", 1)) + stan::math::fabs(get_base1(aj, (m + 1), "aj", 1))))))))) {
                    current_statement_begin__ = 70;
                    stan::math::assign(m, (m + 1));
                }
                current_statement_begin__ = 72;
                if (as_bool(logical_eq(m, ll))) {
                    current_statement_begin__ = 73;
                    stan::math::assign(Do_Loop, 0);
                } else {
                    current_statement_begin__ = 75;
                    stan::math::assign(p, get_base1(aj, ll, "aj", 1));
                    current_statement_begin__ = 76;
                    if (as_bool(logical_lte(itn, j))) {
                        current_statement_begin__ = 77;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "gauss_laguerre_quad - Fatal error! Iteration limit exceeded";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 79;
                    stan::math::assign(j, (j + 1));
                    current_statement_begin__ = 80;
                    stan::math::assign(g, ((get_base1(aj, (ll + 1), "aj", 1) - p) / (2.0 * get_base1(bj, ll, "bj", 1))));
                    current_statement_begin__ = 81;
                    if (as_bool(logical_gte(g, 0))) {
                        current_statement_begin__ = 81;
                        stan::math::assign(sign_g, 1.0);
                    } else {
                        current_statement_begin__ = 81;
                        stan::math::assign(sign_g, -(1.0));
                    }
                    current_statement_begin__ = 82;
                    stan::math::assign(r, stan::math::sqrt((square(g) + 1.0)));
                    current_statement_begin__ = 83;
                    stan::math::assign(s, (g + (stan::math::fabs(r) * sign_g)));
                    current_statement_begin__ = 84;
                    stan::math::assign(g, ((get_base1(aj, m, "aj", 1) - p) + (get_base1(bj, ll, "bj", 1) / s)));
                    current_statement_begin__ = 85;
                    stan::math::assign(s, 1.0);
                    current_statement_begin__ = 86;
                    stan::math::assign(c, 1.0);
                    current_statement_begin__ = 87;
                    stan::math::assign(p, 0.0);
                    current_statement_begin__ = 88;
                    stan::math::assign(mml, (m - ll));
                    current_statement_begin__ = 90;
                    for (int ii = 1; ii <= mml; ++ii) {
                        {
                        current_statement_begin__ = 91;
                        int i(0);
                        (void) i;  // dummy to suppress unused var warning
                        stan::math::fill(i, std::numeric_limits<int>::min());
                        stan::math::assign(i,(m - ii));
                        current_statement_begin__ = 92;
                        stan::math::assign(f, (s * get_base1(bj, i, "bj", 1)));
                        current_statement_begin__ = 93;
                        stan::math::assign(b, (c * get_base1(bj, i, "bj", 1)));
                        current_statement_begin__ = 94;
                        if (as_bool(logical_lte(stan::math::fabs(g), stan::math::fabs(f)))) {
                            current_statement_begin__ = 95;
                            stan::math::assign(c, (g / f));
                            current_statement_begin__ = 96;
                            stan::math::assign(r, stan::math::sqrt((square(c) + 1.0)));
                            current_statement_begin__ = 97;
                            stan::model::assign(bj, 
                                        stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                        (f * r), 
                                        "assigning variable bj");
                            current_statement_begin__ = 98;
                            stan::math::assign(s, (1.0 / r));
                            current_statement_begin__ = 99;
                            stan::math::assign(c, (c * s));
                        } else {
                            current_statement_begin__ = 101;
                            stan::math::assign(s, (f / g));
                            current_statement_begin__ = 102;
                            stan::math::assign(r, stan::math::sqrt((square(s) + 1.0)));
                            current_statement_begin__ = 103;
                            stan::model::assign(bj, 
                                        stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                        (g * r), 
                                        "assigning variable bj");
                            current_statement_begin__ = 104;
                            stan::math::assign(c, (1.0 / r));
                            current_statement_begin__ = 105;
                            stan::math::assign(s, (s * c));
                        }
                        current_statement_begin__ = 107;
                        stan::math::assign(g, (get_base1(aj, (i + 1), "aj", 1) - p));
                        current_statement_begin__ = 108;
                        stan::math::assign(r, (((get_base1(aj, i, "aj", 1) - g) * s) + ((2.0 * c) * b)));
                        current_statement_begin__ = 109;
                        stan::math::assign(p, (s * r));
                        current_statement_begin__ = 110;
                        stan::model::assign(aj, 
                                    stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                    (g + p), 
                                    "assigning variable aj");
                        current_statement_begin__ = 111;
                        stan::math::assign(g, ((c * r) - b));
                        current_statement_begin__ = 112;
                        stan::math::assign(f, get_base1(wt, (i + 1), "wt", 1));
                        current_statement_begin__ = 113;
                        stan::math::assign(b, get_base1(wt, i, "wt", 1));
                        current_statement_begin__ = 114;
                        stan::model::assign(wt, 
                                    stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                                    ((s * b) + (c * f)), 
                                    "assigning variable wt");
                        current_statement_begin__ = 115;
                        stan::model::assign(wt, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    ((c * b) - (s * f)), 
                                    "assigning variable wt");
                        }
                    }
                    current_statement_begin__ = 117;
                    stan::model::assign(aj, 
                                stan::model::cons_list(stan::model::index_uni(ll), stan::model::nil_index_list()), 
                                (stan::model::rvalue(aj, stan::model::cons_list(stan::model::index_uni(ll), stan::model::nil_index_list()), "aj") - p), 
                                "assigning variable aj");
                    current_statement_begin__ = 118;
                    stan::model::assign(bj, 
                                stan::model::cons_list(stan::model::index_uni(ll), stan::model::nil_index_list()), 
                                g, 
                                "assigning variable bj");
                    current_statement_begin__ = 119;
                    stan::model::assign(bj, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                0.0, 
                                "assigning variable bj");
                }
            }
            }
        }
        current_statement_begin__ = 124;
        for (int ii = 2; ii <= m; ++ii) {
            {
            current_statement_begin__ = 125;
            int i(0);
            (void) i;  // dummy to suppress unused var warning
            stan::math::fill(i, std::numeric_limits<int>::min());
            stan::math::assign(i,(ii - 1));
            current_statement_begin__ = 126;
            stan::math::assign(k, i);
            current_statement_begin__ = 127;
            stan::math::assign(p, get_base1(aj, i, "aj", 1));
            current_statement_begin__ = 129;
            for (int j = ii; j <= nt; ++j) {
                current_statement_begin__ = 130;
                if (as_bool(logical_lt(get_base1(aj, j, "aj", 1), p))) {
                    current_statement_begin__ = 131;
                    stan::math::assign(k, j);
                    current_statement_begin__ = 132;
                    stan::math::assign(p, get_base1(aj, j, "aj", 1));
                }
            }
            current_statement_begin__ = 136;
            if (as_bool(logical_neq(k, i))) {
                current_statement_begin__ = 137;
                stan::math::assign(g, get_base1(aj, i, "aj", 1));
                current_statement_begin__ = 138;
                stan::model::assign(aj, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            g, 
                            "assigning variable aj");
                current_statement_begin__ = 139;
                stan::model::assign(aj, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            p, 
                            "assigning variable aj");
                current_statement_begin__ = 140;
                stan::math::assign(p, get_base1(wt, i, "wt", 1));
                current_statement_begin__ = 141;
                stan::model::assign(wt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(wt, k, "wt", 1), 
                            "assigning variable wt");
                current_statement_begin__ = 142;
                stan::model::assign(wt, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            p, 
                            "assigning variable wt");
            }
            }
        }
        current_statement_begin__ = 145;
        stan::model::assign(knot_wt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    aj, 
                    "assigning variable knot_wt");
        current_statement_begin__ = 146;
        stan::model::assign(knot_wt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    square(wt), 
                    "assigning variable knot_wt");
        current_statement_begin__ = 147;
        return stan::math::promote_scalar<fun_return_scalar_t__>(knot_wt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gauss_laguerre_quad_functor__ {
    template <typename T1__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, 1> >
    operator()(const int& nt,
                        const T1__& alpha, std::ostream* pstream__) const {
        return gauss_laguerre_quad(nt, alpha, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
sel_logistic(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Sel50,
                 const T2__& Ss1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 154;
        int nl(0);
        (void) nl;  // dummy to suppress unused var warning
        stan::math::fill(nl, std::numeric_limits<int>::min());
        stan::math::assign(nl,rows(LMP));
        current_statement_begin__ = 155;
        validate_non_negative_index("Sel", "nl", nl);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Sel(nl);
        stan::math::initialize(Sel, DUMMY_VAR__);
        stan::math::fill(Sel, DUMMY_VAR__);
        stan::math::assign(Sel,inv_logit(multiply(Ss1, subtract(LMP, Sel50))));
        current_statement_begin__ = 156;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Sel);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sel_logistic_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Sel50,
                 const T2__& Ss1, std::ostream* pstream__) const {
        return sel_logistic(LMP, Sel50, Ss1, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
sel_dsnormal(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Smax,
                 const T2__& Ss1,
                 const T3__& Ss2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 162;
        int nl(0);
        (void) nl;  // dummy to suppress unused var warning
        stan::math::fill(nl, std::numeric_limits<int>::min());
        stan::math::assign(nl,rows(LMP));
        current_statement_begin__ = 163;
        validate_non_negative_index("SL", "nl", nl);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> SL(nl);
        stan::math::initialize(SL, DUMMY_VAR__);
        stan::math::fill(SL, DUMMY_VAR__);
        current_statement_begin__ = 164;
        for (int i = 1; i <= nl; ++i) {
            current_statement_begin__ = 165;
            if (as_bool(logical_lt(get_base1(LMP, i, "LMP", 1), Smax))) {
                current_statement_begin__ = 166;
                stan::model::assign(SL, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp((-(Ss1) * pow((get_base1(LMP, i, "LMP", 1) - Smax), 2))), 
                            "assigning variable SL");
            } else {
                current_statement_begin__ = 168;
                stan::model::assign(SL, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp((-(Ss2) * pow((get_base1(LMP, i, "LMP", 1) - Smax), 2))), 
                            "assigning variable SL");
            }
        }
        current_statement_begin__ = 171;
        return stan::math::promote_scalar<fun_return_scalar_t__>(SL);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sel_dsnormal_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Smax,
                 const T2__& Ss1,
                 const T3__& Ss2, std::ostream* pstream__) const {
        return sel_dsnormal(LMP, Smax, Ss1, Ss2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
sel_ssnormal(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Smax,
                 const T2__& Ss1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 177;
        int nl(0);
        (void) nl;  // dummy to suppress unused var warning
        stan::math::fill(nl, std::numeric_limits<int>::min());
        stan::math::assign(nl,rows(LMP));
        current_statement_begin__ = 178;
        validate_non_negative_index("SL", "nl", nl);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> SL(nl);
        stan::math::initialize(SL, DUMMY_VAR__);
        stan::math::fill(SL, DUMMY_VAR__);
        current_statement_begin__ = 179;
        for (int i = 1; i <= nl; ++i) {
            current_statement_begin__ = 180;
            if (as_bool(logical_lt(get_base1(LMP, i, "LMP", 1), Smax))) {
                current_statement_begin__ = 181;
                stan::model::assign(SL, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp((-(Ss1) * pow((get_base1(LMP, i, "LMP", 1) - Smax), 2))), 
                            "assigning variable SL");
            } else {
                current_statement_begin__ = 183;
                stan::model::assign(SL, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            1.0, 
                            "assigning variable SL");
            }
        }
        current_statement_begin__ = 186;
        return stan::math::promote_scalar<fun_return_scalar_t__>(SL);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sel_ssnormal_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& LMP,
                 const T1__& Smax,
                 const T2__& Ss1, std::ostream* pstream__) const {
        return sel_ssnormal(LMP, Smax, Ss1, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
Survival_Est(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& gl_node,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gl_wt,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& Len,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& Zki,
                 const T4__& alpha,
                 const T5__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 194;
        int nl(0);
        (void) nl;  // dummy to suppress unused var warning
        stan::math::fill(nl, std::numeric_limits<int>::min());
        stan::math::assign(nl,rows(Len));
        current_statement_begin__ = 195;
        int nv(0);
        (void) nv;  // dummy to suppress unused var warning
        stan::math::fill(nv, std::numeric_limits<int>::min());
        stan::math::assign(nv,rows(gl_node));
        current_statement_begin__ = 196;
        local_scalar_t__ lg_alpha(DUMMY_VAR__);
        (void) lg_alpha;  // dummy to suppress unused var warning
        stan::math::initialize(lg_alpha, DUMMY_VAR__);
        stan::math::fill(lg_alpha, DUMMY_VAR__);
        stan::math::assign(lg_alpha,stan::math::lgamma(alpha));
        current_statement_begin__ = 197;
        validate_non_negative_index("x_beta", "nv", nv);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_beta(nv);
        stan::math::initialize(x_beta, DUMMY_VAR__);
        stan::math::fill(x_beta, DUMMY_VAR__);
        stan::math::assign(x_beta,divide(gl_node, beta));
        current_statement_begin__ = 198;
        validate_non_negative_index("log_x_beta", "nv", nv);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_x_beta(nv);
        stan::math::initialize(log_x_beta, DUMMY_VAR__);
        stan::math::fill(log_x_beta, DUMMY_VAR__);
        stan::math::assign(log_x_beta,stan::math::log(x_beta));
        current_statement_begin__ = 199;
        validate_non_negative_index("Zin", "(nl - 1)", (nl - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Zin((nl - 1));
        stan::math::initialize(Zin, DUMMY_VAR__);
        stan::math::fill(Zin, DUMMY_VAR__);
        stan::math::assign(Zin,append_row(-(get_base1(Zki, 1, "Zki", 1)), subtract(stan::model::rvalue(Zki, stan::model::cons_list(stan::model::index_min_max(1, (nl - 2)), stan::model::nil_index_list()), "Zki"), stan::model::rvalue(Zki, stan::model::cons_list(stan::model::index_min_max(2, (nl - 1)), stan::model::nil_index_list()), "Zki"))));
        current_statement_begin__ = 200;
        validate_non_negative_index("surv", "nl", nl);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> surv(nl);
        stan::math::initialize(surv, DUMMY_VAR__);
        stan::math::fill(surv, DUMMY_VAR__);
        current_statement_begin__ = 201;
        validate_non_negative_index("ss", "nv", nv);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> ss(nv);
        stan::math::initialize(ss, DUMMY_VAR__);
        stan::math::fill(ss, DUMMY_VAR__);
        current_statement_begin__ = 203;
        stan::math::assign(ss, transpose(subtract(subtract(multiply(stan::math::log(add(gl_node, (beta * get_base1(Len, 1, "Len", 1)))), (alpha - 1.0)), (beta * get_base1(Len, 1, "Len", 1))), lg_alpha)));
        current_statement_begin__ = 204;
        stan::model::assign(surv, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    multiply(stan::math::exp(ss), gl_wt), 
                    "assigning variable surv");
        current_statement_begin__ = 205;
        stan::math::assign(ss, transpose(subtract(subtract(add(add(multiply(minus(stan::math::log(subtract(add(x_beta, get_base1(Len, 2, "Len", 1)), get_base1(Len, 1, "Len", 1)))), get_base1(Zki, 1, "Zki", 1)), multiply(log_x_beta, get_base1(Zki, 1, "Zki", 1))), multiply(stan::math::log(add(gl_node, (beta * get_base1(Len, 2, "Len", 1)))), (alpha - 1.0))), (beta * get_base1(Len, 2, "Len", 1))), lg_alpha)));
        current_statement_begin__ = 206;
        stan::model::assign(surv, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    multiply(stan::math::exp(ss), gl_wt), 
                    "assigning variable surv");
        current_statement_begin__ = 208;
        for (int n = 3; n <= nl; ++n) {
            {
            current_statement_begin__ = 209;
            validate_non_negative_index("Lrange", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Lrange((n - 1));
            stan::math::initialize(Lrange, DUMMY_VAR__);
            stan::math::fill(Lrange, DUMMY_VAR__);
            stan::math::assign(Lrange,stan::model::rvalue(Len, stan::model::cons_list(stan::model::index_min_max(1, (n - 1)), stan::model::nil_index_list()), "Len"));
            current_statement_begin__ = 210;
            validate_non_negative_index("Zii", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Zii((n - 1));
            stan::math::initialize(Zii, DUMMY_VAR__);
            stan::math::fill(Zii, DUMMY_VAR__);
            stan::math::assign(Zii,stan::model::rvalue(Zin, stan::model::cons_list(stan::model::index_min_max(1, (n - 1)), stan::model::nil_index_list()), "Zin"));
            current_statement_begin__ = 211;
            validate_non_negative_index("v2", "nv", nv);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> v2(nv);
            stan::math::initialize(v2, DUMMY_VAR__);
            stan::math::fill(v2, DUMMY_VAR__);
            stan::math::assign(v2,transpose(add(multiply(log_x_beta, get_base1(Zki, (n - 1), "Zki", 1)), multiply(stan::math::log(add(gl_node, (beta * get_base1(Len, n, "Len", 1)))), (alpha - 1.0)))));
            current_statement_begin__ = 212;
            local_scalar_t__ v3(DUMMY_VAR__);
            (void) v3;  // dummy to suppress unused var warning
            stan::math::initialize(v3, DUMMY_VAR__);
            stan::math::fill(v3, DUMMY_VAR__);
            stan::math::assign(v3,((beta * get_base1(Len, n, "Len", 1)) + lg_alpha));
            current_statement_begin__ = 213;
            validate_non_negative_index("v1", "nv", nv);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> v1(nv);
            stan::math::initialize(v1, DUMMY_VAR__);
            stan::math::fill(v1, DUMMY_VAR__);
            current_statement_begin__ = 214;
            for (int i = 1; i <= nv; ++i) {
                current_statement_begin__ = 215;
                stan::model::assign(v1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(elt_multiply(stan::math::log(subtract((get_base1(x_beta, i, "x_beta", 1) + get_base1(Len, n, "Len", 1)), Lrange)), Zii)), 
                            "assigning variable v1");
            }
            current_statement_begin__ = 216;
            stan::math::assign(ss, subtract(add(v1, v2), v3));
            current_statement_begin__ = 217;
            stan::model::assign(surv, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        multiply(stan::math::exp(ss), gl_wt), 
                        "assigning variable surv");
            }
        }
        current_statement_begin__ = 219;
        return stan::math::promote_scalar<fun_return_scalar_t__>(surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct Survival_Est_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& gl_node,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gl_wt,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& Len,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& Zki,
                 const T4__& alpha,
                 const T5__& beta, std::ostream* pstream__) const {
        return Survival_Est(gl_node, gl_wt, Len, Zki, alpha, beta, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
NinInterval(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& Surv,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& Zki, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 229;
        int nl(0);
        (void) nl;  // dummy to suppress unused var warning
        stan::math::fill(nl, std::numeric_limits<int>::min());
        stan::math::assign(nl,rows(Surv));
        current_statement_begin__ = 230;
        validate_non_negative_index("NinIntv", "nl", nl);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> NinIntv(nl);
        stan::math::initialize(NinIntv, DUMMY_VAR__);
        stan::math::fill(NinIntv, DUMMY_VAR__);
        stan::math::assign(NinIntv,elt_divide(append_row(subtract(stan::model::rvalue(Surv, stan::model::cons_list(stan::model::index_min_max(1, (nl - 1)), stan::model::nil_index_list()), "Surv"), stan::model::rvalue(Surv, stan::model::cons_list(stan::model::index_min_max(2, nl), stan::model::nil_index_list()), "Surv")), get_base1(Surv, nl, "Surv", 1)), Zki));
        current_statement_begin__ = 231;
        return stan::math::promote_scalar<fun_return_scalar_t__>(NinIntv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct NinInterval_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& Surv,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& Zki, std::ostream* pstream__) const {
        return NinInterval(Surv, Zki, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_BLICC
  : public stan::model::model_base_crtp<model_BLICC> {
private:
        int NK;
        int oBN;
        vector_d Len;
        std::vector<int> fq;
        double b;
        double Ls;
        double Lm;
        int Flat_top;
        double poLinfm;
        double poLinfs;
        double polGam;
        double polGas;
        double polMkm;
        double polMks;
        double polFkm;
        double polFks;
        double polSmxm;
        double polSmxs;
        double polSs1m;
        double polSs1s;
        double polSs2m;
        double polSs2s;
        double polNB_phim;
        double polNB_phis;
        double eps;
        double NObs;
        std::vector<vector_d> kn_wt;
        vector_d LMP;
        int N_Ss;
public:
    model_BLICC(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_BLICC(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_BLICC_namespace::model_BLICC";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 248;
            context__.validate_dims("data initialization", "NK", "int", context__.to_vec());
            NK = int(0);
            vals_i__ = context__.vals_i("NK");
            pos__ = 0;
            NK = vals_i__[pos__++];
            check_greater_or_equal(function__, "NK", NK, 2);
            current_statement_begin__ = 250;
            context__.validate_dims("data initialization", "oBN", "int", context__.to_vec());
            oBN = int(0);
            vals_i__ = context__.vals_i("oBN");
            pos__ = 0;
            oBN = vals_i__[pos__++];
            check_greater_or_equal(function__, "oBN", oBN, 1);
            current_statement_begin__ = 252;
            validate_non_negative_index("Len", "oBN", oBN);
            context__.validate_dims("data initialization", "Len", "vector_d", context__.to_vec(oBN));
            Len = Eigen::Matrix<double, Eigen::Dynamic, 1>(oBN);
            vals_r__ = context__.vals_r("Len");
            pos__ = 0;
            size_t Len_j_1_max__ = oBN;
            for (size_t j_1__ = 0; j_1__ < Len_j_1_max__; ++j_1__) {
                Len(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 253;
            validate_non_negative_index("fq", "oBN", oBN);
            context__.validate_dims("data initialization", "fq", "int", context__.to_vec(oBN));
            fq = std::vector<int>(oBN, int(0));
            vals_i__ = context__.vals_i("fq");
            pos__ = 0;
            size_t fq_k_0_max__ = oBN;
            for (size_t k_0__ = 0; k_0__ < fq_k_0_max__; ++k_0__) {
                fq[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 254;
            context__.validate_dims("data initialization", "b", "double", context__.to_vec());
            b = double(0);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            b = vals_r__[pos__++];
            current_statement_begin__ = 255;
            context__.validate_dims("data initialization", "Ls", "double", context__.to_vec());
            Ls = double(0);
            vals_r__ = context__.vals_r("Ls");
            pos__ = 0;
            Ls = vals_r__[pos__++];
            current_statement_begin__ = 256;
            context__.validate_dims("data initialization", "Lm", "double", context__.to_vec());
            Lm = double(0);
            vals_r__ = context__.vals_r("Lm");
            pos__ = 0;
            Lm = vals_r__[pos__++];
            current_statement_begin__ = 257;
            context__.validate_dims("data initialization", "Flat_top", "int", context__.to_vec());
            Flat_top = int(0);
            vals_i__ = context__.vals_i("Flat_top");
            pos__ = 0;
            Flat_top = vals_i__[pos__++];
            current_statement_begin__ = 260;
            context__.validate_dims("data initialization", "poLinfm", "double", context__.to_vec());
            poLinfm = double(0);
            vals_r__ = context__.vals_r("poLinfm");
            pos__ = 0;
            poLinfm = vals_r__[pos__++];
            current_statement_begin__ = 261;
            context__.validate_dims("data initialization", "poLinfs", "double", context__.to_vec());
            poLinfs = double(0);
            vals_r__ = context__.vals_r("poLinfs");
            pos__ = 0;
            poLinfs = vals_r__[pos__++];
            current_statement_begin__ = 262;
            context__.validate_dims("data initialization", "polGam", "double", context__.to_vec());
            polGam = double(0);
            vals_r__ = context__.vals_r("polGam");
            pos__ = 0;
            polGam = vals_r__[pos__++];
            current_statement_begin__ = 263;
            context__.validate_dims("data initialization", "polGas", "double", context__.to_vec());
            polGas = double(0);
            vals_r__ = context__.vals_r("polGas");
            pos__ = 0;
            polGas = vals_r__[pos__++];
            current_statement_begin__ = 264;
            context__.validate_dims("data initialization", "polMkm", "double", context__.to_vec());
            polMkm = double(0);
            vals_r__ = context__.vals_r("polMkm");
            pos__ = 0;
            polMkm = vals_r__[pos__++];
            current_statement_begin__ = 265;
            context__.validate_dims("data initialization", "polMks", "double", context__.to_vec());
            polMks = double(0);
            vals_r__ = context__.vals_r("polMks");
            pos__ = 0;
            polMks = vals_r__[pos__++];
            current_statement_begin__ = 266;
            context__.validate_dims("data initialization", "polFkm", "double", context__.to_vec());
            polFkm = double(0);
            vals_r__ = context__.vals_r("polFkm");
            pos__ = 0;
            polFkm = vals_r__[pos__++];
            current_statement_begin__ = 267;
            context__.validate_dims("data initialization", "polFks", "double", context__.to_vec());
            polFks = double(0);
            vals_r__ = context__.vals_r("polFks");
            pos__ = 0;
            polFks = vals_r__[pos__++];
            current_statement_begin__ = 268;
            context__.validate_dims("data initialization", "polSmxm", "double", context__.to_vec());
            polSmxm = double(0);
            vals_r__ = context__.vals_r("polSmxm");
            pos__ = 0;
            polSmxm = vals_r__[pos__++];
            current_statement_begin__ = 269;
            context__.validate_dims("data initialization", "polSmxs", "double", context__.to_vec());
            polSmxs = double(0);
            vals_r__ = context__.vals_r("polSmxs");
            pos__ = 0;
            polSmxs = vals_r__[pos__++];
            current_statement_begin__ = 270;
            context__.validate_dims("data initialization", "polSs1m", "double", context__.to_vec());
            polSs1m = double(0);
            vals_r__ = context__.vals_r("polSs1m");
            pos__ = 0;
            polSs1m = vals_r__[pos__++];
            current_statement_begin__ = 271;
            context__.validate_dims("data initialization", "polSs1s", "double", context__.to_vec());
            polSs1s = double(0);
            vals_r__ = context__.vals_r("polSs1s");
            pos__ = 0;
            polSs1s = vals_r__[pos__++];
            current_statement_begin__ = 272;
            context__.validate_dims("data initialization", "polSs2m", "double", context__.to_vec());
            polSs2m = double(0);
            vals_r__ = context__.vals_r("polSs2m");
            pos__ = 0;
            polSs2m = vals_r__[pos__++];
            current_statement_begin__ = 273;
            context__.validate_dims("data initialization", "polSs2s", "double", context__.to_vec());
            polSs2s = double(0);
            vals_r__ = context__.vals_r("polSs2s");
            pos__ = 0;
            polSs2s = vals_r__[pos__++];
            current_statement_begin__ = 274;
            context__.validate_dims("data initialization", "polNB_phim", "double", context__.to_vec());
            polNB_phim = double(0);
            vals_r__ = context__.vals_r("polNB_phim");
            pos__ = 0;
            polNB_phim = vals_r__[pos__++];
            current_statement_begin__ = 275;
            context__.validate_dims("data initialization", "polNB_phis", "double", context__.to_vec());
            polNB_phis = double(0);
            vals_r__ = context__.vals_r("polNB_phis");
            pos__ = 0;
            polNB_phis = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 279;
            eps = double(0);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1.0e-6);
            current_statement_begin__ = 280;
            NObs = double(0);
            stan::math::fill(NObs, DUMMY_VAR__);
            stan::math::assign(NObs,sum(fq));
            current_statement_begin__ = 281;
            validate_non_negative_index("kn_wt", "NK", NK);
            validate_non_negative_index("kn_wt", "2", 2);
            kn_wt = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(2, Eigen::Matrix<double, Eigen::Dynamic, 1>(NK));
            stan::math::fill(kn_wt, DUMMY_VAR__);
            stan::math::assign(kn_wt,gauss_laguerre_quad(NK, 0, pstream__));
            current_statement_begin__ = 282;
            validate_non_negative_index("LMP", "oBN", oBN);
            LMP = Eigen::Matrix<double, Eigen::Dynamic, 1>(oBN);
            stan::math::fill(LMP, DUMMY_VAR__);
            current_statement_begin__ = 283;
            N_Ss = int(0);
            stan::math::fill(N_Ss, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 284;
            if (as_bool(logical_eq(Flat_top, 0))) {
                current_statement_begin__ = 285;
                stan::math::assign(N_Ss, 1);
            } else {
                current_statement_begin__ = 287;
                stan::math::assign(N_Ss, 2);
            }
            current_statement_begin__ = 290;
            for (int i = 1; i <= (oBN - 1); ++i) {
                current_statement_begin__ = 291;
                stan::model::assign(LMP, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (0.5 * (get_base1(Len, i, "Len", 1) + get_base1(Len, (i + 1), "Len", 1))), 
                            "assigning variable LMP");
            }
            current_statement_begin__ = 292;
            stan::model::assign(LMP, 
                        stan::model::cons_list(stan::model::index_uni(oBN), stan::model::nil_index_list()), 
                        (get_base1(Len, oBN, "Len", 1) + (0.5 * (get_base1(Len, oBN, "Len", 1) - get_base1(Len, (oBN - 1), "Len", 1)))), 
                        "assigning variable LMP");
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 302;
            num_params_r__ += 1;
            current_statement_begin__ = 303;
            num_params_r__ += 1;
            current_statement_begin__ = 304;
            num_params_r__ += 1;
            current_statement_begin__ = 305;
            num_params_r__ += 1;
            current_statement_begin__ = 306;
            num_params_r__ += 1;
            current_statement_begin__ = 307;
            validate_non_negative_index("nSs", "N_Ss", N_Ss);
            num_params_r__ += N_Ss;
            current_statement_begin__ = 308;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_BLICC() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 302;
        if (!(context__.contains_r("nLinf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nLinf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nLinf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nLinf", "double", context__.to_vec());
        double nLinf(0);
        nLinf = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain((-(poLinfm) / poLinfs), nLinf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nLinf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 303;
        if (!(context__.contains_r("nGalpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nGalpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nGalpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nGalpha", "double", context__.to_vec());
        double nGalpha(0);
        nGalpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nGalpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nGalpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 304;
        if (!(context__.contains_r("nMk")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nMk missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nMk");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nMk", "double", context__.to_vec());
        double nMk(0);
        nMk = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nMk);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nMk: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 305;
        if (!(context__.contains_r("nFk")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nFk missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nFk");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nFk", "double", context__.to_vec());
        double nFk(0);
        nFk = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nFk);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nFk: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 306;
        if (!(context__.contains_r("nSmx")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nSmx missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nSmx");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nSmx", "double", context__.to_vec());
        double nSmx(0);
        nSmx = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nSmx);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nSmx: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 307;
        if (!(context__.contains_r("nSs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nSs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nSs");
        pos__ = 0U;
        validate_non_negative_index("nSs", "N_Ss", N_Ss);
        context__.validate_dims("parameter initialization", "nSs", "vector_d", context__.to_vec(N_Ss));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nSs(N_Ss);
        size_t nSs_j_1_max__ = N_Ss;
        for (size_t j_1__ = 0; j_1__ < nSs_j_1_max__; ++j_1__) {
            nSs(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(nSs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nSs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 308;
        if (!(context__.contains_r("nNB_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nNB_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nNB_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nNB_phi", "double", context__.to_vec());
        double nNB_phi(0);
        nNB_phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nNB_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nNB_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 302;
            local_scalar_t__ nLinf;
            (void) nLinf;  // dummy to suppress unused var warning
            if (jacobian__)
                nLinf = in__.scalar_lb_constrain((-(poLinfm) / poLinfs), lp__);
            else
                nLinf = in__.scalar_lb_constrain((-(poLinfm) / poLinfs));
            current_statement_begin__ = 303;
            local_scalar_t__ nGalpha;
            (void) nGalpha;  // dummy to suppress unused var warning
            if (jacobian__)
                nGalpha = in__.scalar_constrain(lp__);
            else
                nGalpha = in__.scalar_constrain();
            current_statement_begin__ = 304;
            local_scalar_t__ nMk;
            (void) nMk;  // dummy to suppress unused var warning
            if (jacobian__)
                nMk = in__.scalar_constrain(lp__);
            else
                nMk = in__.scalar_constrain();
            current_statement_begin__ = 305;
            local_scalar_t__ nFk;
            (void) nFk;  // dummy to suppress unused var warning
            if (jacobian__)
                nFk = in__.scalar_constrain(lp__);
            else
                nFk = in__.scalar_constrain();
            current_statement_begin__ = 306;
            local_scalar_t__ nSmx;
            (void) nSmx;  // dummy to suppress unused var warning
            if (jacobian__)
                nSmx = in__.scalar_constrain(lp__);
            else
                nSmx = in__.scalar_constrain();
            current_statement_begin__ = 307;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nSs;
            (void) nSs;  // dummy to suppress unused var warning
            if (jacobian__)
                nSs = in__.vector_constrain(N_Ss, lp__);
            else
                nSs = in__.vector_constrain(N_Ss);
            current_statement_begin__ = 308;
            local_scalar_t__ nNB_phi;
            (void) nNB_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                nNB_phi = in__.scalar_constrain(lp__);
            else
                nNB_phi = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 312;
            local_scalar_t__ Linf;
            (void) Linf;  // dummy to suppress unused var warning
            stan::math::initialize(Linf, DUMMY_VAR__);
            stan::math::fill(Linf, DUMMY_VAR__);
            stan::math::assign(Linf,(poLinfm + (nLinf * poLinfs)));
            current_statement_begin__ = 313;
            local_scalar_t__ Galpha;
            (void) Galpha;  // dummy to suppress unused var warning
            stan::math::initialize(Galpha, DUMMY_VAR__);
            stan::math::fill(Galpha, DUMMY_VAR__);
            stan::math::assign(Galpha,stan::math::exp((polGam + (nGalpha * polGas))));
            current_statement_begin__ = 314;
            local_scalar_t__ Mk;
            (void) Mk;  // dummy to suppress unused var warning
            stan::math::initialize(Mk, DUMMY_VAR__);
            stan::math::fill(Mk, DUMMY_VAR__);
            stan::math::assign(Mk,stan::math::exp((polMkm + (nMk * polMks))));
            current_statement_begin__ = 315;
            local_scalar_t__ Fk;
            (void) Fk;  // dummy to suppress unused var warning
            stan::math::initialize(Fk, DUMMY_VAR__);
            stan::math::fill(Fk, DUMMY_VAR__);
            stan::math::assign(Fk,stan::math::exp((polFkm + (nFk * polFks))));
            current_statement_begin__ = 316;
            local_scalar_t__ Smx;
            (void) Smx;  // dummy to suppress unused var warning
            stan::math::initialize(Smx, DUMMY_VAR__);
            stan::math::fill(Smx, DUMMY_VAR__);
            stan::math::assign(Smx,stan::math::exp((polSmxm + (nSmx * polSmxs))));
            current_statement_begin__ = 317;
            local_scalar_t__ Ss1;
            (void) Ss1;  // dummy to suppress unused var warning
            stan::math::initialize(Ss1, DUMMY_VAR__);
            stan::math::fill(Ss1, DUMMY_VAR__);
            stan::math::assign(Ss1,stan::math::exp((polSs1m + (get_base1(nSs, 1, "nSs", 1) * polSs1s))));
            current_statement_begin__ = 318;
            local_scalar_t__ Ss2;
            (void) Ss2;  // dummy to suppress unused var warning
            stan::math::initialize(Ss2, DUMMY_VAR__);
            stan::math::fill(Ss2, DUMMY_VAR__);
            current_statement_begin__ = 319;
            local_scalar_t__ NB_phi;
            (void) NB_phi;  // dummy to suppress unused var warning
            stan::math::initialize(NB_phi, DUMMY_VAR__);
            stan::math::fill(NB_phi, DUMMY_VAR__);
            stan::math::assign(NB_phi,stan::math::exp((polNB_phim + (nNB_phi * polNB_phis))));
            current_statement_begin__ = 320;
            local_scalar_t__ Gbeta;
            (void) Gbeta;  // dummy to suppress unused var warning
            stan::math::initialize(Gbeta, DUMMY_VAR__);
            stan::math::fill(Gbeta, DUMMY_VAR__);
            stan::math::assign(Gbeta,(Galpha / Linf));
            // transformed parameters block statements
            current_statement_begin__ = 322;
            if (as_bool(logical_eq(Flat_top, 0))) {
                current_statement_begin__ = 323;
                stan::math::assign(Ss2, 0);
            } else {
                current_statement_begin__ = 325;
                stan::math::assign(Ss2, stan::math::exp((polSs2m + (get_base1(nSs, 2, "nSs", 1) * polSs2s))));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 312;
            if (stan::math::is_uninitialized(Linf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Linf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Linf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 313;
            if (stan::math::is_uninitialized(Galpha)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Galpha";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Galpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 314;
            if (stan::math::is_uninitialized(Mk)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Mk";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Mk: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 315;
            if (stan::math::is_uninitialized(Fk)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Fk";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Fk: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 316;
            if (stan::math::is_uninitialized(Smx)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Smx";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Smx: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 317;
            if (stan::math::is_uninitialized(Ss1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Ss1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Ss1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 318;
            if (stan::math::is_uninitialized(Ss2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Ss2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Ss2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 319;
            if (stan::math::is_uninitialized(NB_phi)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: NB_phi";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable NB_phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 320;
            if (stan::math::is_uninitialized(Gbeta)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Gbeta";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Gbeta: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 334;
            validate_non_negative_index("efq", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> efq(oBN);
            stan::math::initialize(efq, DUMMY_VAR__);
            stan::math::fill(efq, DUMMY_VAR__);
            current_statement_begin__ = 339;
            lp_accum__.add(normal_log(nLinf, 0, 1));
            current_statement_begin__ = 340;
            lp_accum__.add(normal_log(nGalpha, 0, 1));
            current_statement_begin__ = 341;
            lp_accum__.add(normal_log(nMk, 0, 1));
            current_statement_begin__ = 342;
            lp_accum__.add(normal_log(nFk, 0, 1));
            current_statement_begin__ = 343;
            lp_accum__.add(normal_log(nSmx, 0, 1));
            current_statement_begin__ = 344;
            lp_accum__.add(normal_log(nSs, 0, 1));
            current_statement_begin__ = 345;
            lp_accum__.add(normal_log(nNB_phi, 0, 1));
            {
            current_statement_begin__ = 352;
            local_scalar_t__ Sum_efq(DUMMY_VAR__);
            (void) Sum_efq;  // dummy to suppress unused var warning
            stan::math::initialize(Sum_efq, DUMMY_VAR__);
            stan::math::fill(Sum_efq, DUMMY_VAR__);
            current_statement_begin__ = 353;
            validate_non_negative_index("Fki", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Fki(oBN);
            stan::math::initialize(Fki, DUMMY_VAR__);
            stan::math::fill(Fki, DUMMY_VAR__);
            current_statement_begin__ = 354;
            validate_non_negative_index("Zki", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Zki(oBN);
            stan::math::initialize(Zki, DUMMY_VAR__);
            stan::math::fill(Zki, DUMMY_VAR__);
            current_statement_begin__ = 355;
            validate_non_negative_index("Sv", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Sv(oBN);
            stan::math::initialize(Sv, DUMMY_VAR__);
            stan::math::fill(Sv, DUMMY_VAR__);
            current_statement_begin__ = 356;
            if (as_bool(logical_eq(Flat_top, 0))) {
                current_statement_begin__ = 357;
                stan::math::assign(Fki, multiply(sel_ssnormal(LMP, Smx, Ss1, pstream__), Fk));
            } else {
                current_statement_begin__ = 359;
                stan::math::assign(Fki, multiply(sel_dsnormal(LMP, Smx, Ss1, Ss2, pstream__), Fk));
            }
            current_statement_begin__ = 360;
            stan::math::assign(Zki, add(Fki, Mk));
            current_statement_begin__ = 362;
            stan::math::assign(Sv, Survival_Est(get_base1(kn_wt, 1, "kn_wt", 1), get_base1(kn_wt, 2, "kn_wt", 1), Len, Zki, Galpha, Gbeta, pstream__));
            current_statement_begin__ = 364;
            stan::math::assign(efq, elt_multiply(Fki, NinInterval(Sv, Zki, pstream__)));
            current_statement_begin__ = 366;
            stan::math::assign(Sum_efq, sum(efq));
            current_statement_begin__ = 367;
            stan::math::assign(efq, multiply(efq, (NObs / Sum_efq)));
            current_statement_begin__ = 368;
            stan::math::assign(efq, add(efq, eps));
            }
            current_statement_begin__ = 376;
            lp_accum__.add(neg_binomial_2_log(fq, efq, NB_phi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("nLinf");
        names__.push_back("nGalpha");
        names__.push_back("nMk");
        names__.push_back("nFk");
        names__.push_back("nSmx");
        names__.push_back("nSs");
        names__.push_back("nNB_phi");
        names__.push_back("Linf");
        names__.push_back("Galpha");
        names__.push_back("Mk");
        names__.push_back("Fk");
        names__.push_back("Smx");
        names__.push_back("Ss1");
        names__.push_back("Ss2");
        names__.push_back("NB_phi");
        names__.push_back("Gbeta");
        names__.push_back("SPR");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_Ss);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_BLICC_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double nLinf = in__.scalar_lb_constrain((-(poLinfm) / poLinfs));
        vars__.push_back(nLinf);
        double nGalpha = in__.scalar_constrain();
        vars__.push_back(nGalpha);
        double nMk = in__.scalar_constrain();
        vars__.push_back(nMk);
        double nFk = in__.scalar_constrain();
        vars__.push_back(nFk);
        double nSmx = in__.scalar_constrain();
        vars__.push_back(nSmx);
        Eigen::Matrix<double, Eigen::Dynamic, 1> nSs = in__.vector_constrain(N_Ss);
        size_t nSs_j_1_max__ = N_Ss;
        for (size_t j_1__ = 0; j_1__ < nSs_j_1_max__; ++j_1__) {
            vars__.push_back(nSs(j_1__));
        }
        double nNB_phi = in__.scalar_constrain();
        vars__.push_back(nNB_phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 312;
            double Linf;
            (void) Linf;  // dummy to suppress unused var warning
            stan::math::initialize(Linf, DUMMY_VAR__);
            stan::math::fill(Linf, DUMMY_VAR__);
            stan::math::assign(Linf,(poLinfm + (nLinf * poLinfs)));
            current_statement_begin__ = 313;
            double Galpha;
            (void) Galpha;  // dummy to suppress unused var warning
            stan::math::initialize(Galpha, DUMMY_VAR__);
            stan::math::fill(Galpha, DUMMY_VAR__);
            stan::math::assign(Galpha,stan::math::exp((polGam + (nGalpha * polGas))));
            current_statement_begin__ = 314;
            double Mk;
            (void) Mk;  // dummy to suppress unused var warning
            stan::math::initialize(Mk, DUMMY_VAR__);
            stan::math::fill(Mk, DUMMY_VAR__);
            stan::math::assign(Mk,stan::math::exp((polMkm + (nMk * polMks))));
            current_statement_begin__ = 315;
            double Fk;
            (void) Fk;  // dummy to suppress unused var warning
            stan::math::initialize(Fk, DUMMY_VAR__);
            stan::math::fill(Fk, DUMMY_VAR__);
            stan::math::assign(Fk,stan::math::exp((polFkm + (nFk * polFks))));
            current_statement_begin__ = 316;
            double Smx;
            (void) Smx;  // dummy to suppress unused var warning
            stan::math::initialize(Smx, DUMMY_VAR__);
            stan::math::fill(Smx, DUMMY_VAR__);
            stan::math::assign(Smx,stan::math::exp((polSmxm + (nSmx * polSmxs))));
            current_statement_begin__ = 317;
            double Ss1;
            (void) Ss1;  // dummy to suppress unused var warning
            stan::math::initialize(Ss1, DUMMY_VAR__);
            stan::math::fill(Ss1, DUMMY_VAR__);
            stan::math::assign(Ss1,stan::math::exp((polSs1m + (get_base1(nSs, 1, "nSs", 1) * polSs1s))));
            current_statement_begin__ = 318;
            double Ss2;
            (void) Ss2;  // dummy to suppress unused var warning
            stan::math::initialize(Ss2, DUMMY_VAR__);
            stan::math::fill(Ss2, DUMMY_VAR__);
            current_statement_begin__ = 319;
            double NB_phi;
            (void) NB_phi;  // dummy to suppress unused var warning
            stan::math::initialize(NB_phi, DUMMY_VAR__);
            stan::math::fill(NB_phi, DUMMY_VAR__);
            stan::math::assign(NB_phi,stan::math::exp((polNB_phim + (nNB_phi * polNB_phis))));
            current_statement_begin__ = 320;
            double Gbeta;
            (void) Gbeta;  // dummy to suppress unused var warning
            stan::math::initialize(Gbeta, DUMMY_VAR__);
            stan::math::fill(Gbeta, DUMMY_VAR__);
            stan::math::assign(Gbeta,(Galpha / Linf));
            // do transformed parameters statements
            current_statement_begin__ = 322;
            if (as_bool(logical_eq(Flat_top, 0))) {
                current_statement_begin__ = 323;
                stan::math::assign(Ss2, 0);
            } else {
                current_statement_begin__ = 325;
                stan::math::assign(Ss2, stan::math::exp((polSs2m + (get_base1(nSs, 2, "nSs", 1) * polSs2s))));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(Linf);
                vars__.push_back(Galpha);
                vars__.push_back(Mk);
                vars__.push_back(Fk);
                vars__.push_back(Smx);
                vars__.push_back(Ss1);
                vars__.push_back(Ss2);
                vars__.push_back(NB_phi);
                vars__.push_back(Gbeta);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 382;
            double SPR;
            (void) SPR;  // dummy to suppress unused var warning
            stan::math::initialize(SPR, DUMMY_VAR__);
            stan::math::fill(SPR, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 388;
            local_scalar_t__ SPR0(DUMMY_VAR__);
            (void) SPR0;  // dummy to suppress unused var warning
            stan::math::initialize(SPR0, DUMMY_VAR__);
            stan::math::fill(SPR0, DUMMY_VAR__);
            current_statement_begin__ = 389;
            local_scalar_t__ SPRF(DUMMY_VAR__);
            (void) SPRF;  // dummy to suppress unused var warning
            stan::math::initialize(SPRF, DUMMY_VAR__);
            stan::math::fill(SPRF, DUMMY_VAR__);
            current_statement_begin__ = 390;
            validate_non_negative_index("MB", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> MB(oBN);
            stan::math::initialize(MB, DUMMY_VAR__);
            stan::math::fill(MB, DUMMY_VAR__);
            stan::math::assign(MB,transpose(elt_multiply(stan::math::exp(multiply(b, stan::math::log(Len))), inv_logit(multiply(Ls, subtract(Len, Lm))))));
            current_statement_begin__ = 391;
            validate_non_negative_index("Zki", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Zki(oBN);
            stan::math::initialize(Zki, DUMMY_VAR__);
            stan::math::fill(Zki, DUMMY_VAR__);
            current_statement_begin__ = 392;
            validate_non_negative_index("Sv", "oBN", oBN);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Sv(oBN);
            stan::math::initialize(Sv, DUMMY_VAR__);
            stan::math::fill(Sv, DUMMY_VAR__);
            current_statement_begin__ = 394;
            if (as_bool(logical_eq(Flat_top, 0))) {
                current_statement_begin__ = 395;
                stan::math::assign(Zki, add(multiply(sel_ssnormal(LMP, Smx, Ss1, pstream__), Fk), Mk));
            } else {
                current_statement_begin__ = 397;
                stan::math::assign(Zki, add(multiply(sel_dsnormal(LMP, Smx, Ss1, Ss2, pstream__), Fk), Mk));
            }
            current_statement_begin__ = 399;
            stan::math::assign(Sv, Survival_Est(get_base1(kn_wt, 1, "kn_wt", 1), get_base1(kn_wt, 2, "kn_wt", 1), Len, Zki, Galpha, Gbeta, pstream__));
            current_statement_begin__ = 400;
            stan::math::assign(SPRF, multiply(MB, NinInterval(Sv, Zki, pstream__)));
            current_statement_begin__ = 403;
            stan::math::assign(Zki, rep_vector(Mk, oBN));
            current_statement_begin__ = 404;
            stan::math::assign(Sv, Survival_Est(get_base1(kn_wt, 1, "kn_wt", 1), get_base1(kn_wt, 2, "kn_wt", 1), Len, Zki, Galpha, Gbeta, pstream__));
            current_statement_begin__ = 405;
            stan::math::assign(SPR0, multiply(MB, NinInterval(Sv, Zki, pstream__)));
            current_statement_begin__ = 408;
            stan::math::assign(SPR, (SPRF / SPR0));
            }
            // validate, write generated quantities
            current_statement_begin__ = 382;
            vars__.push_back(SPR);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_BLICC";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nLinf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nGalpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nMk";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nFk";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nSmx";
        param_names__.push_back(param_name_stream__.str());
        size_t nSs_j_1_max__ = N_Ss;
        for (size_t j_1__ = 0; j_1__ < nSs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nSs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "nNB_phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Linf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Galpha";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Mk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Fk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Smx";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ss1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ss2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "NB_phi";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Gbeta";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "SPR";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nLinf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nGalpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nMk";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nFk";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nSmx";
        param_names__.push_back(param_name_stream__.str());
        size_t nSs_j_1_max__ = N_Ss;
        for (size_t j_1__ = 0; j_1__ < nSs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nSs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "nNB_phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Linf";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Galpha";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Mk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Fk";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Smx";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ss1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ss2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "NB_phi";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Gbeta";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "SPR";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_BLICC_namespace::model_BLICC stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
