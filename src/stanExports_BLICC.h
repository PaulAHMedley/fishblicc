// Generated by rstantools.  Do not edit by hand.

/*
    fishblicc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishblicc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishblicc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_BLICC_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 197, column 2 to column 40)",
                                                      " (in 'string', line 198, column 2 to column 42)",
                                                      " (in 'string', line 199, column 2 to column 38)",
                                                      " (in 'string', line 200, column 2 to column 38)",
                                                      " (in 'string', line 201, column 2 to column 38)",
                                                      " (in 'string', line 202, column 2 to column 42)",
                                                      " (in 'string', line 205, column 2 to column 38)",
                                                      " (in 'string', line 206, column 2 to column 45)",
                                                      " (in 'string', line 207, column 2 to column 37)",
                                                      " (in 'string', line 208, column 2 to column 43)",
                                                      " (in 'string', line 209, column 2 to column 44)",
                                                      " (in 'string', line 210, column 2 to column 53)",
                                                      " (in 'string', line 211, column 2 to column 29)",
                                                      " (in 'string', line 275, column 2 to column 11)",
                                                      " (in 'string', line 280, column 4 to column 14)",
                                                      " (in 'string', line 281, column 4 to column 14)",
                                                      " (in 'string', line 282, column 11 to column 13)",
                                                      " (in 'string', line 282, column 4 to column 30)",
                                                      " (in 'string', line 283, column 11 to column 13)",
                                                      " (in 'string', line 283, column 4 to column 18)",
                                                      " (in 'string', line 285, column 4 to column 71)",
                                                      " (in 'string', line 298, column 10 to column 71)",
                                                      " (in 'string', line 296, column 10 to column 73)",
                                                      " (in 'string', line 295, column 13 to line 298, column 71)",
                                                      " (in 'string', line 294, column 10 to column 73)",
                                                      " (in 'string', line 293, column 13 to line 298, column 71)",
                                                      " (in 'string', line 292, column 10 to column 71)",
                                                      " (in 'string', line 291, column 13 to line 298, column 71)",
                                                      " (in 'string', line 290, column 10 to column 73)",
                                                      " (in 'string', line 289, column 8 to line 298, column 71)",
                                                      " (in 'string', line 288, column 23 to line 299, column 7)",
                                                      " (in 'string', line 288, column 6 to line 299, column 7)",
                                                      " (in 'string', line 287, column 21 to line 300, column 5)",
                                                      " (in 'string', line 287, column 4 to line 300, column 5)",
                                                      " (in 'string', line 302, column 4 to column 71)",
                                                      " (in 'string', line 304, column 4 to column 20)",
                                                      " (in 'string', line 279, column 2 to line 305, column 3)",
                                                      " (in 'string', line 220, column 2 to column 40)",
                                                      " (in 'string', line 221, column 2 to column 40)",
                                                      " (in 'string', line 222, column 2 to column 40)",
                                                      " (in 'string', line 223, column 2 to column 40)",
                                                      " (in 'string', line 224, column 2 to column 40)",
                                                      " (in 'string', line 225, column 2 to column 40)",
                                                      " (in 'string', line 231, column 11 to column 13)",
                                                      " (in 'string', line 231, column 4 to column 19)",
                                                      " (in 'string', line 232, column 4 to column 31)",
                                                      " (in 'string', line 233, column 11 to column 13)",
                                                      " (in 'string', line 233, column 4 to column 19)",
                                                      " (in 'string', line 234, column 4 to column 22)",
                                                      " (in 'string', line 235, column 11 to column 13)",
                                                      " (in 'string', line 235, column 4 to column 18)",
                                                      " (in 'string', line 236, column 19 to column 21)",
                                                      " (in 'string', line 236, column 11 to column 13)",
                                                      " (in 'string', line 236, column 4 to column 23)",
                                                      " (in 'string', line 237, column 11 to column 13)",
                                                      " (in 'string', line 237, column 4 to column 30)",
                                                      " (in 'string', line 238, column 11 to column 13)",
                                                      " (in 'string', line 238, column 4 to column 19)",
                                                      " (in 'string', line 249, column 8 to column 60)",
                                                      " (in 'string', line 247, column 8 to column 62)",
                                                      " (in 'string', line 246, column 11 to line 249, column 60)",
                                                      " (in 'string', line 245, column 8 to column 62)",
                                                      " (in 'string', line 244, column 11 to line 249, column 60)",
                                                      " (in 'string', line 243, column 8 to column 60)",
                                                      " (in 'string', line 242, column 11 to line 249, column 60)",
                                                      " (in 'string', line 241, column 8 to column 62)",
                                                      " (in 'string', line 240, column 6 to line 249, column 60)",
                                                      " (in 'string', line 251, column 8 to column 31)",
                                                      " (in 'string', line 252, column 8 to column 23)",
                                                      " (in 'string', line 250, column 23 to line 253, column 7)",
                                                      " (in 'string', line 250, column 6 to line 253, column 7)",
                                                      " (in 'string', line 239, column 21 to line 254, column 5)",
                                                      " (in 'string', line 239, column 4 to line 254, column 5)",
                                                      " (in 'string', line 256, column 4 to column 63)",
                                                      " (in 'string', line 261, column 6 to column 26)",
                                                      " (in 'string', line 262, column 6 to column 23)",
                                                      " (in 'string', line 263, column 6 to column 39)",
                                                      " (in 'string', line 264, column 6 to column 58)",
                                                      " (in 'string', line 266, column 8 to column 30)",
                                                      " (in 'string', line 267, column 8 to column 35)",
                                                      " (in 'string', line 265, column 23 to line 268, column 7)",
                                                      " (in 'string', line 265, column 6 to line 268, column 7)",
                                                      " (in 'string', line 260, column 21 to line 269, column 5)",
                                                      " (in 'string', line 260, column 4 to line 269, column 5)",
                                                      " (in 'string', line 270, column 4 to column 28)",
                                                      " (in 'string', line 271, column 4 to column 44)",
                                                      " (in 'string', line 229, column 2 to line 272, column 3)",
                                                      " (in 'string', line 138, column 2 to column 29)",
                                                      " (in 'string', line 139, column 2 to column 29)",
                                                      " (in 'string', line 140, column 2 to column 29)",
                                                      " (in 'string', line 141, column 9 to column 11)",
                                                      " (in 'string', line 141, column 2 to column 30)",
                                                      " (in 'string', line 142, column 29 to column 31)",
                                                      " (in 'string', line 142, column 33 to column 35)",
                                                      " (in 'string', line 142, column 2 to column 37)",
                                                      " (in 'string', line 143, column 9 to column 11)",
                                                      " (in 'string', line 143, column 2 to column 37)",
                                                      " (in 'string', line 144, column 30 to column 32)",
                                                      " (in 'string', line 144, column 2 to column 34)",
                                                      " (in 'string', line 145, column 31 to column 33)",
                                                      " (in 'string', line 145, column 2 to column 35)",
                                                      " (in 'string', line 146, column 2 to column 29)",
                                                      " (in 'string', line 147, column 31 to column 33)",
                                                      " (in 'string', line 147, column 2 to column 35)",
                                                      " (in 'string', line 148, column 13 to column 15)",
                                                      " (in 'string', line 148, column 2 to column 31)",
                                                      " (in 'string', line 151, column 2 to column 23)",
                                                      " (in 'string', line 152, column 2 to column 23)",
                                                      " (in 'string', line 153, column 2 to column 22)",
                                                      " (in 'string', line 154, column 2 to column 22)",
                                                      " (in 'string', line 155, column 9 to column 11)",
                                                      " (in 'string', line 155, column 2 to column 19)",
                                                      " (in 'string', line 156, column 2 to column 22)",
                                                      " (in 'string', line 157, column 2 to column 22)",
                                                      " (in 'string', line 158, column 9 to column 11)",
                                                      " (in 'string', line 158, column 2 to column 22)",
                                                      " (in 'string', line 159, column 2 to column 22)",
                                                      " (in 'string', line 160, column 9 to column 11)",
                                                      " (in 'string', line 160, column 2 to column 21)",
                                                      " (in 'string', line 161, column 9 to column 11)",
                                                      " (in 'string', line 161, column 2 to column 21)",
                                                      " (in 'string', line 162, column 2 to column 26)",
                                                      " (in 'string', line 163, column 2 to column 26)",
                                                      " (in 'string', line 164, column 2 to column 21)",
                                                      " (in 'string', line 165, column 2 to column 18)",
                                                      " (in 'string', line 166, column 9 to column 11)",
                                                      " (in 'string', line 166, column 2 to column 24)",
                                                      " (in 'string', line 167, column 9 to column 11)",
                                                      " (in 'string', line 167, column 2 to column 26)",
                                                      " (in 'string', line 170, column 2 to column 20)",
                                                      " (in 'string', line 171, column 9 to column 11)",
                                                      " (in 'string', line 171, column 2 to column 21)",
                                                      " (in 'string', line 172, column 9 to column 11)",
                                                      " (in 'string', line 172, column 2 to column 20)",
                                                      " (in 'string', line 173, column 9 to column 11)",
                                                      " (in 'string', line 173, column 2 to column 20)",
                                                      " (in 'string', line 175, column 4 to column 27)",
                                                      " (in 'string', line 174, column 19 to line 176, column 3)",
                                                      " (in 'string', line 174, column 2 to line 176, column 3)",
                                                      " (in 'string', line 182, column 8 to column 38)",
                                                      " (in 'string', line 181, column 23 to line 183, column 9)",
                                                      " (in 'string', line 181, column 6 to line 183, column 9)",
                                                      " (in 'string', line 184, column 6 to column 34)",
                                                      " (in 'string', line 180, column 11 to line 185, column 5)",
                                                      " (in 'string', line 179, column 6 to column 17)",
                                                      " (in 'string', line 178, column 15 to line 180, column 5)",
                                                      " (in 'string', line 178, column 4 to line 185, column 5)",
                                                      " (in 'string', line 177, column 2 to line 186, column 3)",
                                                      " (in 'string', line 187, column 2 to column 24)",
                                                      " (in 'string', line 190, column 4 to column 37)",
                                                      " (in 'string', line 189, column 2 to line 190, column 37)",
                                                      " (in 'string', line 191, column 2 to column 48)",
                                                      " (in 'string', line 200, column 9 to column 11)",
                                                      " (in 'string', line 201, column 9 to column 11)",
                                                      " (in 'string', line 208, column 9 to column 11)",
                                                      " (in 'string', line 209, column 9 to column 11)",
                                                      " (in 'string', line 22, column 2 to column 21)",
                                                      " (in 'string', line 23, column 9 to column 11)",
                                                      " (in 'string', line 23, column 2 to column 54)",
                                                      " (in 'string', line 24, column 2 to column 13)",
                                                      " (in 'string', line 19, column 44 to line 25, column 1)",
                                                      " (in 'string', line 30, column 2 to column 21)",
                                                      " (in 'string', line 31, column 9 to column 11)",
                                                      " (in 'string', line 31, column 2 to column 51)",
                                                      " (in 'string', line 32, column 2 to column 13)",
                                                      " (in 'string', line 27, column 42 to line 33, column 1)",
                                                      " (in 'string', line 38, column 2 to column 21)",
                                                      " (in 'string', line 39, column 2 to column 13)",
                                                      " (in 'string', line 40, column 9 to column 11)",
                                                      " (in 'string', line 40, column 2 to column 17)",
                                                      " (in 'string', line 43, column 4 to column 12)",
                                                      " (in 'string', line 42, column 2 to line 43, column 12)",
                                                      " (in 'string', line 47, column 4 to column 54)",
                                                      " (in 'string', line 48, column 4 to column 12)",
                                                      " (in 'string', line 49, column 4 to column 42)",
                                                      " (in 'string', line 46, column 7 to line 50, column 3)",
                                                      " (in 'string', line 45, column 4 to column 42)",
                                                      " (in 'string', line 44, column 2 to line 50, column 3)",
                                                      " (in 'string', line 51, column 2 to column 13)",
                                                      " (in 'string', line 35, column 44 to line 52, column 1)",
                                                      " (in 'string', line 57, column 2 to column 21)",
                                                      " (in 'string', line 58, column 9 to column 11)",
                                                      " (in 'string', line 58, column 2 to column 17)",
                                                      " (in 'string', line 59, column 9 to column 11)",
                                                      " (in 'string', line 59, column 2 to column 18)",
                                                      " (in 'string', line 62, column 48 to column 65)",
                                                      " (in 'string', line 62, column 25 to column 42)",
                                                      " (in 'string', line 62, column 4 to column 65)",
                                                      " (in 'string', line 61, column 2 to line 62, column 65)",
                                                      " (in 'string', line 63, column 2 to column 39)",
                                                      " (in 'string', line 64, column 2 to column 13)",
                                                      " (in 'string', line 54, column 44 to line 65, column 1)",
                                                      " (in 'string', line 75, column 2 to column 21)",
                                                      " (in 'string', line 76, column 9 to column 11)",
                                                      " (in 'string', line 76, column 2 to column 37)",
                                                      " (in 'string', line 77, column 9 to column 11)",
                                                      " (in 'string', line 77, column 2 to column 39)",
                                                      " (in 'string', line 78, column 9 to column 11)",
                                                      " (in 'string', line 78, column 2 to column 39)",
                                                      " (in 'string', line 79, column 9 to column 11)",
                                                      " (in 'string', line 79, column 2 to column 19)",
                                                      " (in 'string', line 80, column 9 to column 11)",
                                                      " (in 'string', line 80, column 2 to column 19)",
                                                      " (in 'string', line 81, column 2 to column 17)",
                                                      " (in 'string', line 85, column 4 to column 60)",
                                                      " (in 'string', line 83, column 4 to column 60)",
                                                      " (in 'string', line 82, column 2 to line 85, column 60)",
                                                      " (in 'string', line 87, column 49 to column 67)",
                                                      " (in 'string', line 87, column 25 to column 43)",
                                                      " (in 'string', line 87, column 4 to column 67)",
                                                      " (in 'string', line 88, column 49 to column 67)",
                                                      " (in 'string', line 88, column 25 to column 43)",
                                                      " (in 'string', line 88, column 4 to column 67)",
                                                      " (in 'string', line 86, column 18 to line 89, column 3)",
                                                      " (in 'string', line 86, column 2 to line 89, column 3)",
                                                      " (in 'string', line 90, column 2 to column 73)",
                                                      " (in 'string', line 91, column 2 to column 13)",
                                                      " (in 'string', line 67, column 42 to line 92, column 1)",
                                                      " (in 'string', line 102, column 2 to column 32)",
                                                      " (in 'string', line 103, column 2 to column 36)",
                                                      " (in 'string', line 104, column 2 to column 42)",
                                                      " (in 'string', line 105, column 9 to column 11)",
                                                      " (in 'string', line 105, column 2 to column 41)",
                                                      " (in 'string', line 106, column 9 to column 11)",
                                                      " (in 'string', line 106, column 2 to column 42)",
                                                      " (in 'string', line 107, column 9 to column 13)",
                                                      " (in 'string', line 107, column 2 to column 74)",
                                                      " (in 'string', line 108, column 9 to column 11)",
                                                      " (in 'string', line 108, column 2 to column 22)",
                                                      " (in 'string', line 109, column 9 to column 11)",
                                                      " (in 'string', line 109, column 2 to column 21)",
                                                      " (in 'string', line 110, column 13 to column 15)",
                                                      " (in 'string', line 110, column 2 to column 20)",
                                                      " (in 'string', line 111, column 2 to column 76)",
                                                      " (in 'string', line 112, column 2 to column 28)",
                                                      " (in 'string', line 113, column 2 to line 114, column 73)",
                                                      " (in 'string', line 115, column 2 to column 28)",
                                                      " (in 'string', line 118, column 11 to column 14)",
                                                      " (in 'string', line 118, column 4 to column 38)",
                                                      " (in 'string', line 119, column 11 to column 14)",
                                                      " (in 'string', line 119, column 4 to column 35)",
                                                      " (in 'string', line 120, column 15 to column 17)",
                                                      " (in 'string', line 120, column 4 to column 88)",
                                                      " (in 'string', line 121, column 4 to column 37)",
                                                      " (in 'string', line 122, column 15 to column 17)",
                                                      " (in 'string', line 122, column 4 to column 22)",
                                                      " (in 'string', line 124, column 6 to column 59)",
                                                      " (in 'string', line 123, column 4 to line 124, column 59)",
                                                      " (in 'string', line 125, column 4 to column 23)",
                                                      " (in 'string', line 126, column 4 to column 30)",
                                                      " (in 'string', line 117, column 18 to line 127, column 3)",
                                                      " (in 'string', line 117, column 2 to line 127, column 3)",
                                                      " (in 'string', line 128, column 2 to column 65)",
                                                      " (in 'string', line 129, column 2 to column 13)",
                                                      " (in 'string', line 94, column 90 to line 130, column 1)"};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sel_logistic(const T0__& LMP_arg__, const T1__& par_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& LMP = to_ref(LMP_arg__);
  const auto& par = to_ref(par_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 157;
    nl = rows(LMP);
    current_statement__ = 158;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 159;
    assign(Sel, nil_index_list(),
      inv_logit(multiply(par[(2 - 1)], subtract(LMP, par[(1 - 1)]))),
      "assigning variable Sel");
    current_statement__ = 160;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_logistic_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& LMP, const T1__& par, std::ostream* pstream__)  const 
{
return sel_logistic(LMP, par, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sel_normal(const T0__& LMP_arg__, const T1__& par_arg__,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& LMP = to_ref(LMP_arg__);
  const auto& par = to_ref(par_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 162;
    nl = rows(LMP);
    current_statement__ = 163;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 164;
    assign(Sel, nil_index_list(),
      stan::math::exp(
        multiply(-par[(2 - 1)], pow(subtract(LMP, par[(1 - 1)]), 2))),
      "assigning variable Sel");
    current_statement__ = 165;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_normal_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& LMP, const T1__& par, std::ostream* pstream__)  const 
{
return sel_normal(LMP, par, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sel_ssnormal(const T0__& LMP_arg__, const T1__& par_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& LMP = to_ref(LMP_arg__);
  const auto& par = to_ref(par_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 167;
    nl = rows(LMP);
    int nv;
    nv = std::numeric_limits<int>::min();
    
    current_statement__ = 168;
    nv = 1;
    current_statement__ = 169;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 172;
    while (logical_lt(LMP[(nv - 1)], par[(1 - 1)])) {
      current_statement__ = 171;
      nv = (nv + 1);
    }
    current_statement__ = 178;
    if (logical_gte(nv, nl)) {
      current_statement__ = 177;
      assign(Sel, nil_index_list(),
        stan::math::exp(
          multiply(-par[(2 - 1)], pow(subtract(LMP, par[(1 - 1)]), 2))),
        "assigning variable Sel");
    } else {
      current_statement__ = 173;
      assign(Sel, cons_list(index_min_max(1, nv), nil_index_list()),
        stan::math::exp(
          multiply(-par[(2 - 1)],
            pow(
              subtract(
                rvalue(LMP,
                  cons_list(index_min_max(1, nv), nil_index_list()), "LMP"),
                par[(1 - 1)]), 2))), "assigning variable Sel");
      current_statement__ = 174;
      nv = (nv + 1);
      current_statement__ = 175;
      assign(Sel, cons_list(index_min_max(nv, nl), nil_index_list()),
        rep_vector(1.0, ((nl - nv) + 1)), "assigning variable Sel");
    }
    current_statement__ = 179;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_ssnormal_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& LMP, const T1__& par, std::ostream* pstream__)  const 
{
return sel_ssnormal(LMP, par, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sel_dsnormal(const T0__& LMP_arg__, const T1__& par_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& LMP = to_ref(LMP_arg__);
  const auto& par = to_ref(par_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 181;
    nl = rows(LMP);
    current_statement__ = 182;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 184;
    validate_non_negative_index("pars", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> pars;
    pars = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(pars, DUMMY_VAR__);
    
    current_statement__ = 189;
    for (int i = 1; i <= nl; ++i) {
      current_statement__ = 188;
      if (logical_lt(LMP[(i - 1)], par[(1 - 1)])) {
        current_statement__ = 187;
        assign(pars, cons_list(index_uni(i), nil_index_list()), par[(2 - 1)],
          "assigning variable pars");
      } else {
        current_statement__ = 186;
        assign(pars, cons_list(index_uni(i), nil_index_list()), par[(3 - 1)],
          "assigning variable pars");
      }}
    current_statement__ = 190;
    assign(Sel, nil_index_list(),
      stan::math::exp(
        elt_multiply(minus(pars), pow(subtract(LMP, par[(1 - 1)]), 2))),
      "assigning variable Sel");
    current_statement__ = 191;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_dsnormal_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& LMP, const T1__& par, std::ostream* pstream__)  const 
{
return sel_dsnormal(LMP, par, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
sel_dsnmix(const T0__& LMP_arg__, const T1__& par_arg__,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& LMP = to_ref(LMP_arg__);
  const auto& par = to_ref(par_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 193;
    nl = rows(LMP);
    current_statement__ = 194;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 195;
    assign(Sel, nil_index_list(), rep_vector(0, nl), "assigning variable Sel");
    current_statement__ = 196;
    validate_non_negative_index("Adiff2", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Adiff2;
    Adiff2 = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Adiff2, DUMMY_VAR__);
    
    current_statement__ = 197;
    assign(Adiff2, nil_index_list(), pow(subtract(LMP, par[(1 - 1)]), 2),
      "assigning variable Adiff2");
    current_statement__ = 198;
    validate_non_negative_index("Bdiff2", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Bdiff2;
    Bdiff2 = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Bdiff2, DUMMY_VAR__);
    
    current_statement__ = 199;
    assign(Bdiff2, nil_index_list(), pow(subtract(LMP, par[(2 - 1)]), 2),
      "assigning variable Bdiff2");
    current_statement__ = 200;
    validate_non_negative_index("Apars", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Apars;
    Apars = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Apars, DUMMY_VAR__);
    
    current_statement__ = 202;
    validate_non_negative_index("Bpars", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Bpars;
    Bpars = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Bpars, DUMMY_VAR__);
    
    local_scalar_t__ lwt;
    lwt = DUMMY_VAR__;
    
    current_statement__ = 207;
    if (logical_lt(par[(1 - 1)], par[(2 - 1)])) {
      current_statement__ = 206;
      lwt = -stan::math::log(
               (1 +
                 (par[(3 - 1)] *
                   stan::math::exp(
                     (-pow((par[(2 - 1)] - par[(1 - 1)]), 2) * par[(6 - 1)])))));
    } else {
      current_statement__ = 205;
      lwt = -stan::math::log(
               (1 +
                 (par[(3 - 1)] *
                   stan::math::exp(
                     (-pow((par[(2 - 1)] - par[(1 - 1)]), 2) * par[(7 - 1)])))));
    }
    current_statement__ = 215;
    for (int i = 1; i <= nl; ++i) {
      current_statement__ = 210;
      if (logical_lt(LMP[(i - 1)], par[(1 - 1)])) {
        current_statement__ = 209;
        assign(Apars, cons_list(index_uni(i), nil_index_list()),
          par[(4 - 1)], "assigning variable Apars");
      } else {
        current_statement__ = 208;
        assign(Apars, cons_list(index_uni(i), nil_index_list()),
          par[(5 - 1)], "assigning variable Apars");
      }
      current_statement__ = 213;
      if (logical_lt(LMP[(i - 1)], par[(2 - 1)])) {
        current_statement__ = 212;
        assign(Bpars, cons_list(index_uni(i), nil_index_list()),
          par[(6 - 1)], "assigning variable Bpars");
      } else {
        current_statement__ = 211;
        assign(Bpars, cons_list(index_uni(i), nil_index_list()),
          par[(7 - 1)], "assigning variable Bpars");
      }}
    current_statement__ = 216;
    assign(Sel, nil_index_list(),
      add(stan::math::exp(add(elt_multiply(minus(Apars), Adiff2), lwt)),
        multiply(par[(3 - 1)],
          stan::math::exp(add(elt_multiply(minus(Bpars), Bdiff2), lwt)))),
      "assigning variable Sel");
    current_statement__ = 217;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_dsnmix_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& LMP, const T1__& par, std::ostream* pstream__)  const 
{
return sel_dsnmix(LMP, par, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
T4__, stan::promote_args_t<T5__>>, -1, 1>
Pop_L(const T0__& gl_node_arg__, const T1__& gl_wt_arg__,
      const T2__& Len_arg__, const T3__& Zki_arg__, const T4__& alpha,
      const T5__& beta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T4__, stan::promote_args_t<T5__>>;
  const auto& gl_node = to_ref(gl_node_arg__);
  const auto& gl_wt = to_ref(gl_wt_arg__);
  const auto& Len = to_ref(Len_arg__);
  const auto& Zki = to_ref(Zki_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 219;
    nl = rows(Len);
    int nv;
    nv = std::numeric_limits<int>::min();
    
    current_statement__ = 220;
    nv = rows(gl_node);
    local_scalar_t__ lg_alpha;
    lg_alpha = DUMMY_VAR__;
    
    current_statement__ = 221;
    lg_alpha = stan::math::lgamma(alpha);
    current_statement__ = 222;
    validate_non_negative_index("x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__, -1, 1> x_beta;
    x_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(nv);
    stan::math::fill(x_beta, DUMMY_VAR__);
    
    current_statement__ = 223;
    assign(x_beta, nil_index_list(), divide(gl_node, beta),
      "assigning variable x_beta");
    current_statement__ = 224;
    validate_non_negative_index("log_x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_x_beta;
    log_x_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(nv);
    stan::math::fill(log_x_beta, DUMMY_VAR__);
    
    current_statement__ = 225;
    assign(log_x_beta, nil_index_list(), stan::math::log(x_beta),
      "assigning variable log_x_beta");
    current_statement__ = 226;
    validate_non_negative_index("Zin", "nl - 1", (nl - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> Zin;
    Zin = Eigen::Matrix<local_scalar_t__, -1, 1>((nl - 1));
    stan::math::fill(Zin, DUMMY_VAR__);
    
    current_statement__ = 227;
    assign(Zin, nil_index_list(),
      append_row(-Zki[(1 - 1)],
        subtract(
          rvalue(Zki,
            cons_list(index_min_max(1, (nl - 2)), nil_index_list()), "Zki"),
          rvalue(Zki,
            cons_list(index_min_max(2, (nl - 1)), nil_index_list()), "Zki"))),
      "assigning variable Zin");
    current_statement__ = 228;
    validate_non_negative_index("surv", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> surv;
    surv = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(surv, DUMMY_VAR__);
    
    current_statement__ = 230;
    validate_non_negative_index("pop", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> pop;
    pop = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(pop, DUMMY_VAR__);
    
    current_statement__ = 232;
    validate_non_negative_index("ss", "nv", nv);
    Eigen::Matrix<local_scalar_t__, 1, -1> ss;
    ss = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
    stan::math::fill(ss, DUMMY_VAR__);
    
    current_statement__ = 234;
    assign(ss, nil_index_list(),
      transpose(
        subtract(
          subtract(
            multiply(stan::math::log(add(gl_node, (beta * Len[(1 - 1)]))),
              (alpha - 1.0)), (beta * Len[(1 - 1)])), lg_alpha)),
      "assigning variable ss");
    current_statement__ = 235;
    assign(surv, cons_list(index_uni(1), nil_index_list()),
      multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");
    current_statement__ = 236;
    assign(ss, nil_index_list(),
      transpose(
        subtract(
          subtract(
            add(
              add(
                multiply(
                  minus(
                    stan::math::log(
                      subtract(add(x_beta, Len[(2 - 1)]), Len[(1 - 1)]))),
                  Zki[(1 - 1)]), multiply(log_x_beta, Zki[(1 - 1)])),
              multiply(stan::math::log(add(gl_node, (beta * Len[(2 - 1)]))),
                (alpha - 1.0))), (beta * Len[(2 - 1)])), lg_alpha)),
      "assigning variable ss");
    current_statement__ = 237;
    assign(surv, cons_list(index_uni(2), nil_index_list()),
      multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");
    current_statement__ = 252;
    for (int n = 3; n <= nl; ++n) {
      current_statement__ = 238;
      validate_non_negative_index("Lrange", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> Lrange;
      Lrange = Eigen::Matrix<local_scalar_t__, -1, 1>((n - 1));
      stan::math::fill(Lrange, DUMMY_VAR__);
      
      current_statement__ = 239;
      assign(Lrange, nil_index_list(),
        rvalue(Len, cons_list(index_min_max(1, (n - 1)), nil_index_list()),
          "Len"), "assigning variable Lrange");
      current_statement__ = 240;
      validate_non_negative_index("Zii", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> Zii;
      Zii = Eigen::Matrix<local_scalar_t__, -1, 1>((n - 1));
      stan::math::fill(Zii, DUMMY_VAR__);
      
      current_statement__ = 241;
      assign(Zii, nil_index_list(),
        rvalue(Zin, cons_list(index_min_max(1, (n - 1)), nil_index_list()),
          "Zin"), "assigning variable Zii");
      current_statement__ = 242;
      validate_non_negative_index("v2", "nv", nv);
      Eigen::Matrix<local_scalar_t__, 1, -1> v2;
      v2 = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
      stan::math::fill(v2, DUMMY_VAR__);
      
      current_statement__ = 243;
      assign(v2, nil_index_list(),
        transpose(
          add(multiply(log_x_beta, Zki[((n - 1) - 1)]),
            multiply(stan::math::log(add(gl_node, (beta * Len[(n - 1)]))),
              (alpha - 1.0)))), "assigning variable v2");
      local_scalar_t__ v3;
      v3 = DUMMY_VAR__;
      
      current_statement__ = 244;
      v3 = ((beta * Len[(n - 1)]) + lg_alpha);
      current_statement__ = 245;
      validate_non_negative_index("v1", "nv", nv);
      Eigen::Matrix<local_scalar_t__, 1, -1> v1;
      v1 = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
      stan::math::fill(v1, DUMMY_VAR__);
      
      current_statement__ = 248;
      for (int i = 1; i <= nv; ++i) {
        current_statement__ = 247;
        assign(v1, cons_list(index_uni(i), nil_index_list()),
          sum(
            elt_multiply(
              stan::math::log(
                subtract((x_beta[(i - 1)] + Len[(n - 1)]), Lrange)), Zii)),
          "assigning variable v1");}
      current_statement__ = 249;
      assign(ss, nil_index_list(), subtract(add(v1, v2), v3),
        "assigning variable ss");
      current_statement__ = 250;
      assign(surv, cons_list(index_uni(n), nil_index_list()),
        multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");}
    current_statement__ = 253;
    assign(pop, nil_index_list(),
      elt_divide(
        append_row(
          subtract(
            rvalue(surv,
              cons_list(index_min_max(1, (nl - 1)), nil_index_list()),
              "surv"),
            rvalue(surv, cons_list(index_min_max(2, nl), nil_index_list()),
              "surv")), surv[(nl - 1)]), Zki), "assigning variable pop");
    current_statement__ = 254;
    return pop;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct Pop_L_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& gl_node, const T1__& gl_wt, const T2__& Len,
           const T3__& Zki, const T4__& alpha, const T5__& beta,
           std::ostream* pstream__)  const 
{
return Pop_L(gl_node, gl_wt, Len, Zki, alpha, beta, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_BLICC final : public model_base_crtp<model_BLICC> {
private:
  int NG;
  int NF;
  int NB;
  Eigen::Matrix<double, -1, 1> LLB;
  std::vector<std::vector<int>> fq;
  Eigen::Matrix<double, -1, 1> prop_catch;
  std::vector<int> Fkg;
  std::vector<int> fSel;
  int NP;
  std::vector<int> sp_i;
  Eigen::Matrix<double, 1, -1> ma_L;
  double poLinfm;
  double poLinfs;
  double polGam;
  double polGas;
  Eigen::Matrix<double, -1, 1> M_L;
  double polMkm;
  double polMks;
  Eigen::Matrix<double, -1, 1> polFkm;
  double polFks;
  Eigen::Matrix<double, -1, 1> polSm;
  Eigen::Matrix<double, -1, 1> polSs;
  double polNB_phim;
  double polNB_phis;
  double polCs;
  int NK;
  Eigen::Matrix<double, -1, 1> gl_nodes;
  Eigen::Matrix<double, -1, 1> gl_weights;
  double eps;
  Eigen::Matrix<double, -1, 1> NObs;
  Eigen::Matrix<double, -1, 1> olC;
  Eigen::Matrix<double, -1, 1> LMP;
 
public:
  ~model_BLICC() { }
  
  inline std::string model_name() const final { return "model_BLICC"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_BLICC(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_BLICC_namespace::model_BLICC";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 88;
      context__.validate_dims("data initialization","NG","int",
          context__.to_vec());
      NG = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      NG = context__.vals_i("NG")[(1 - 1)];
      current_statement__ = 88;
      current_statement__ = 88;
      check_greater_or_equal(function__, "NG", NG, 1);
      current_statement__ = 89;
      context__.validate_dims("data initialization","NF","int",
          context__.to_vec());
      NF = std::numeric_limits<int>::min();
      
      current_statement__ = 89;
      NF = context__.vals_i("NF")[(1 - 1)];
      current_statement__ = 89;
      current_statement__ = 89;
      check_greater_or_equal(function__, "NF", NF, 1);
      current_statement__ = 89;
      current_statement__ = 89;
      check_less_or_equal(function__, "NF", NF, NG);
      current_statement__ = 90;
      context__.validate_dims("data initialization","NB","int",
          context__.to_vec());
      NB = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      NB = context__.vals_i("NB")[(1 - 1)];
      current_statement__ = 90;
      current_statement__ = 90;
      check_greater_or_equal(function__, "NB", NB, 1);
      current_statement__ = 91;
      validate_non_negative_index("LLB", "NB", NB);
      current_statement__ = 92;
      context__.validate_dims("data initialization","LLB","double",
          context__.to_vec(NB));
      LLB = Eigen::Matrix<double, -1, 1>(NB);
      stan::math::fill(LLB, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> LLB_flat__;
        current_statement__ = 92;
        assign(LLB_flat__, nil_index_list(), context__.vals_r("LLB"),
          "assigning variable LLB_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 92;
          assign(LLB, cons_list(index_uni(sym1__), nil_index_list()),
            LLB_flat__[(pos__ - 1)], "assigning variable LLB");
          current_statement__ = 92;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 93;
      validate_non_negative_index("fq", "NG", NG);
      current_statement__ = 94;
      validate_non_negative_index("fq", "NB", NB);
      current_statement__ = 95;
      context__.validate_dims("data initialization","fq","int",
          context__.to_vec(NG, NB));
      fq = std::vector<std::vector<int>>(NG, std::vector<int>(NB, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> fq_flat__;
        current_statement__ = 95;
        assign(fq_flat__, nil_index_list(), context__.vals_i("fq"),
          "assigning variable fq_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= NG; ++sym2__) {
            current_statement__ = 95;
            assign(fq,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              fq_flat__[(pos__ - 1)], "assigning variable fq");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 96;
      validate_non_negative_index("prop_catch", "NF", NF);
      current_statement__ = 97;
      context__.validate_dims("data initialization","prop_catch","double",
          context__.to_vec(NF));
      prop_catch = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(prop_catch, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prop_catch_flat__;
        current_statement__ = 97;
        assign(prop_catch_flat__, nil_index_list(),
          context__.vals_r("prop_catch"),
          "assigning variable prop_catch_flat__");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 97;
          assign(prop_catch, cons_list(index_uni(sym1__), nil_index_list()),
            prop_catch_flat__[(pos__ - 1)], "assigning variable prop_catch");
          current_statement__ = 97;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 98;
      validate_non_negative_index("Fkg", "NG", NG);
      current_statement__ = 99;
      context__.validate_dims("data initialization","Fkg","int",
          context__.to_vec(NG));
      Fkg = std::vector<int>(NG, std::numeric_limits<int>::min());
      
      current_statement__ = 99;
      assign(Fkg, nil_index_list(), context__.vals_i("Fkg"),
        "assigning variable Fkg");
      current_statement__ = 99;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 99;
        current_statement__ = 99;
        check_greater_or_equal(function__, "Fkg[sym1__]", Fkg[(sym1__ - 1)],
                               0);}
      current_statement__ = 99;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 99;
        current_statement__ = 99;
        check_less_or_equal(function__, "Fkg[sym1__]", Fkg[(sym1__ - 1)], NG);
      }
      current_statement__ = 100;
      validate_non_negative_index("fSel", "NG", NG);
      current_statement__ = 101;
      context__.validate_dims("data initialization","fSel","int",
          context__.to_vec(NG));
      fSel = std::vector<int>(NG, std::numeric_limits<int>::min());
      
      current_statement__ = 101;
      assign(fSel, nil_index_list(), context__.vals_i("fSel"),
        "assigning variable fSel");
      current_statement__ = 101;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 101;
        current_statement__ = 101;
        check_greater_or_equal(function__, "fSel[sym1__]",
                               fSel[(sym1__ - 1)], 1);}
      current_statement__ = 101;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 101;
        current_statement__ = 101;
        check_less_or_equal(function__, "fSel[sym1__]", fSel[(sym1__ - 1)], 5);
      }
      current_statement__ = 102;
      context__.validate_dims("data initialization","NP","int",
          context__.to_vec());
      NP = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      NP = context__.vals_i("NP")[(1 - 1)];
      current_statement__ = 102;
      current_statement__ = 102;
      check_greater_or_equal(function__, "NP", NP, 2);
      current_statement__ = 103;
      validate_non_negative_index("sp_i", "NG", NG);
      current_statement__ = 104;
      context__.validate_dims("data initialization","sp_i","int",
          context__.to_vec(NG));
      sp_i = std::vector<int>(NG, std::numeric_limits<int>::min());
      
      current_statement__ = 104;
      assign(sp_i, nil_index_list(), context__.vals_i("sp_i"),
        "assigning variable sp_i");
      current_statement__ = 104;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_greater_or_equal(function__, "sp_i[sym1__]",
                               sp_i[(sym1__ - 1)], 1);}
      current_statement__ = 104;
      for (int sym1__ = 1; sym1__ <= NG; ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_less_or_equal(function__, "sp_i[sym1__]", sp_i[(sym1__ - 1)],
                            NP);}
      current_statement__ = 105;
      validate_non_negative_index("ma_L", "NB", NB);
      current_statement__ = 106;
      context__.validate_dims("data initialization","ma_L","double",
          context__.to_vec(NB));
      ma_L = Eigen::Matrix<double, 1, -1>(NB);
      stan::math::fill(ma_L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ma_L_flat__;
        current_statement__ = 106;
        assign(ma_L_flat__, nil_index_list(), context__.vals_r("ma_L"),
          "assigning variable ma_L_flat__");
        current_statement__ = 106;
        pos__ = 1;
        current_statement__ = 106;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 106;
          assign(ma_L, cons_list(index_uni(sym1__), nil_index_list()),
            ma_L_flat__[(pos__ - 1)], "assigning variable ma_L");
          current_statement__ = 106;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 107;
      context__.validate_dims("data initialization","poLinfm","double",
          context__.to_vec());
      poLinfm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 107;
      poLinfm = context__.vals_r("poLinfm")[(1 - 1)];
      current_statement__ = 108;
      context__.validate_dims("data initialization","poLinfs","double",
          context__.to_vec());
      poLinfs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 108;
      poLinfs = context__.vals_r("poLinfs")[(1 - 1)];
      current_statement__ = 109;
      context__.validate_dims("data initialization","polGam","double",
          context__.to_vec());
      polGam = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 109;
      polGam = context__.vals_r("polGam")[(1 - 1)];
      current_statement__ = 110;
      context__.validate_dims("data initialization","polGas","double",
          context__.to_vec());
      polGas = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 110;
      polGas = context__.vals_r("polGas")[(1 - 1)];
      current_statement__ = 111;
      validate_non_negative_index("M_L", "NB", NB);
      current_statement__ = 112;
      context__.validate_dims("data initialization","M_L","double",
          context__.to_vec(NB));
      M_L = Eigen::Matrix<double, -1, 1>(NB);
      stan::math::fill(M_L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> M_L_flat__;
        current_statement__ = 112;
        assign(M_L_flat__, nil_index_list(), context__.vals_r("M_L"),
          "assigning variable M_L_flat__");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 112;
          assign(M_L, cons_list(index_uni(sym1__), nil_index_list()),
            M_L_flat__[(pos__ - 1)], "assigning variable M_L");
          current_statement__ = 112;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 113;
      context__.validate_dims("data initialization","polMkm","double",
          context__.to_vec());
      polMkm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 113;
      polMkm = context__.vals_r("polMkm")[(1 - 1)];
      current_statement__ = 114;
      context__.validate_dims("data initialization","polMks","double",
          context__.to_vec());
      polMks = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 114;
      polMks = context__.vals_r("polMks")[(1 - 1)];
      current_statement__ = 115;
      validate_non_negative_index("polFkm", "NF", NF);
      current_statement__ = 116;
      context__.validate_dims("data initialization","polFkm","double",
          context__.to_vec(NF));
      polFkm = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(polFkm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> polFkm_flat__;
        current_statement__ = 116;
        assign(polFkm_flat__, nil_index_list(), context__.vals_r("polFkm"),
          "assigning variable polFkm_flat__");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 116;
          assign(polFkm, cons_list(index_uni(sym1__), nil_index_list()),
            polFkm_flat__[(pos__ - 1)], "assigning variable polFkm");
          current_statement__ = 116;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 117;
      context__.validate_dims("data initialization","polFks","double",
          context__.to_vec());
      polFks = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 117;
      polFks = context__.vals_r("polFks")[(1 - 1)];
      current_statement__ = 118;
      validate_non_negative_index("polSm", "NP", NP);
      current_statement__ = 119;
      context__.validate_dims("data initialization","polSm","double",
          context__.to_vec(NP));
      polSm = Eigen::Matrix<double, -1, 1>(NP);
      stan::math::fill(polSm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> polSm_flat__;
        current_statement__ = 119;
        assign(polSm_flat__, nil_index_list(), context__.vals_r("polSm"),
          "assigning variable polSm_flat__");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
          current_statement__ = 119;
          assign(polSm, cons_list(index_uni(sym1__), nil_index_list()),
            polSm_flat__[(pos__ - 1)], "assigning variable polSm");
          current_statement__ = 119;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 120;
      validate_non_negative_index("polSs", "NP", NP);
      current_statement__ = 121;
      context__.validate_dims("data initialization","polSs","double",
          context__.to_vec(NP));
      polSs = Eigen::Matrix<double, -1, 1>(NP);
      stan::math::fill(polSs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> polSs_flat__;
        current_statement__ = 121;
        assign(polSs_flat__, nil_index_list(), context__.vals_r("polSs"),
          "assigning variable polSs_flat__");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
          current_statement__ = 121;
          assign(polSs, cons_list(index_uni(sym1__), nil_index_list()),
            polSs_flat__[(pos__ - 1)], "assigning variable polSs");
          current_statement__ = 121;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 122;
      context__.validate_dims("data initialization","polNB_phim","double",
          context__.to_vec());
      polNB_phim = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 122;
      polNB_phim = context__.vals_r("polNB_phim")[(1 - 1)];
      current_statement__ = 123;
      context__.validate_dims("data initialization","polNB_phis","double",
          context__.to_vec());
      polNB_phis = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 123;
      polNB_phis = context__.vals_r("polNB_phis")[(1 - 1)];
      current_statement__ = 124;
      context__.validate_dims("data initialization","polCs","double",
          context__.to_vec());
      polCs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 124;
      polCs = context__.vals_r("polCs")[(1 - 1)];
      current_statement__ = 125;
      context__.validate_dims("data initialization","NK","int",
          context__.to_vec());
      NK = std::numeric_limits<int>::min();
      
      current_statement__ = 125;
      NK = context__.vals_i("NK")[(1 - 1)];
      current_statement__ = 125;
      current_statement__ = 125;
      check_greater_or_equal(function__, "NK", NK, 5);
      current_statement__ = 126;
      validate_non_negative_index("gl_nodes", "NK", NK);
      current_statement__ = 127;
      context__.validate_dims("data initialization","gl_nodes","double",
          context__.to_vec(NK));
      gl_nodes = Eigen::Matrix<double, -1, 1>(NK);
      stan::math::fill(gl_nodes, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gl_nodes_flat__;
        current_statement__ = 127;
        assign(gl_nodes_flat__, nil_index_list(),
          context__.vals_r("gl_nodes"), "assigning variable gl_nodes_flat__");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= NK; ++sym1__) {
          current_statement__ = 127;
          assign(gl_nodes, cons_list(index_uni(sym1__), nil_index_list()),
            gl_nodes_flat__[(pos__ - 1)], "assigning variable gl_nodes");
          current_statement__ = 127;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 128;
      validate_non_negative_index("gl_weights", "NK", NK);
      current_statement__ = 129;
      context__.validate_dims("data initialization","gl_weights","double",
          context__.to_vec(NK));
      gl_weights = Eigen::Matrix<double, -1, 1>(NK);
      stan::math::fill(gl_weights, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gl_weights_flat__;
        current_statement__ = 129;
        assign(gl_weights_flat__, nil_index_list(),
          context__.vals_r("gl_weights"),
          "assigning variable gl_weights_flat__");
        current_statement__ = 129;
        pos__ = 1;
        current_statement__ = 129;
        for (int sym1__ = 1; sym1__ <= NK; ++sym1__) {
          current_statement__ = 129;
          assign(gl_weights, cons_list(index_uni(sym1__), nil_index_list()),
            gl_weights_flat__[(pos__ - 1)], "assigning variable gl_weights");
          current_statement__ = 129;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 130;
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 131;
      validate_non_negative_index("NObs", "NG", NG);
      current_statement__ = 132;
      NObs = Eigen::Matrix<double, -1, 1>(NG);
      stan::math::fill(NObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 133;
      validate_non_negative_index("olC", "NF", NF);
      current_statement__ = 134;
      olC = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(olC, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 135;
      validate_non_negative_index("LMP", "NB", NB);
      current_statement__ = 136;
      LMP = Eigen::Matrix<double, -1, 1>(NB);
      stan::math::fill(LMP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 139;
      for (int gi = 1; gi <= NG; ++gi) {
        current_statement__ = 137;
        assign(NObs, cons_list(index_uni(gi), nil_index_list()),
          sum(fq[(gi - 1)]), "assigning variable NObs");}
      {
        current_statement__ = 147;
        if (logical_eq(NF, 1)) {
          current_statement__ = 145;
          assign(olC, cons_list(index_uni(1), nil_index_list()), 0,
            "assigning variable olC");
        } else {
          current_statement__ = 142;
          for (int gi = 1; gi <= NF; ++gi) {
            current_statement__ = 140;
            assign(olC, cons_list(index_uni(gi), nil_index_list()),
              stan::math::log(prop_catch[(gi - 1)]), "assigning variable olC");
          }
          current_statement__ = 143;
          assign(olC, nil_index_list(),
            subtract(stan::model::deep_copy(olC),
              stan::math::log(sum(prop_catch))), "assigning variable olC");
        }
      }
      current_statement__ = 149;
      eps = (0.001 / sum(NObs));
      current_statement__ = 151;
      for (int i = 1; i <= (NB - 1); ++i) {
        current_statement__ = 150;
        assign(LMP, cons_list(index_uni(i), nil_index_list()),
          (0.5 * (LLB[(i - 1)] + LLB[((i + 1) - 1)])),
          "assigning variable LMP");}
      current_statement__ = 152;
      assign(LMP, cons_list(index_uni(NB), nil_index_list()),
        (LLB[(NB - 1)] + (0.5 * (LLB[(NB - 1)] - LLB[((NB - 1) - 1)]))),
        "assigning variable LMP");
      current_statement__ = 153;
      validate_non_negative_index("nFk", "NF", NF);
      current_statement__ = 154;
      validate_non_negative_index("nSm", "NP", NP);
      current_statement__ = 155;
      validate_non_negative_index("Fk", "NF", NF);
      current_statement__ = 156;
      validate_non_negative_index("Sm", "NP", NP);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += NF;
      num_params_r__ += NP;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_BLICC_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ nLinf;
      nLinf = DUMMY_VAR__;
      
      current_statement__ = 1;
      nLinf = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs), lp__);
      } else {
        current_statement__ = 1;
        nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs));
      }
      local_scalar_t__ nGalpha;
      nGalpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      nGalpha = in__.scalar();
      local_scalar_t__ nMk;
      nMk = DUMMY_VAR__;
      
      current_statement__ = 3;
      nMk = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> nFk;
      nFk = Eigen::Matrix<local_scalar_t__, -1, 1>(NF);
      stan::math::fill(nFk, DUMMY_VAR__);
      
      current_statement__ = 4;
      nFk = in__.vector(NF);
      Eigen::Matrix<local_scalar_t__, -1, 1> nSm;
      nSm = Eigen::Matrix<local_scalar_t__, -1, 1>(NP);
      stan::math::fill(nSm, DUMMY_VAR__);
      
      current_statement__ = 5;
      nSm = in__.vector(NP);
      local_scalar_t__ nNB_phi;
      nNB_phi = DUMMY_VAR__;
      
      current_statement__ = 6;
      nNB_phi = in__.scalar();
      local_scalar_t__ Linf;
      Linf = DUMMY_VAR__;
      
      current_statement__ = 7;
      Linf = (poLinfm + (nLinf * poLinfs));
      local_scalar_t__ Galpha;
      Galpha = DUMMY_VAR__;
      
      current_statement__ = 8;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      local_scalar_t__ Mk;
      Mk = DUMMY_VAR__;
      
      current_statement__ = 9;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      Eigen::Matrix<local_scalar_t__, -1, 1> Fk;
      Fk = Eigen::Matrix<local_scalar_t__, -1, 1>(NF);
      stan::math::fill(Fk, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(Fk, nil_index_list(),
        stan::math::exp(add(polFkm, multiply(nFk, polFks))),
        "assigning variable Fk");
      Eigen::Matrix<local_scalar_t__, -1, 1> Sm;
      Sm = Eigen::Matrix<local_scalar_t__, -1, 1>(NP);
      stan::math::fill(Sm, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(Sm, nil_index_list(),
        stan::math::exp(add(polSm, elt_multiply(nSm, polSs))),
        "assigning variable Sm");
      local_scalar_t__ NB_phi;
      NB_phi = DUMMY_VAR__;
      
      current_statement__ = 12;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      local_scalar_t__ Gbeta;
      Gbeta = DUMMY_VAR__;
      
      current_statement__ = 13;
      Gbeta = (Galpha / Linf);
      {
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<false>(nLinf, 0, 1));
        current_statement__ = 39;
        lp_accum__.add(normal_lpdf<false>(nGalpha, 0, 1));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<false>(nMk, 0, 1));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<false>(nFk, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<false>(nSm, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<false>(nNB_phi, 0, 1));
        {
          current_statement__ = 44;
          validate_non_negative_index("efq", "NB", NB);
          Eigen::Matrix<local_scalar_t__, -1, 1> efq;
          efq = Eigen::Matrix<local_scalar_t__, -1, 1>(NB);
          stan::math::fill(efq, DUMMY_VAR__);
          
          local_scalar_t__ Total_Catch;
          Total_Catch = DUMMY_VAR__;
          
          current_statement__ = 46;
          Total_Catch = 0;
          current_statement__ = 47;
          validate_non_negative_index("elC", "NF", NF);
          Eigen::Matrix<local_scalar_t__, -1, 1> elC;
          elC = Eigen::Matrix<local_scalar_t__, -1, 1>(NF);
          stan::math::fill(elC, DUMMY_VAR__);
          
          local_scalar_t__ eC_sum;
          eC_sum = DUMMY_VAR__;
          
          current_statement__ = 50;
          validate_non_negative_index("eC", "NB", NB);
          Eigen::Matrix<local_scalar_t__, -1, 1> eC;
          eC = Eigen::Matrix<local_scalar_t__, -1, 1>(NB);
          stan::math::fill(eC, DUMMY_VAR__);
          
          current_statement__ = 52;
          validate_non_negative_index("Fki", "NG", NG);
          current_statement__ = 53;
          validate_non_negative_index("Fki", "NB", NB);
          std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> Fki;
          Fki = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(NG, Eigen::Matrix<local_scalar_t__, -1, 1>(NB));
          stan::math::fill(Fki, DUMMY_VAR__);
          
          current_statement__ = 55;
          validate_non_negative_index("Zki", "NB", NB);
          Eigen::Matrix<local_scalar_t__, -1, 1> Zki;
          Zki = Eigen::Matrix<local_scalar_t__, -1, 1>(NB);
          stan::math::fill(Zki, DUMMY_VAR__);
          
          current_statement__ = 56;
          assign(Zki, nil_index_list(), multiply(Mk, M_L),
            "assigning variable Zki");
          current_statement__ = 57;
          validate_non_negative_index("Pop", "NB", NB);
          Eigen::Matrix<local_scalar_t__, -1, 1> Pop;
          Pop = Eigen::Matrix<local_scalar_t__, -1, 1>(NB);
          stan::math::fill(Pop, DUMMY_VAR__);
          
          current_statement__ = 73;
          for (int gi = 1; gi <= NG; ++gi) {
            current_statement__ = 67;
            if (logical_eq(fSel[(gi - 1)], 1)) {
              current_statement__ = 66;
              assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                sel_logistic(LMP, segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                "assigning variable Fki");
            } else {
              current_statement__ = 65;
              if (logical_eq(fSel[(gi - 1)], 2)) {
                current_statement__ = 64;
                assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                  sel_normal(LMP, segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                  "assigning variable Fki");
              } else {
                current_statement__ = 63;
                if (logical_eq(fSel[(gi - 1)], 3)) {
                  current_statement__ = 62;
                  assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                    sel_ssnormal(LMP,
                      segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                    "assigning variable Fki");
                } else {
                  current_statement__ = 61;
                  if (logical_eq(fSel[(gi - 1)], 4)) {
                    current_statement__ = 60;
                    assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                      sel_dsnormal(LMP,
                        segment(Sm, sp_i[(gi - 1)], 3), pstream__),
                      "assigning variable Fki");
                  } else {
                    current_statement__ = 59;
                    assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                      sel_dsnmix(LMP,
                        segment(Sm, sp_i[(gi - 1)], 7), pstream__),
                      "assigning variable Fki");
                  }
                }
              }
            }
            current_statement__ = 71;
            if (logical_gt(Fkg[(gi - 1)], 0)) {
              current_statement__ = 68;
              assign(Fki, cons_list(index_uni(gi), nil_index_list()),
                multiply(stan::model::deep_copy(Fki[(gi - 1)]),
                  Fk[(Fkg[(gi - 1)] - 1)]), "assigning variable Fki");
              current_statement__ = 69;
              assign(Zki, nil_index_list(),
                add(stan::model::deep_copy(Zki), Fki[(gi - 1)]),
                "assigning variable Zki");
            } }
          current_statement__ = 74;
          assign(Pop, nil_index_list(),
            Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha, Gbeta, pstream__),
            "assigning variable Pop");
          current_statement__ = 84;
          for (int gi = 1; gi <= NG; ++gi) {
            current_statement__ = 75;
            assign(eC, nil_index_list(), elt_multiply(Fki[(gi - 1)], Pop),
              "assigning variable eC");
            current_statement__ = 76;
            eC_sum = sum(eC);
            current_statement__ = 77;
            assign(efq, nil_index_list(),
              add(divide(multiply(eC, NObs[(gi - 1)]), eC_sum), eps),
              "assigning variable efq");
            current_statement__ = 78;
            lp_accum__.add(
              neg_binomial_2_lpmf<false>(fq[(gi - 1)], efq, NB_phi));
            current_statement__ = 82;
            if (logical_gt(Fkg[(gi - 1)], 0)) {
              current_statement__ = 79;
              Total_Catch = (Total_Catch + eC_sum);
              current_statement__ = 80;
              assign(elC,
                cons_list(index_uni(Fkg[(gi - 1)]), nil_index_list()),
                stan::math::log(eC_sum), "assigning variable elC");
            } }
          current_statement__ = 85;
          assign(elC, nil_index_list(),
            subtract(stan::model::deep_copy(elC),
              stan::math::log(Total_Catch)), "assigning variable elC");
          current_statement__ = 86;
          lp_accum__.add(normal_lpdf<false>(olC, elC, polCs));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_BLICC_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double nLinf;
      nLinf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf = in__.scalar();
      current_statement__ = 1;
      nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs));
      double nGalpha;
      nGalpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nGalpha = in__.scalar();
      double nMk;
      nMk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      nMk = in__.scalar();
      Eigen::Matrix<double, -1, 1> nFk;
      nFk = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(nFk, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      nFk = in__.vector(NF);
      Eigen::Matrix<double, -1, 1> nSm;
      nSm = Eigen::Matrix<double, -1, 1>(NP);
      stan::math::fill(nSm, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      nSm = in__.vector(NP);
      double nNB_phi;
      nNB_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      nNB_phi = in__.scalar();
      double Linf;
      Linf = std::numeric_limits<double>::quiet_NaN();
      
      double Galpha;
      Galpha = std::numeric_limits<double>::quiet_NaN();
      
      double Mk;
      Mk = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> Fk;
      Fk = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(Fk, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Sm;
      Sm = Eigen::Matrix<double, -1, 1>(NP);
      stan::math::fill(Sm, std::numeric_limits<double>::quiet_NaN());
      
      double NB_phi;
      NB_phi = std::numeric_limits<double>::quiet_NaN();
      
      double Gbeta;
      Gbeta = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(nLinf);
      vars__.emplace_back(nGalpha);
      vars__.emplace_back(nMk);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        vars__.emplace_back(nFk[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
        vars__.emplace_back(nSm[(sym1__ - 1)]);}
      vars__.emplace_back(nNB_phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      Linf = (poLinfm + (nLinf * poLinfs));
      current_statement__ = 8;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      current_statement__ = 9;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      current_statement__ = 10;
      assign(Fk, nil_index_list(),
        stan::math::exp(add(polFkm, multiply(nFk, polFks))),
        "assigning variable Fk");
      current_statement__ = 11;
      assign(Sm, nil_index_list(),
        stan::math::exp(add(polSm, elt_multiply(nSm, polSs))),
        "assigning variable Sm");
      current_statement__ = 12;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      current_statement__ = 13;
      Gbeta = (Galpha / Linf);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(Linf);
        vars__.emplace_back(Galpha);
        vars__.emplace_back(Mk);
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          vars__.emplace_back(Fk[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
          vars__.emplace_back(Sm[(sym1__ - 1)]);}
        vars__.emplace_back(NB_phi);
        vars__.emplace_back(Gbeta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double SPR;
      SPR = std::numeric_limits<double>::quiet_NaN();
      
      {
        double SPR0;
        SPR0 = std::numeric_limits<double>::quiet_NaN();
        
        double SPRF;
        SPRF = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 17;
        validate_non_negative_index("Zki", "NB", NB);
        Eigen::Matrix<double, -1, 1> Zki;
        Zki = Eigen::Matrix<double, -1, 1>(NB);
        stan::math::fill(Zki, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 18;
        assign(Zki, nil_index_list(), multiply(Mk, M_L),
          "assigning variable Zki");
        current_statement__ = 19;
        validate_non_negative_index("Sv", "NB", NB);
        Eigen::Matrix<double, -1, 1> Sv;
        Sv = Eigen::Matrix<double, -1, 1>(NB);
        stan::math::fill(Sv, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 21;
        SPR0 = multiply(ma_L,
                 Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha,
                   Gbeta, pstream__));
        current_statement__ = 34;
        for (int gi = 1; gi <= NG; ++gi) {
          current_statement__ = 32;
          if (logical_gt(Fkg[(gi - 1)], 0)) {
            current_statement__ = 30;
            if (logical_eq(fSel[(gi - 1)], 1)) {
              current_statement__ = 29;
              assign(Zki, nil_index_list(),
                add(stan::model::deep_copy(Zki),
                  multiply(
                    sel_logistic(LMP,
                      segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                    Fk[(Fkg[(gi - 1)] - 1)])), "assigning variable Zki");
            } else {
              current_statement__ = 28;
              if (logical_eq(fSel[(gi - 1)], 2)) {
                current_statement__ = 27;
                assign(Zki, nil_index_list(),
                  add(stan::model::deep_copy(Zki),
                    multiply(
                      sel_normal(LMP,
                        segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                      Fk[(Fkg[(gi - 1)] - 1)])), "assigning variable Zki");
              } else {
                current_statement__ = 26;
                if (logical_eq(fSel[(gi - 1)], 3)) {
                  current_statement__ = 25;
                  assign(Zki, nil_index_list(),
                    add(stan::model::deep_copy(Zki),
                      multiply(
                        sel_ssnormal(LMP,
                          segment(Sm, sp_i[(gi - 1)], 2), pstream__),
                        Fk[(Fkg[(gi - 1)] - 1)])), "assigning variable Zki");
                } else {
                  current_statement__ = 24;
                  if (logical_eq(fSel[(gi - 1)], 4)) {
                    current_statement__ = 23;
                    assign(Zki, nil_index_list(),
                      add(stan::model::deep_copy(Zki),
                        multiply(
                          sel_dsnormal(LMP,
                            segment(Sm, sp_i[(gi - 1)], 3), pstream__),
                          Fk[(Fkg[(gi - 1)] - 1)])), "assigning variable Zki");
                  } else {
                    current_statement__ = 22;
                    assign(Zki, nil_index_list(),
                      add(stan::model::deep_copy(Zki),
                        multiply(
                          sel_dsnmix(LMP,
                            segment(Sm, sp_i[(gi - 1)], 7), pstream__),
                          Fk[(Fkg[(gi - 1)] - 1)])), "assigning variable Zki");
                  }
                }
              }
            }
          } }
        current_statement__ = 35;
        SPRF = multiply(ma_L,
                 Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha,
                   Gbeta, pstream__));
        current_statement__ = 36;
        SPR = (SPRF / SPR0);
      }
      vars__.emplace_back(SPR);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double nLinf;
      nLinf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf = context__.vals_r("nLinf")[(1 - 1)];
      double nLinf_free__;
      nLinf_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf_free__ = stan::math::lb_free(nLinf, (-poLinfm / poLinfs));
      double nGalpha;
      nGalpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nGalpha = context__.vals_r("nGalpha")[(1 - 1)];
      double nMk;
      nMk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      nMk = context__.vals_r("nMk")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> nFk;
      nFk = Eigen::Matrix<double, -1, 1>(NF);
      stan::math::fill(nFk, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nFk_flat__;
        current_statement__ = 4;
        assign(nFk_flat__, nil_index_list(), context__.vals_r("nFk"),
          "assigning variable nFk_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 4;
          assign(nFk, cons_list(index_uni(sym1__), nil_index_list()),
            nFk_flat__[(pos__ - 1)], "assigning variable nFk");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nSm;
      nSm = Eigen::Matrix<double, -1, 1>(NP);
      stan::math::fill(nSm, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nSm_flat__;
        current_statement__ = 5;
        assign(nSm_flat__, nil_index_list(), context__.vals_r("nSm"),
          "assigning variable nSm_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
          current_statement__ = 5;
          assign(nSm, cons_list(index_uni(sym1__), nil_index_list()),
            nSm_flat__[(pos__ - 1)], "assigning variable nSm");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      double nNB_phi;
      nNB_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      nNB_phi = context__.vals_r("nNB_phi")[(1 - 1)];
      vars__.emplace_back(nLinf_free__);
      vars__.emplace_back(nGalpha);
      vars__.emplace_back(nMk);
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        vars__.emplace_back(nFk[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
        vars__.emplace_back(nSm[(sym1__ - 1)]);}
      vars__.emplace_back(nNB_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("nLinf");
    names__.emplace_back("nGalpha");
    names__.emplace_back("nMk");
    names__.emplace_back("nFk");
    names__.emplace_back("nSm");
    names__.emplace_back("nNB_phi");
    names__.emplace_back("Linf");
    names__.emplace_back("Galpha");
    names__.emplace_back("Mk");
    names__.emplace_back("Fk");
    names__.emplace_back("Sm");
    names__.emplace_back("NB_phi");
    names__.emplace_back("Gbeta");
    names__.emplace_back("SPR");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NF)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NP)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NF)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NP)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nFk" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nSm" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Fk" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Sm" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nFk" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nSm" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Fk" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Sm" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"vector\",\"length\":" << NF << "},\"block\":\"parameters\"},{\"name\":\"nSm\",\"type\":{\"name\":\"vector\",\"length\":" << NP << "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"vector\",\"length\":" << NF << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sm\",\"type\":{\"name\":\"vector\",\"length\":" << NP << "},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"vector\",\"length\":" << NF << "},\"block\":\"parameters\"},{\"name\":\"nSm\",\"type\":{\"name\":\"vector\",\"length\":" << NP << "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"vector\",\"length\":" << NF << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sm\",\"type\":{\"name\":\"vector\",\"length\":" << NP << "},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_BLICC_namespace::model_BLICC;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_BLICC_namespace::profiles__;
}
#endif
#endif
