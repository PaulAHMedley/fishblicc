// Generated by rstantools.  Do not edit by hand.

/*
    fishblicc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishblicc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishblicc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_BLICC_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 275> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 189, column 2 to column 40)",
  " (in 'string', line 190, column 2 to column 42)",
  " (in 'string', line 191, column 2 to column 38)",
  " (in 'string', line 192, column 2 to column 38)",
  " (in 'string', line 193, column 2 to column 38)",
  " (in 'string', line 194, column 2 to column 42)",
  " (in 'string', line 197, column 2 to column 38)",
  " (in 'string', line 198, column 2 to column 45)",
  " (in 'string', line 199, column 2 to column 37)",
  " (in 'string', line 200, column 2 to column 45)",
  " (in 'string', line 201, column 2 to column 47)",
  " (in 'string', line 202, column 2 to column 53)",
  " (in 'string', line 203, column 2 to column 29)",
  " (in 'string', line 274, column 2 to column 11)",
  " (in 'string', line 279, column 4 to column 14)",
  " (in 'string', line 280, column 4 to column 14)",
  " (in 'string', line 281, column 20 to column 22)",
  " (in 'string', line 281, column 11 to column 13)",
  " (in 'string', line 281, column 4 to column 24)",
  " (in 'string', line 282, column 11 to column 13)",
  " (in 'string', line 282, column 4 to column 30)",
  " (in 'string', line 283, column 11 to column 13)",
  " (in 'string', line 283, column 4 to column 18)",
  " (in 'string', line 285, column 4 to column 71)",
  " (in 'string', line 295, column 8 to column 63)",
  " (in 'string', line 294, column 11 to line 295, column 63)",
  " (in 'string', line 293, column 8 to column 63)",
  " (in 'string', line 292, column 11 to line 295, column 63)",
  " (in 'string', line 291, column 8 to column 61)",
  " (in 'string', line 290, column 11 to line 295, column 63)",
  " (in 'string', line 289, column 8 to column 63)",
  " (in 'string', line 288, column 6 to line 295, column 63)",
  " (in 'string', line 287, column 21 to line 296, column 5)",
  " (in 'string', line 287, column 4 to line 296, column 5)",
  " (in 'string', line 299, column 8 to column 46)",
  " (in 'string', line 301, column 10 to column 32)",
  " (in 'string', line 303, column 12 to column 60)",
  " (in 'string', line 302, column 10 to line 303, column 60)",
  " (in 'string', line 300, column 29 to line 304, column 9)",
  " (in 'string', line 300, column 8 to line 304, column 9)",
  " (in 'string', line 298, column 23 to line 305, column 7)",
  " (in 'string', line 298, column 6 to line 305, column 7)",
  " (in 'string', line 297, column 21 to line 306, column 5)",
  " (in 'string', line 297, column 4 to line 306, column 5)",
  " (in 'string', line 308, column 4 to column 71)",
  " (in 'string', line 310, column 4 to column 20)",
  " (in 'string', line 278, column 2 to line 311, column 3)",
  " (in 'string', line 212, column 2 to column 36)",
  " (in 'string', line 213, column 2 to column 38)",
  " (in 'string', line 214, column 2 to column 34)",
  " (in 'string', line 215, column 2 to column 34)",
  " (in 'string', line 216, column 2 to column 34)",
  " (in 'string', line 217, column 2 to column 38)",
  " (in 'string', line 223, column 11 to column 13)",
  " (in 'string', line 223, column 4 to column 19)",
  " (in 'string', line 224, column 4 to column 31)",
  " (in 'string', line 225, column 11 to column 13)",
  " (in 'string', line 225, column 4 to column 19)",
  " (in 'string', line 226, column 4 to column 22)",
  " (in 'string', line 227, column 11 to column 13)",
  " (in 'string', line 227, column 4 to column 18)",
  " (in 'string', line 228, column 20 to column 22)",
  " (in 'string', line 228, column 11 to column 13)",
  " (in 'string', line 228, column 4 to column 24)",
  " (in 'string', line 229, column 19 to column 21)",
  " (in 'string', line 229, column 11 to column 13)",
  " (in 'string', line 229, column 4 to column 23)",
  " (in 'string', line 230, column 11 to column 13)",
  " (in 'string', line 230, column 4 to column 30)",
  " (in 'string', line 231, column 11 to column 13)",
  " (in 'string', line 231, column 4 to column 19)",
  " (in 'string', line 240, column 8 to column 63)",
  " (in 'string', line 239, column 11 to line 240, column 63)",
  " (in 'string', line 238, column 8 to column 63)",
  " (in 'string', line 237, column 11 to line 240, column 63)",
  " (in 'string', line 236, column 8 to column 61)",
  " (in 'string', line 235, column 11 to line 240, column 63)",
  " (in 'string', line 234, column 8 to column 63)",
  " (in 'string', line 233, column 6 to line 240, column 63)",
  " (in 'string', line 232, column 21 to line 241, column 5)",
  " (in 'string', line 232, column 4 to line 241, column 5)",
  " (in 'string', line 243, column 6 to column 33)",
  " (in 'string', line 245, column 8 to column 30)",
  " (in 'string', line 247, column 10 to column 48)",
  " (in 'string', line 246, column 8 to line 247, column 48)",
  " (in 'string', line 244, column 27 to line 248, column 7)",
  " (in 'string', line 244, column 6 to line 248, column 7)",
  " (in 'string', line 250, column 8 to column 31)",
  " (in 'string', line 251, column 8 to column 23)",
  " (in 'string', line 249, column 23 to line 252, column 7)",
  " (in 'string', line 249, column 6 to line 252, column 7)",
  " (in 'string', line 242, column 21 to line 253, column 5)",
  " (in 'string', line 242, column 4 to line 253, column 5)",
  " (in 'string', line 255, column 4 to column 63)",
  " (in 'string', line 260, column 6 to column 26)",
  " (in 'string', line 261, column 6 to column 23)",
  " (in 'string', line 262, column 6 to column 39)",
  " (in 'string', line 263, column 6 to column 59)",
  " (in 'string', line 265, column 8 to column 30)",
  " (in 'string', line 266, column 8 to column 35)",
  " (in 'string', line 264, column 23 to line 267, column 7)",
  " (in 'string', line 264, column 6 to line 267, column 7)",
  " (in 'string', line 259, column 21 to line 268, column 5)",
  " (in 'string', line 259, column 4 to line 268, column 5)",
  " (in 'string', line 269, column 4 to column 28)",
  " (in 'string', line 270, column 4 to column 45)",
  " (in 'string', line 221, column 2 to line 271, column 3)",
  " (in 'string', line 110, column 2 to column 29)",
  " (in 'string', line 111, column 2 to column 29)",
  " (in 'string', line 112, column 2 to column 29)",
  " (in 'string', line 113, column 2 to column 29)",
  " (in 'string', line 114, column 2 to column 29)",
  " (in 'string', line 115, column 2 to column 29)",
  " (in 'string', line 116, column 9 to column 11)",
  " (in 'string', line 116, column 2 to column 30)",
  " (in 'string', line 117, column 29 to column 31)",
  " (in 'string', line 117, column 33 to column 35)",
  " (in 'string', line 117, column 2 to column 37)",
  " (in 'string', line 118, column 9 to column 11)",
  " (in 'string', line 118, column 2 to column 37)",
  " (in 'string', line 119, column 30 to column 32)",
  " (in 'string', line 119, column 2 to column 34)",
  " (in 'string', line 120, column 31 to column 33)",
  " (in 'string', line 120, column 2 to column 35)",
  " (in 'string', line 121, column 31 to column 33)",
  " (in 'string', line 121, column 2 to column 35)",
  " (in 'string', line 122, column 33 to column 35)",
  " (in 'string', line 122, column 2 to column 37)",
  " (in 'string', line 123, column 33 to column 37)",
  " (in 'string', line 123, column 2 to column 39)",
  " (in 'string', line 124, column 33 to column 35)",
  " (in 'string', line 124, column 2 to column 37)",
  " (in 'string', line 125, column 13 to column 15)",
  " (in 'string', line 125, column 2 to column 31)",
  " (in 'string', line 128, column 2 to column 26)",
  " (in 'string', line 129, column 2 to column 26)",
  " (in 'string', line 130, column 2 to column 25)",
  " (in 'string', line 131, column 2 to column 25)",
  " (in 'string', line 132, column 9 to column 11)",
  " (in 'string', line 132, column 2 to column 22)",
  " (in 'string', line 133, column 2 to column 25)",
  " (in 'string', line 134, column 2 to column 25)",
  " (in 'string', line 135, column 9 to column 11)",
  " (in 'string', line 135, column 2 to column 25)",
  " (in 'string', line 136, column 2 to column 25)",
  " (in 'string', line 137, column 9 to column 14)",
  " (in 'string', line 137, column 2 to column 24)",
  " (in 'string', line 138, column 9 to column 14)",
  " (in 'string', line 138, column 2 to column 24)",
  " (in 'string', line 139, column 2 to column 29)",
  " (in 'string', line 140, column 2 to column 29)",
  " (in 'string', line 141, column 2 to column 24)",
  " (in 'string', line 142, column 2 to column 21)",
  " (in 'string', line 143, column 9 to column 11)",
  " (in 'string', line 143, column 2 to column 27)",
  " (in 'string', line 144, column 9 to column 11)",
  " (in 'string', line 144, column 2 to column 29)",
  " (in 'string', line 147, column 2 to column 20)",
  " (in 'string', line 148, column 9 to column 11)",
  " (in 'string', line 148, column 2 to column 21)",
  " (in 'string', line 149, column 9 to column 11)",
  " (in 'string', line 149, column 2 to column 20)",
  " (in 'string', line 150, column 9 to column 11)",
  " (in 'string', line 150, column 2 to column 20)",
  " (in 'string', line 151, column 8 to column 10)",
  " (in 'string', line 151, column 2 to column 23)",
  " (in 'string', line 153, column 4 to column 27)",
  " (in 'string', line 152, column 2 to line 153, column 27)",
  " (in 'string', line 155, column 4 to column 17)",
  " (in 'string', line 160, column 8 to column 28)",
  " (in 'string', line 161, column 8 to column 32)",
  " (in 'string', line 163, column 10 to column 48)",
  " (in 'string', line 162, column 8 to line 163, column 48)",
  " (in 'string', line 159, column 23 to line 164, column 7)",
  " (in 'string', line 159, column 6 to line 164, column 7)",
  " (in 'string', line 158, column 11 to line 165, column 5)",
  " (in 'string', line 157, column 6 to column 32)",
  " (in 'string', line 156, column 17 to line 158, column 5)",
  " (in 'string', line 156, column 4 to line 165, column 5)",
  " (in 'string', line 167, column 6 to column 86)",
  " (in 'string', line 166, column 4 to line 167, column 86)",
  " (in 'string', line 154, column 2 to line 168, column 3)",
  " (in 'string', line 174, column 8 to column 38)",
  " (in 'string', line 173, column 23 to line 175, column 9)",
  " (in 'string', line 173, column 6 to line 175, column 9)",
  " (in 'string', line 176, column 6 to column 34)",
  " (in 'string', line 172, column 11 to line 177, column 5)",
  " (in 'string', line 171, column 6 to column 17)",
  " (in 'string', line 170, column 15 to line 172, column 5)",
  " (in 'string', line 170, column 4 to line 177, column 5)",
  " (in 'string', line 169, column 2 to line 178, column 3)",
  " (in 'string', line 179, column 2 to column 24)",
  " (in 'string', line 182, column 4 to column 37)",
  " (in 'string', line 181, column 2 to line 182, column 37)",
  " (in 'string', line 183, column 2 to column 48)",
  " (in 'string', line 192, column 9 to column 11)",
  " (in 'string', line 193, column 9 to column 14)",
  " (in 'string', line 200, column 9 to column 11)",
  " (in 'string', line 201, column 9 to column 14)",
  " (in 'string', line 24, column 2 to column 21)",
  " (in 'string', line 25, column 9 to column 11)",
  " (in 'string', line 25, column 2 to column 54)",
  " (in 'string', line 26, column 2 to column 13)",
  " (in 'string', line 21, column 44 to line 27, column 1)",
  " (in 'string', line 32, column 2 to column 21)",
  " (in 'string', line 33, column 9 to column 11)",
  " (in 'string', line 33, column 2 to column 55)",
  " (in 'string', line 34, column 2 to column 13)",
  " (in 'string', line 29, column 42 to line 35, column 1)",
  " (in 'string', line 40, column 2 to column 21)",
  " (in 'string', line 41, column 2 to column 13)",
  " (in 'string', line 42, column 9 to column 11)",
  " (in 'string', line 42, column 2 to column 17)",
  " (in 'string', line 44, column 4 to column 12)",
  " (in 'string', line 43, column 2 to line 44, column 12)",
  " (in 'string', line 48, column 4 to column 30)",
  " (in 'string', line 50, column 6 to column 14)",
  " (in 'string', line 51, column 6 to column 60)",
  " (in 'string', line 49, column 16 to line 52, column 5)",
  " (in 'string', line 49, column 4 to line 52, column 5)",
  " (in 'string', line 47, column 7 to line 53, column 3)",
  " (in 'string', line 46, column 4 to column 46)",
  " (in 'string', line 45, column 2 to line 53, column 3)",
  " (in 'string', line 54, column 2 to column 13)",
  " (in 'string', line 37, column 44 to line 55, column 1)",
  " (in 'string', line 60, column 2 to column 21)",
  " (in 'string', line 61, column 9 to column 11)",
  " (in 'string', line 61, column 2 to column 17)",
  " (in 'string', line 62, column 9 to column 11)",
  " (in 'string', line 62, column 2 to column 18)",
  " (in 'string', line 65, column 48 to column 65)",
  " (in 'string', line 65, column 25 to column 42)",
  " (in 'string', line 65, column 4 to column 65)",
  " (in 'string', line 64, column 2 to line 65, column 65)",
  " (in 'string', line 66, column 2 to column 43)",
  " (in 'string', line 67, column 2 to column 13)",
  " (in 'string', line 57, column 44 to line 68, column 1)",
  " (in 'string', line 74, column 2 to column 32)",
  " (in 'string', line 75, column 2 to column 36)",
  " (in 'string', line 76, column 2 to column 42)",
  " (in 'string', line 77, column 9 to column 11)",
  " (in 'string', line 77, column 2 to column 41)",
  " (in 'string', line 78, column 9 to column 11)",
  " (in 'string', line 78, column 2 to column 42)",
  " (in 'string', line 79, column 9 to column 13)",
  " (in 'string', line 79, column 2 to column 74)",
  " (in 'string', line 80, column 9 to column 11)",
  " (in 'string', line 80, column 2 to column 22)",
  " (in 'string', line 81, column 9 to column 11)",
  " (in 'string', line 81, column 2 to column 21)",
  " (in 'string', line 82, column 13 to column 15)",
  " (in 'string', line 82, column 2 to column 20)",
  " (in 'string', line 83, column 2 to column 76)",
  " (in 'string', line 84, column 2 to column 28)",
  " (in 'string', line 85, column 2 to line 86, column 73)",
  " (in 'string', line 87, column 2 to column 28)",
  " (in 'string', line 90, column 11 to column 14)",
  " (in 'string', line 90, column 4 to column 38)",
  " (in 'string', line 91, column 11 to column 14)",
  " (in 'string', line 91, column 4 to column 35)",
  " (in 'string', line 92, column 15 to column 17)",
  " (in 'string', line 92, column 4 to column 88)",
  " (in 'string', line 93, column 4 to column 37)",
  " (in 'string', line 94, column 15 to column 17)",
  " (in 'string', line 94, column 4 to column 22)",
  " (in 'string', line 96, column 6 to column 59)",
  " (in 'string', line 95, column 4 to line 96, column 59)",
  " (in 'string', line 97, column 4 to column 23)",
  " (in 'string', line 98, column 4 to column 30)",
  " (in 'string', line 89, column 18 to line 99, column 3)",
  " (in 'string', line 89, column 2 to line 99, column 3)",
  " (in 'string', line 100, column 2 to column 65)",
  " (in 'string', line 101, column 2 to column 13)",
  " (in 'string', line 70, column 90 to line 102, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_logistic(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_normal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
           pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_ssnormal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_dsnormal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::promote_args_t<T5__>>,-1,1>
Pop_L(const T0__& gl_node_arg__, const T1__& gl_wt_arg__, const T2__&
      Len_arg__, const T3__& Zki_arg__, const T4__& alpha, const T5__& beta,
      std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_logistic(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& LMP = stan::math::to_ref(LMP_arg__);
  const auto& par = stan::math::to_ref(par_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nl = std::numeric_limits<int>::min();
    current_statement__ = 200;
    nl = stan::math::rows(LMP);
    current_statement__ = 201;
    stan::math::validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> Sel =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 202;
    stan::model::assign(Sel,
      stan::math::inv_logit(
        stan::math::multiply(
          stan::model::rvalue(par, "par", stan::model::index_uni(2)),
          stan::math::subtract(LMP,
            stan::model::rvalue(par, "par", stan::model::index_uni(1))))),
      "assigning variable Sel");
    current_statement__ = 203;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_normal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& LMP = stan::math::to_ref(LMP_arg__);
  const auto& par = stan::math::to_ref(par_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nl = std::numeric_limits<int>::min();
    current_statement__ = 205;
    nl = stan::math::rows(LMP);
    current_statement__ = 206;
    stan::math::validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> Sel =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 207;
    stan::model::assign(Sel,
      stan::math::exp(
        stan::math::multiply(
          -stan::model::rvalue(par, "par", stan::model::index_uni(2)),
          stan::math::square(
            stan::math::subtract(LMP,
              stan::model::rvalue(par, "par", stan::model::index_uni(1)))))),
      "assigning variable Sel");
    current_statement__ = 208;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_ssnormal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& LMP = stan::math::to_ref(LMP_arg__);
  const auto& par = stan::math::to_ref(par_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nl = std::numeric_limits<int>::min();
    current_statement__ = 210;
    nl = stan::math::rows(LMP);
    int nv = std::numeric_limits<int>::min();
    current_statement__ = 211;
    nv = 1;
    current_statement__ = 212;
    stan::math::validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> Sel =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 215;
    while (stan::math::logical_lt(
             stan::model::rvalue(LMP, "LMP", stan::model::index_uni(nv)),
             stan::model::rvalue(par, "par", stan::model::index_uni(1)))) {
      current_statement__ = 214;
      nv = (nv + 1);
    }
    current_statement__ = 223;
    if (stan::math::logical_gte(nv, nl)) {
      current_statement__ = 222;
      stan::model::assign(Sel,
        stan::math::exp(
          stan::math::multiply(
            -stan::model::rvalue(par, "par", stan::model::index_uni(2)),
            stan::math::square(
              stan::math::subtract(LMP,
                stan::model::rvalue(par, "par", stan::model::index_uni(1)))))),
        "assigning variable Sel");
    } else {
      current_statement__ = 216;
      stan::model::assign(Sel, stan::math::rep_vector(1.0, nl),
        "assigning variable Sel");
      current_statement__ = 220;
      if (stan::math::logical_gt(nv, 1)) {
        current_statement__ = 217;
        nv = (nv - 1);
        current_statement__ = 218;
        stan::model::assign(Sel,
          stan::math::exp(
            stan::math::multiply(
              -stan::model::rvalue(par, "par", stan::model::index_uni(2)),
              stan::math::square(
                stan::math::subtract(
                  stan::model::rvalue(LMP, "LMP",
                    stan::model::index_min_max(1, nv)),
                  stan::model::rvalue(par, "par", stan::model::index_uni(1)))))),
          "assigning variable Sel", stan::model::index_min_max(1, nv));
      }
    }
    current_statement__ = 224;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
sel_dsnormal(const T0__& LMP_arg__, const T1__& par_arg__, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& LMP = stan::math::to_ref(LMP_arg__);
  const auto& par = stan::math::to_ref(par_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nl = std::numeric_limits<int>::min();
    current_statement__ = 226;
    nl = stan::math::rows(LMP);
    current_statement__ = 227;
    stan::math::validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> Sel =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 229;
    stan::math::validate_non_negative_index("pars", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> pars =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 234;
    for (int i = 1; i <= nl; ++i) {
      current_statement__ = 233;
      if (stan::math::logical_lt(
            stan::model::rvalue(LMP, "LMP", stan::model::index_uni(i)),
            stan::model::rvalue(par, "par", stan::model::index_uni(1)))) {
        current_statement__ = 232;
        stan::model::assign(pars,
          stan::model::rvalue(par, "par", stan::model::index_uni(2)),
          "assigning variable pars", stan::model::index_uni(i));
      } else {
        current_statement__ = 231;
        stan::model::assign(pars,
          stan::model::rvalue(par, "par", stan::model::index_uni(3)),
          "assigning variable pars", stan::model::index_uni(i));
      }
    }
    current_statement__ = 235;
    stan::model::assign(Sel,
      stan::math::exp(
        stan::math::elt_multiply(stan::math::minus(pars),
          stan::math::square(
            stan::math::subtract(LMP,
              stan::model::rvalue(par, "par", stan::model::index_uni(1)))))),
      "assigning variable Sel");
    current_statement__ = 236;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::promote_args_t<T5__>>,-1,1>
Pop_L(const T0__& gl_node_arg__, const T1__& gl_wt_arg__, const T2__&
      Len_arg__, const T3__& Zki_arg__, const T4__& alpha, const T5__& beta,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  const auto& gl_node = stan::math::to_ref(gl_node_arg__);
  const auto& gl_wt = stan::math::to_ref(gl_wt_arg__);
  const auto& Len = stan::math::to_ref(Len_arg__);
  const auto& Zki = stan::math::to_ref(Zki_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nl = std::numeric_limits<int>::min();
    current_statement__ = 238;
    nl = stan::math::rows(Len);
    int nv = std::numeric_limits<int>::min();
    current_statement__ = 239;
    nv = stan::math::rows(gl_node);
    local_scalar_t__ lg_alpha = DUMMY_VAR__;
    current_statement__ = 240;
    lg_alpha = stan::math::lgamma(alpha);
    current_statement__ = 241;
    stan::math::validate_non_negative_index("x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__,-1,1> x_beta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nv, DUMMY_VAR__);
    current_statement__ = 242;
    stan::model::assign(x_beta, stan::math::divide(gl_node, beta),
      "assigning variable x_beta");
    current_statement__ = 243;
    stan::math::validate_non_negative_index("log_x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__,-1,1> log_x_beta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nv, DUMMY_VAR__);
    current_statement__ = 244;
    stan::model::assign(log_x_beta, stan::math::log(x_beta),
      "assigning variable log_x_beta");
    current_statement__ = 245;
    stan::math::validate_non_negative_index("Zin", "nl - 1", (nl - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> Zin =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nl - 1), DUMMY_VAR__);
    current_statement__ = 246;
    stan::model::assign(Zin,
      stan::math::append_row(
        -stan::model::rvalue(Zki, "Zki", stan::model::index_uni(1)),
        stan::math::subtract(
          stan::model::rvalue(Zki, "Zki",
            stan::model::index_min_max(1, (nl - 2))),
          stan::model::rvalue(Zki, "Zki",
            stan::model::index_min_max(2, (nl - 1))))),
      "assigning variable Zin");
    current_statement__ = 247;
    stan::math::validate_non_negative_index("surv", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> surv =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 249;
    stan::math::validate_non_negative_index("pop", "nl", nl);
    Eigen::Matrix<local_scalar_t__,-1,1> pop =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nl, DUMMY_VAR__);
    current_statement__ = 251;
    stan::math::validate_non_negative_index("ss", "nv", nv);
    Eigen::Matrix<local_scalar_t__,1,-1> ss =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(nv, DUMMY_VAR__);
    current_statement__ = 253;
    stan::model::assign(ss,
      stan::math::transpose(
        stan::math::subtract(
          stan::math::subtract(
            stan::math::multiply(
              stan::math::log(
                stan::math::add(gl_node, (beta *
                  stan::model::rvalue(Len, "Len", stan::model::index_uni(1))))),
              (alpha - 1.0)), (beta *
            stan::model::rvalue(Len, "Len", stan::model::index_uni(1)))),
          lg_alpha)), "assigning variable ss");
    current_statement__ = 254;
    stan::model::assign(surv,
      stan::math::multiply(stan::math::exp(ss), gl_wt),
      "assigning variable surv", stan::model::index_uni(1));
    current_statement__ = 255;
    stan::model::assign(ss,
      stan::math::transpose(
        stan::math::subtract(
          stan::math::subtract(
            stan::math::add(
              stan::math::add(
                stan::math::multiply(
                  stan::math::minus(
                    stan::math::log(
                      stan::math::subtract(
                        stan::math::add(x_beta,
                          stan::model::rvalue(Len, "Len",
                            stan::model::index_uni(2))),
                        stan::model::rvalue(Len, "Len",
                          stan::model::index_uni(1))))),
                  stan::model::rvalue(Zki, "Zki", stan::model::index_uni(1))),
                stan::math::multiply(log_x_beta,
                  stan::model::rvalue(Zki, "Zki", stan::model::index_uni(1)))),
              stan::math::multiply(
                stan::math::log(
                  stan::math::add(gl_node, (beta *
                    stan::model::rvalue(Len, "Len", stan::model::index_uni(2))))),
                (alpha - 1.0))), (beta *
            stan::model::rvalue(Len, "Len", stan::model::index_uni(2)))),
          lg_alpha)), "assigning variable ss");
    current_statement__ = 256;
    stan::model::assign(surv,
      stan::math::multiply(stan::math::exp(ss), gl_wt),
      "assigning variable surv", stan::model::index_uni(2));
    current_statement__ = 271;
    for (int n = 3; n <= nl; ++n) {
      current_statement__ = 257;
      stan::math::validate_non_negative_index("Lrange", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__,-1,1> Lrange =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n - 1), DUMMY_VAR__);
      current_statement__ = 258;
      stan::model::assign(Lrange,
        stan::model::rvalue(Len, "Len",
          stan::model::index_min_max(1, (n - 1))),
        "assigning variable Lrange");
      current_statement__ = 259;
      stan::math::validate_non_negative_index("Zii", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__,-1,1> Zii =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n - 1), DUMMY_VAR__);
      current_statement__ = 260;
      stan::model::assign(Zii,
        stan::model::rvalue(Zin, "Zin",
          stan::model::index_min_max(1, (n - 1))), "assigning variable Zii");
      current_statement__ = 261;
      stan::math::validate_non_negative_index("v2", "nv", nv);
      Eigen::Matrix<local_scalar_t__,1,-1> v2 =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(nv, DUMMY_VAR__);
      current_statement__ = 262;
      stan::model::assign(v2,
        stan::math::transpose(
          stan::math::add(
            stan::math::multiply(log_x_beta,
              stan::model::rvalue(Zki, "Zki", stan::model::index_uni((n - 1)))),
            stan::math::multiply(
              stan::math::log(
                stan::math::add(gl_node, (beta *
                  stan::model::rvalue(Len, "Len", stan::model::index_uni(n))))),
              (alpha - 1.0)))), "assigning variable v2");
      local_scalar_t__ v3 = DUMMY_VAR__;
      current_statement__ = 263;
      v3 = ((beta *
        stan::model::rvalue(Len, "Len", stan::model::index_uni(n))) +
        lg_alpha);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("v1", "nv", nv);
      Eigen::Matrix<local_scalar_t__,1,-1> v1 =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(nv, DUMMY_VAR__);
      current_statement__ = 267;
      for (int i = 1; i <= nv; ++i) {
        current_statement__ = 266;
        stan::model::assign(v1,
          stan::math::sum(
            stan::math::elt_multiply(
              stan::math::log(
                stan::math::subtract(
                  (stan::model::rvalue(x_beta, "x_beta",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(Len, "Len", stan::model::index_uni(n))),
                  Lrange)), Zii)), "assigning variable v1",
          stan::model::index_uni(i));
      }
      current_statement__ = 268;
      stan::model::assign(ss,
        stan::math::subtract(stan::math::add(v1, v2), v3),
        "assigning variable ss");
      current_statement__ = 269;
      stan::model::assign(surv,
        stan::math::multiply(stan::math::exp(ss), gl_wt),
        "assigning variable surv", stan::model::index_uni(n));
    }
    current_statement__ = 272;
    stan::model::assign(pop,
      stan::math::elt_divide(
        stan::math::append_row(
          stan::math::subtract(
            stan::model::rvalue(surv, "surv",
              stan::model::index_min_max(1, (nl - 1))),
            stan::model::rvalue(surv, "surv",
              stan::model::index_min_max(2, nl))),
          stan::model::rvalue(surv, "surv", stan::model::index_uni(nl))), Zki),
      "assigning variable pop");
    current_statement__ = 273;
    return pop;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_BLICC final : public model_base_crtp<model_BLICC> {
private:
  int NG;
  int NS;
  int NF;
  int NB;
  int NP;
  int NM;
  Eigen::Matrix<double,-1,1> LLB_data__;
  std::vector<std::vector<int>> fq;
  Eigen::Matrix<double,-1,1> prop_catch_data__;
  std::vector<int> Fkg;
  std::vector<int> fSel;
  std::vector<int> sp_i;
  std::vector<int> GSbase;
  std::vector<int> GSmix1;
  std::vector<int> GSmix2;
  Eigen::Matrix<double,1,-1> ma_L_data__;
  double poLinfm;
  double poLinfs;
  double polGam;
  double polGas;
  Eigen::Matrix<double,-1,1> M_L_data__;
  double polMkm;
  double polMks;
  Eigen::Matrix<double,-1,1> polFkm_data__;
  double polFks;
  Eigen::Matrix<double,-1,1> polSm_data__;
  Eigen::Matrix<double,-1,1> polSs_data__;
  double polNB_phim;
  double polNB_phis;
  double polCs;
  int NK;
  Eigen::Matrix<double,-1,1> gl_nodes_data__;
  Eigen::Matrix<double,-1,1> gl_weights_data__;
  double eps;
  Eigen::Matrix<double,-1,1> NObs_data__;
  Eigen::Matrix<double,-1,1> olC_data__;
  Eigen::Matrix<double,-1,1> LMP_data__;
  std::vector<int> GSmix0;
  int nSm_1dim__;
  int Sm_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> LLB{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prop_catch{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> ma_L{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> M_L{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> polFkm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> polSm{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> polSs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> gl_nodes{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> gl_weights{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> NObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> olC{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> LMP{nullptr, 0};
public:
  ~model_BLICC() {}
  model_BLICC(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_BLICC_namespace::model_BLICC";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 108;
      context__.validate_dims("data initialization", "NG", "int",
        std::vector<size_t>{});
      NG = std::numeric_limits<int>::min();
      current_statement__ = 108;
      NG = context__.vals_i("NG")[(1 - 1)];
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "NG", NG, 1);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "NS", "int",
        std::vector<size_t>{});
      NS = std::numeric_limits<int>::min();
      current_statement__ = 109;
      NS = context__.vals_i("NS")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "NS", NS, 1);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "NF", "int",
        std::vector<size_t>{});
      NF = std::numeric_limits<int>::min();
      current_statement__ = 110;
      NF = context__.vals_i("NF")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "NF", NF, 0);
      current_statement__ = 110;
      stan::math::check_less_or_equal(function__, "NF", NF, NG);
      current_statement__ = 111;
      context__.validate_dims("data initialization", "NB", "int",
        std::vector<size_t>{});
      NB = std::numeric_limits<int>::min();
      current_statement__ = 111;
      NB = context__.vals_i("NB")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "NB", NB, 1);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "NP", "int",
        std::vector<size_t>{});
      NP = std::numeric_limits<int>::min();
      current_statement__ = 112;
      NP = context__.vals_i("NP")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "NP", NP, 2);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "NM", "int",
        std::vector<size_t>{});
      NM = std::numeric_limits<int>::min();
      current_statement__ = 113;
      NM = context__.vals_i("NM")[(1 - 1)];
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "NM", NM, 0);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("LLB", "NB", NB);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "LLB", "double",
        std::vector<size_t>{static_cast<size_t>(NB)});
      LLB_data__ = Eigen::Matrix<double,-1,1>::Constant(NB,
                     std::numeric_limits<double>::quiet_NaN());
      new (&LLB) Eigen::Map<Eigen::Matrix<double,-1,1>>(LLB_data__.data(),
        NB);
      {
        std::vector<local_scalar_t__> LLB_flat__;
        current_statement__ = 115;
        LLB_flat__ = context__.vals_r("LLB");
        current_statement__ = 115;
        pos__ = 1;
        current_statement__ = 115;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 115;
          stan::model::assign(LLB, LLB_flat__[(pos__ - 1)],
            "assigning variable LLB", stan::model::index_uni(sym1__));
          current_statement__ = 115;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      stan::math::validate_non_negative_index("fq", "NG", NG);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("fq", "NB", NB);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "fq", "int",
        std::vector<size_t>{static_cast<size_t>(NG), static_cast<size_t>(NB)});
      fq = std::vector<std::vector<int>>(NG,
             std::vector<int>(NB, std::numeric_limits<int>::min()));
      {
        std::vector<int> fq_flat__;
        current_statement__ = 118;
        fq_flat__ = context__.vals_i("fq");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= NG; ++sym2__) {
            current_statement__ = 118;
            stan::model::assign(fq, fq_flat__[(pos__ - 1)],
              "assigning variable fq", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 118;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 119;
      stan::math::validate_non_negative_index("prop_catch", "NF", NF);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "prop_catch", "double",
        std::vector<size_t>{static_cast<size_t>(NF)});
      prop_catch_data__ = Eigen::Matrix<double,-1,1>::Constant(NF,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prop_catch)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prop_catch_data__.data(), NF);
      {
        std::vector<local_scalar_t__> prop_catch_flat__;
        current_statement__ = 120;
        prop_catch_flat__ = context__.vals_r("prop_catch");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 120;
          stan::model::assign(prop_catch, prop_catch_flat__[(pos__ - 1)],
            "assigning variable prop_catch", stan::model::index_uni(sym1__));
          current_statement__ = 120;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 121;
      stan::math::validate_non_negative_index("Fkg", "NG", NG);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "Fkg", "int",
        std::vector<size_t>{static_cast<size_t>(NG)});
      Fkg = std::vector<int>(NG, std::numeric_limits<int>::min());
      current_statement__ = 122;
      Fkg = context__.vals_i("Fkg");
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "Fkg", Fkg, 0);
      current_statement__ = 122;
      stan::math::check_less_or_equal(function__, "Fkg", Fkg, NG);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("fSel", "NS", NS);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "fSel", "int",
        std::vector<size_t>{static_cast<size_t>(NS)});
      fSel = std::vector<int>(NS, std::numeric_limits<int>::min());
      current_statement__ = 124;
      fSel = context__.vals_i("fSel");
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "fSel", fSel, 1);
      current_statement__ = 124;
      stan::math::check_less_or_equal(function__, "fSel", fSel, 4);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("sp_i", "NS", NS);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "sp_i", "int",
        std::vector<size_t>{static_cast<size_t>(NS)});
      sp_i = std::vector<int>(NS, std::numeric_limits<int>::min());
      current_statement__ = 126;
      sp_i = context__.vals_i("sp_i");
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "sp_i", sp_i, 1);
      current_statement__ = 126;
      stan::math::check_less_or_equal(function__, "sp_i", sp_i, NP);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("GSbase", "NG", NG);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "GSbase", "int",
        std::vector<size_t>{static_cast<size_t>(NG)});
      GSbase = std::vector<int>(NG, std::numeric_limits<int>::min());
      current_statement__ = 128;
      GSbase = context__.vals_i("GSbase");
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "GSbase", GSbase, 1);
      current_statement__ = 128;
      stan::math::check_less_or_equal(function__, "GSbase", GSbase, NS);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("GSmix1", "NG * 2", (NG * 2));
      current_statement__ = 130;
      context__.validate_dims("data initialization", "GSmix1", "int",
        std::vector<size_t>{static_cast<size_t>((NG * 2))});
      GSmix1 = std::vector<int>((NG * 2), std::numeric_limits<int>::min());
      current_statement__ = 130;
      GSmix1 = context__.vals_i("GSmix1");
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "GSmix1", GSmix1, 0);
      current_statement__ = 130;
      stan::math::check_less_or_equal(function__, "GSmix1", GSmix1, NM);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("GSmix2", "NM", NM);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "GSmix2", "int",
        std::vector<size_t>{static_cast<size_t>(NM)});
      GSmix2 = std::vector<int>(NM, std::numeric_limits<int>::min());
      current_statement__ = 132;
      GSmix2 = context__.vals_i("GSmix2");
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "GSmix2", GSmix2, 1);
      current_statement__ = 132;
      stan::math::check_less_or_equal(function__, "GSmix2", GSmix2, NS);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("ma_L", "NB", NB);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "ma_L", "double",
        std::vector<size_t>{static_cast<size_t>(NB)});
      ma_L_data__ = Eigen::Matrix<double,1,-1>::Constant(NB,
                      std::numeric_limits<double>::quiet_NaN());
      new (&ma_L) Eigen::Map<Eigen::Matrix<double,1,-1>>(ma_L_data__.data(),
        NB);
      {
        std::vector<local_scalar_t__> ma_L_flat__;
        current_statement__ = 134;
        ma_L_flat__ = context__.vals_r("ma_L");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 134;
          stan::model::assign(ma_L, ma_L_flat__[(pos__ - 1)],
            "assigning variable ma_L", stan::model::index_uni(sym1__));
          current_statement__ = 134;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 135;
      context__.validate_dims("data initialization", "poLinfm", "double",
        std::vector<size_t>{});
      poLinfm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 135;
      poLinfm = context__.vals_r("poLinfm")[(1 - 1)];
      current_statement__ = 136;
      context__.validate_dims("data initialization", "poLinfs", "double",
        std::vector<size_t>{});
      poLinfs = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 136;
      poLinfs = context__.vals_r("poLinfs")[(1 - 1)];
      current_statement__ = 137;
      context__.validate_dims("data initialization", "polGam", "double",
        std::vector<size_t>{});
      polGam = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 137;
      polGam = context__.vals_r("polGam")[(1 - 1)];
      current_statement__ = 138;
      context__.validate_dims("data initialization", "polGas", "double",
        std::vector<size_t>{});
      polGas = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 138;
      polGas = context__.vals_r("polGas")[(1 - 1)];
      current_statement__ = 139;
      stan::math::validate_non_negative_index("M_L", "NB", NB);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "M_L", "double",
        std::vector<size_t>{static_cast<size_t>(NB)});
      M_L_data__ = Eigen::Matrix<double,-1,1>::Constant(NB,
                     std::numeric_limits<double>::quiet_NaN());
      new (&M_L) Eigen::Map<Eigen::Matrix<double,-1,1>>(M_L_data__.data(),
        NB);
      {
        std::vector<local_scalar_t__> M_L_flat__;
        current_statement__ = 140;
        M_L_flat__ = context__.vals_r("M_L");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= NB; ++sym1__) {
          current_statement__ = 140;
          stan::model::assign(M_L, M_L_flat__[(pos__ - 1)],
            "assigning variable M_L", stan::model::index_uni(sym1__));
          current_statement__ = 140;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 141;
      context__.validate_dims("data initialization", "polMkm", "double",
        std::vector<size_t>{});
      polMkm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 141;
      polMkm = context__.vals_r("polMkm")[(1 - 1)];
      current_statement__ = 142;
      context__.validate_dims("data initialization", "polMks", "double",
        std::vector<size_t>{});
      polMks = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 142;
      polMks = context__.vals_r("polMks")[(1 - 1)];
      current_statement__ = 143;
      stan::math::validate_non_negative_index("polFkm", "NF", NF);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "polFkm", "double",
        std::vector<size_t>{static_cast<size_t>(NF)});
      polFkm_data__ = Eigen::Matrix<double,-1,1>::Constant(NF,
                        std::numeric_limits<double>::quiet_NaN());
      new (&polFkm)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(polFkm_data__.data(), NF);
      {
        std::vector<local_scalar_t__> polFkm_flat__;
        current_statement__ = 144;
        polFkm_flat__ = context__.vals_r("polFkm");
        current_statement__ = 144;
        pos__ = 1;
        current_statement__ = 144;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 144;
          stan::model::assign(polFkm, polFkm_flat__[(pos__ - 1)],
            "assigning variable polFkm", stan::model::index_uni(sym1__));
          current_statement__ = 144;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 145;
      context__.validate_dims("data initialization", "polFks", "double",
        std::vector<size_t>{});
      polFks = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 145;
      polFks = context__.vals_r("polFks")[(1 - 1)];
      current_statement__ = 146;
      stan::math::validate_non_negative_index("polSm", "NP + NM", (NP + NM));
      current_statement__ = 147;
      context__.validate_dims("data initialization", "polSm", "double",
        std::vector<size_t>{static_cast<size_t>((NP + NM))});
      polSm_data__ = Eigen::Matrix<double,-1,1>::Constant((NP + NM),
                       std::numeric_limits<double>::quiet_NaN());
      new (&polSm)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(polSm_data__.data(), (NP +
        NM));
      {
        std::vector<local_scalar_t__> polSm_flat__;
        current_statement__ = 147;
        polSm_flat__ = context__.vals_r("polSm");
        current_statement__ = 147;
        pos__ = 1;
        current_statement__ = 147;
        for (int sym1__ = 1; sym1__ <= (NP + NM); ++sym1__) {
          current_statement__ = 147;
          stan::model::assign(polSm, polSm_flat__[(pos__ - 1)],
            "assigning variable polSm", stan::model::index_uni(sym1__));
          current_statement__ = 147;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 148;
      stan::math::validate_non_negative_index("polSs", "NP + NM", (NP + NM));
      current_statement__ = 149;
      context__.validate_dims("data initialization", "polSs", "double",
        std::vector<size_t>{static_cast<size_t>((NP + NM))});
      polSs_data__ = Eigen::Matrix<double,-1,1>::Constant((NP + NM),
                       std::numeric_limits<double>::quiet_NaN());
      new (&polSs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(polSs_data__.data(), (NP +
        NM));
      {
        std::vector<local_scalar_t__> polSs_flat__;
        current_statement__ = 149;
        polSs_flat__ = context__.vals_r("polSs");
        current_statement__ = 149;
        pos__ = 1;
        current_statement__ = 149;
        for (int sym1__ = 1; sym1__ <= (NP + NM); ++sym1__) {
          current_statement__ = 149;
          stan::model::assign(polSs, polSs_flat__[(pos__ - 1)],
            "assigning variable polSs", stan::model::index_uni(sym1__));
          current_statement__ = 149;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 150;
      context__.validate_dims("data initialization", "polNB_phim", "double",
        std::vector<size_t>{});
      polNB_phim = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 150;
      polNB_phim = context__.vals_r("polNB_phim")[(1 - 1)];
      current_statement__ = 151;
      context__.validate_dims("data initialization", "polNB_phis", "double",
        std::vector<size_t>{});
      polNB_phis = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      polNB_phis = context__.vals_r("polNB_phis")[(1 - 1)];
      current_statement__ = 152;
      context__.validate_dims("data initialization", "polCs", "double",
        std::vector<size_t>{});
      polCs = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      polCs = context__.vals_r("polCs")[(1 - 1)];
      current_statement__ = 153;
      context__.validate_dims("data initialization", "NK", "int",
        std::vector<size_t>{});
      NK = std::numeric_limits<int>::min();
      current_statement__ = 153;
      NK = context__.vals_i("NK")[(1 - 1)];
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "NK", NK, 5);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("gl_nodes", "NK", NK);
      current_statement__ = 155;
      context__.validate_dims("data initialization", "gl_nodes", "double",
        std::vector<size_t>{static_cast<size_t>(NK)});
      gl_nodes_data__ = Eigen::Matrix<double,-1,1>::Constant(NK,
                          std::numeric_limits<double>::quiet_NaN());
      new (&gl_nodes)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(gl_nodes_data__.data(), NK);
      {
        std::vector<local_scalar_t__> gl_nodes_flat__;
        current_statement__ = 155;
        gl_nodes_flat__ = context__.vals_r("gl_nodes");
        current_statement__ = 155;
        pos__ = 1;
        current_statement__ = 155;
        for (int sym1__ = 1; sym1__ <= NK; ++sym1__) {
          current_statement__ = 155;
          stan::model::assign(gl_nodes, gl_nodes_flat__[(pos__ - 1)],
            "assigning variable gl_nodes", stan::model::index_uni(sym1__));
          current_statement__ = 155;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 156;
      stan::math::validate_non_negative_index("gl_weights", "NK", NK);
      current_statement__ = 157;
      context__.validate_dims("data initialization", "gl_weights", "double",
        std::vector<size_t>{static_cast<size_t>(NK)});
      gl_weights_data__ = Eigen::Matrix<double,-1,1>::Constant(NK,
                            std::numeric_limits<double>::quiet_NaN());
      new (&gl_weights)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(gl_weights_data__.data(), NK);
      {
        std::vector<local_scalar_t__> gl_weights_flat__;
        current_statement__ = 157;
        gl_weights_flat__ = context__.vals_r("gl_weights");
        current_statement__ = 157;
        pos__ = 1;
        current_statement__ = 157;
        for (int sym1__ = 1; sym1__ <= NK; ++sym1__) {
          current_statement__ = 157;
          stan::model::assign(gl_weights, gl_weights_flat__[(pos__ - 1)],
            "assigning variable gl_weights", stan::model::index_uni(sym1__));
          current_statement__ = 157;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 158;
      eps = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 159;
      stan::math::validate_non_negative_index("NObs", "NG", NG);
      current_statement__ = 160;
      NObs_data__ = Eigen::Matrix<double,-1,1>::Constant(NG,
                      std::numeric_limits<double>::quiet_NaN());
      new (&NObs) Eigen::Map<Eigen::Matrix<double,-1,1>>(NObs_data__.data(),
        NG);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("olC", "NF", NF);
      current_statement__ = 162;
      olC_data__ = Eigen::Matrix<double,-1,1>::Constant(NF,
                     std::numeric_limits<double>::quiet_NaN());
      new (&olC) Eigen::Map<Eigen::Matrix<double,-1,1>>(olC_data__.data(),
        NF);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("LMP", "NB", NB);
      current_statement__ = 164;
      LMP_data__ = Eigen::Matrix<double,-1,1>::Constant(NB,
                     std::numeric_limits<double>::quiet_NaN());
      new (&LMP) Eigen::Map<Eigen::Matrix<double,-1,1>>(LMP_data__.data(),
        NB);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("GSmix0", "NG", NG);
      current_statement__ = 166;
      GSmix0 = std::vector<int>(NG, std::numeric_limits<int>::min());
      current_statement__ = 168;
      for (int gi = 1; gi <= NG; ++gi) {
        current_statement__ = 167;
        stan::model::assign(NObs,
          stan::math::sum(
            stan::model::rvalue(fq, "fq", stan::model::index_uni(gi))),
          "assigning variable NObs", stan::model::index_uni(gi));
      }
      {
        int Nmix = std::numeric_limits<int>::min();
        current_statement__ = 169;
        Nmix = 0;
        current_statement__ = 179;
        if (stan::math::logical_eq(NM, 0)) {
          current_statement__ = 177;
          stan::model::assign(GSmix0, stan::math::rep_array(0, NG),
            "assigning variable GSmix0");
        } else {
          current_statement__ = 175;
          for (int gi = 1; gi <= NG; ++gi) {
            int si = std::numeric_limits<int>::min();
            current_statement__ = 170;
            si = (1 + (2 * (gi - 1)));
            current_statement__ = 171;
            stan::model::assign(GSmix0,
              stan::model::rvalue(GSmix1, "GSmix1",
                stan::model::index_uni(si)), "assigning variable GSmix0",
              stan::model::index_uni(gi));
            current_statement__ = 173;
            if (stan::math::logical_gt(
                  stan::model::rvalue(GSmix1, "GSmix1",
                    stan::model::index_uni(si)), 0)) {
              current_statement__ = 172;
              Nmix = (Nmix +
                ((stan::model::rvalue(GSmix1, "GSmix1",
                    stan::model::index_uni((si + 1)))
                -
                stan::model::rvalue(GSmix1, "GSmix1",
                  stan::model::index_uni(si)))
                + 1));
            }
          }
        }
        current_statement__ = 181;
        if (stan::math::logical_neq(Nmix, NM)) {
          current_statement__ = 180;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Data object error: Number of mixtures / mixture references incorrect.");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
      {
        current_statement__ = 190;
        if (stan::math::logical_eq(NF, 1)) {
          current_statement__ = 188;
          stan::model::assign(olC, 0, "assigning variable olC",
            stan::model::index_uni(1));
        } else {
          current_statement__ = 185;
          for (int gi = 1; gi <= NF; ++gi) {
            current_statement__ = 183;
            stan::model::assign(olC,
              stan::math::log(
                stan::model::rvalue(prop_catch, "prop_catch",
                  stan::model::index_uni(gi))), "assigning variable olC",
              stan::model::index_uni(gi));
          }
          current_statement__ = 186;
          stan::model::assign(olC,
            stan::math::subtract(stan::model::deep_copy(olC),
              stan::math::log(stan::math::sum(prop_catch))),
            "assigning variable olC");
        }
      }
      current_statement__ = 192;
      eps = (0.001 / stan::math::sum(NObs));
      current_statement__ = 194;
      for (int i = 1; i <= (NB - 1); ++i) {
        current_statement__ = 193;
        stan::model::assign(LMP, (0.5 *
          (stan::model::rvalue(LLB, "LLB", stan::model::index_uni(i)) +
          stan::model::rvalue(LLB, "LLB", stan::model::index_uni((i + 1))))),
          "assigning variable LMP", stan::model::index_uni(i));
      }
      current_statement__ = 195;
      stan::model::assign(LMP,
        (stan::model::rvalue(LLB, "LLB", stan::model::index_uni(NB)) + (0.5 *
        (stan::model::rvalue(LLB, "LLB", stan::model::index_uni(NB)) -
        stan::model::rvalue(LLB, "LLB", stan::model::index_uni((NB - 1)))))),
        "assigning variable LMP", stan::model::index_uni(NB));
      current_statement__ = 196;
      stan::math::validate_non_negative_index("nFk", "NF", NF);
      current_statement__ = 197;
      nSm_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 197;
      nSm_1dim__ = (NP + NM);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("nSm", "NP + NM", nSm_1dim__);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("Fk", "NF", NF);
      current_statement__ = 199;
      Sm_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 199;
      Sm_1dim__ = (NP + NM);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("Sm", "NP + NM", Sm_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + NF + nSm_1dim__ + 1;
  }
  inline std::string model_name() const final {
    return "model_BLICC";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_BLICC_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ nLinf = DUMMY_VAR__;
      current_statement__ = 1;
      nLinf = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>((-poLinfm / poLinfs), lp__);
      local_scalar_t__ nGalpha = DUMMY_VAR__;
      current_statement__ = 2;
      nGalpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ nMk = DUMMY_VAR__;
      current_statement__ = 3;
      nMk = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> nFk =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 4;
      nFk = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(NF);
      Eigen::Matrix<local_scalar_t__,-1,1> nSm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nSm_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      nSm = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(nSm_1dim__);
      local_scalar_t__ nNB_phi = DUMMY_VAR__;
      current_statement__ = 6;
      nNB_phi = in__.template read<local_scalar_t__>();
      local_scalar_t__ Linf = DUMMY_VAR__;
      current_statement__ = 7;
      Linf = (poLinfm + (nLinf * poLinfs));
      local_scalar_t__ Galpha = DUMMY_VAR__;
      current_statement__ = 8;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      local_scalar_t__ Mk = DUMMY_VAR__;
      current_statement__ = 9;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      Eigen::Matrix<local_scalar_t__,-1,1> Fk =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(Fk,
        stan::math::exp(
          stan::math::add(polFkm, stan::math::multiply(nFk, polFks))),
        "assigning variable Fk");
      Eigen::Matrix<local_scalar_t__,-1,1> Sm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Sm_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(Sm,
        stan::math::exp(
          stan::math::add(polSm, stan::math::elt_multiply(nSm, polSs))),
        "assigning variable Sm");
      local_scalar_t__ NB_phi = DUMMY_VAR__;
      current_statement__ = 12;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      local_scalar_t__ Gbeta = DUMMY_VAR__;
      current_statement__ = 13;
      Gbeta = (Galpha / Linf);
      {
        current_statement__ = 48;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nLinf));
        current_statement__ = 49;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nGalpha));
        current_statement__ = 50;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nMk));
        current_statement__ = 51;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nFk));
        current_statement__ = 52;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nSm));
        current_statement__ = 53;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(nNB_phi));
        {
          current_statement__ = 54;
          stan::math::validate_non_negative_index("efq", "NB", NB);
          Eigen::Matrix<local_scalar_t__,-1,1> efq =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
          local_scalar_t__ Total_Catch = DUMMY_VAR__;
          current_statement__ = 56;
          Total_Catch = 0;
          current_statement__ = 57;
          stan::math::validate_non_negative_index("elC", "NF", NF);
          Eigen::Matrix<local_scalar_t__,-1,1> elC =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NF, DUMMY_VAR__);
          local_scalar_t__ eC_sum = DUMMY_VAR__;
          current_statement__ = 60;
          stan::math::validate_non_negative_index("eC", "NB", NB);
          Eigen::Matrix<local_scalar_t__,-1,1> eC =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
          current_statement__ = 62;
          stan::math::validate_non_negative_index("Seli", "NS", NS);
          current_statement__ = 63;
          stan::math::validate_non_negative_index("Seli", "NS", NS);
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> Seli =
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(NS,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NS, DUMMY_VAR__));
          current_statement__ = 65;
          stan::math::validate_non_negative_index("Fki", "NG", NG);
          current_statement__ = 66;
          stan::math::validate_non_negative_index("Fki", "NB", NB);
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> Fki =
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(NG,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__));
          current_statement__ = 68;
          stan::math::validate_non_negative_index("Zki", "NB", NB);
          Eigen::Matrix<local_scalar_t__,-1,1> Zki =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
          current_statement__ = 69;
          stan::model::assign(Zki, stan::math::multiply(Mk, M_L),
            "assigning variable Zki");
          current_statement__ = 70;
          stan::math::validate_non_negative_index("Pop", "NB", NB);
          Eigen::Matrix<local_scalar_t__,-1,1> Pop =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
          current_statement__ = 81;
          for (int si = 1; si <= NS; ++si) {
            current_statement__ = 79;
            if (stan::math::logical_eq(
                  stan::model::rvalue(fSel, "fSel",
                    stan::model::index_uni(si)), 1)) {
              current_statement__ = 78;
              stan::model::assign(Seli,
                sel_logistic(LMP,
                  stan::math::segment(Sm,
                    stan::model::rvalue(sp_i, "sp_i",
                      stan::model::index_uni(si)), 2), pstream__),
                "assigning variable Seli", stan::model::index_uni(si));
            } else {
              current_statement__ = 77;
              if (stan::math::logical_eq(
                    stan::model::rvalue(fSel, "fSel",
                      stan::model::index_uni(si)), 2)) {
                current_statement__ = 76;
                stan::model::assign(Seli,
                  sel_normal(LMP,
                    stan::math::segment(Sm,
                      stan::model::rvalue(sp_i, "sp_i",
                        stan::model::index_uni(si)), 2), pstream__),
                  "assigning variable Seli", stan::model::index_uni(si));
              } else {
                current_statement__ = 75;
                if (stan::math::logical_eq(
                      stan::model::rvalue(fSel, "fSel",
                        stan::model::index_uni(si)), 3)) {
                  current_statement__ = 74;
                  stan::model::assign(Seli,
                    sel_ssnormal(LMP,
                      stan::math::segment(Sm,
                        stan::model::rvalue(sp_i, "sp_i",
                          stan::model::index_uni(si)), 2), pstream__),
                    "assigning variable Seli", stan::model::index_uni(si));
                } else {
                  current_statement__ = 73;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(fSel, "fSel",
                          stan::model::index_uni(si)), 4)) {
                    current_statement__ = 72;
                    stan::model::assign(Seli,
                      sel_dsnormal(LMP,
                        stan::math::segment(Sm,
                          stan::model::rvalue(sp_i, "sp_i",
                            stan::model::index_uni(si)), 3), pstream__),
                      "assigning variable Seli", stan::model::index_uni(si));
                  }
                }
              }
            }
          }
          current_statement__ = 93;
          for (int gi = 1; gi <= NG; ++gi) {
            current_statement__ = 82;
            stan::model::assign(Fki,
              stan::model::rvalue(Seli, "Seli",
                stan::model::index_uni(
                  stan::model::rvalue(GSbase, "GSbase",
                    stan::model::index_uni(gi)))), "assigning variable Fki",
              stan::model::index_uni(gi));
            current_statement__ = 87;
            if (stan::math::logical_neq(
                  stan::model::rvalue(GSmix0, "GSmix0",
                    stan::model::index_uni(gi)), 0)) {
              int si = std::numeric_limits<int>::min();
              current_statement__ = 83;
              si = (1 + ((gi - 1) * 2));
              current_statement__ = 85;
              for (int i =
                     stan::model::rvalue(GSmix1, "GSmix1",
                       stan::model::index_uni(si)); i <=
                   stan::model::rvalue(GSmix1, "GSmix1",
                     stan::model::index_uni((si + 1))); ++i) {
                current_statement__ = 84;
                stan::model::assign(Fki,
                  stan::math::add(
                    stan::model::deep_copy(
                      stan::model::rvalue(Fki, "Fki",
                        stan::model::index_uni(gi))),
                    stan::math::multiply(
                      stan::model::rvalue(Sm, "Sm",
                        stan::model::index_uni((NP + i))),
                      stan::model::rvalue(Seli, "Seli",
                        stan::model::index_uni(
                          stan::model::rvalue(GSmix2, "GSmix2",
                            stan::model::index_uni(i)))))),
                  "assigning variable Fki", stan::model::index_uni(gi));
              }
            }
            current_statement__ = 91;
            if (stan::math::logical_gt(
                  stan::model::rvalue(Fkg, "Fkg", stan::model::index_uni(gi)),
                  0)) {
              current_statement__ = 88;
              stan::model::assign(Fki,
                stan::math::multiply(
                  stan::model::deep_copy(
                    stan::model::rvalue(Fki, "Fki",
                      stan::model::index_uni(gi))),
                  stan::model::rvalue(Fk, "Fk",
                    stan::model::index_uni(
                      stan::model::rvalue(Fkg, "Fkg",
                        stan::model::index_uni(gi))))),
                "assigning variable Fki", stan::model::index_uni(gi));
              current_statement__ = 89;
              stan::model::assign(Zki,
                stan::math::add(stan::model::deep_copy(Zki),
                  stan::model::rvalue(Fki, "Fki", stan::model::index_uni(gi))),
                "assigning variable Zki");
            }
          }
          current_statement__ = 94;
          stan::model::assign(Pop,
            Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha, Gbeta, pstream__),
            "assigning variable Pop");
          current_statement__ = 104;
          for (int gi = 1; gi <= NG; ++gi) {
            current_statement__ = 95;
            stan::model::assign(eC,
              stan::math::elt_multiply(
                stan::model::rvalue(Fki, "Fki", stan::model::index_uni(gi)),
                Pop), "assigning variable eC");
            current_statement__ = 96;
            eC_sum = stan::math::sum(eC);
            current_statement__ = 97;
            stan::model::assign(efq,
              stan::math::add(
                stan::math::divide(
                  stan::math::multiply(eC,
                    stan::model::rvalue(NObs, "NObs",
                      stan::model::index_uni(gi))), eC_sum), eps),
              "assigning variable efq");
            current_statement__ = 98;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                             stan::model::rvalue(fq, "fq",
                               stan::model::index_uni(gi)), efq, NB_phi));
            current_statement__ = 102;
            if (stan::math::logical_gt(
                  stan::model::rvalue(Fkg, "Fkg", stan::model::index_uni(gi)),
                  0)) {
              current_statement__ = 99;
              Total_Catch = (Total_Catch + eC_sum);
              current_statement__ = 100;
              stan::model::assign(elC, stan::math::log(eC_sum),
                "assigning variable elC",
                stan::model::index_uni(
                  stan::model::rvalue(Fkg, "Fkg", stan::model::index_uni(gi))));
            }
          }
          current_statement__ = 105;
          stan::model::assign(elC,
            stan::math::subtract(stan::model::deep_copy(elC),
              stan::math::log(Total_Catch)), "assigning variable elC");
          current_statement__ = 106;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(olC, elC, polCs));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_BLICC_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double nLinf = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      nLinf = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>((-poLinfm / poLinfs), lp__);
      double nGalpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      nGalpha = in__.template read<local_scalar_t__>();
      double nMk = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      nMk = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> nFk =
        Eigen::Matrix<double,-1,1>::Constant(NF,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      nFk = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(NF);
      Eigen::Matrix<double,-1,1> nSm =
        Eigen::Matrix<double,-1,1>::Constant(nSm_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      nSm = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(nSm_1dim__);
      double nNB_phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      nNB_phi = in__.template read<local_scalar_t__>();
      double Linf = std::numeric_limits<double>::quiet_NaN();
      double Galpha = std::numeric_limits<double>::quiet_NaN();
      double Mk = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> Fk =
        Eigen::Matrix<double,-1,1>::Constant(NF,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Sm =
        Eigen::Matrix<double,-1,1>::Constant(Sm_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double NB_phi = std::numeric_limits<double>::quiet_NaN();
      double Gbeta = std::numeric_limits<double>::quiet_NaN();
      out__.write(nLinf);
      out__.write(nGalpha);
      out__.write(nMk);
      out__.write(nFk);
      out__.write(nSm);
      out__.write(nNB_phi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      Linf = (poLinfm + (nLinf * poLinfs));
      current_statement__ = 8;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      current_statement__ = 9;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      current_statement__ = 10;
      stan::model::assign(Fk,
        stan::math::exp(
          stan::math::add(polFkm, stan::math::multiply(nFk, polFks))),
        "assigning variable Fk");
      current_statement__ = 11;
      stan::model::assign(Sm,
        stan::math::exp(
          stan::math::add(polSm, stan::math::elt_multiply(nSm, polSs))),
        "assigning variable Sm");
      current_statement__ = 12;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      current_statement__ = 13;
      Gbeta = (Galpha / Linf);
      if (emit_transformed_parameters__) {
        out__.write(Linf);
        out__.write(Galpha);
        out__.write(Mk);
        out__.write(Fk);
        out__.write(Sm);
        out__.write(NB_phi);
        out__.write(Gbeta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double SPR = std::numeric_limits<double>::quiet_NaN();
      {
        double SPR0 = std::numeric_limits<double>::quiet_NaN();
        double SPRF = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 17;
        stan::math::validate_non_negative_index("Seli", "NS", NS);
        current_statement__ = 18;
        stan::math::validate_non_negative_index("Seli", "NS", NS);
        std::vector<Eigen::Matrix<double,-1,1>> Seli =
          std::vector<Eigen::Matrix<double,-1,1>>(NS,
            Eigen::Matrix<double,-1,1>::Constant(NS,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 20;
        stan::math::validate_non_negative_index("Zki", "NB", NB);
        Eigen::Matrix<double,-1,1> Zki =
          Eigen::Matrix<double,-1,1>::Constant(NB,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 21;
        stan::model::assign(Zki, stan::math::multiply(Mk, M_L),
          "assigning variable Zki");
        current_statement__ = 22;
        stan::math::validate_non_negative_index("Sv", "NB", NB);
        Eigen::Matrix<double,-1,1> Sv =
          Eigen::Matrix<double,-1,1>::Constant(NB,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 24;
        SPR0 = stan::math::multiply(ma_L,
                 Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha, Gbeta,
                   pstream__));
        current_statement__ = 34;
        for (int gi = 1; gi <= NS; ++gi) {
          current_statement__ = 32;
          if (stan::math::logical_eq(
                stan::model::rvalue(fSel, "fSel", stan::model::index_uni(gi)),
                1)) {
            current_statement__ = 31;
            stan::model::assign(Seli,
              sel_logistic(LMP,
                stan::math::segment(Sm,
                  stan::model::rvalue(sp_i, "sp_i",
                    stan::model::index_uni(gi)), 2), pstream__),
              "assigning variable Seli", stan::model::index_uni(gi));
          } else {
            current_statement__ = 30;
            if (stan::math::logical_eq(
                  stan::model::rvalue(fSel, "fSel",
                    stan::model::index_uni(gi)), 2)) {
              current_statement__ = 29;
              stan::model::assign(Seli,
                sel_normal(LMP,
                  stan::math::segment(Sm,
                    stan::model::rvalue(sp_i, "sp_i",
                      stan::model::index_uni(gi)), 2), pstream__),
                "assigning variable Seli", stan::model::index_uni(gi));
            } else {
              current_statement__ = 28;
              if (stan::math::logical_eq(
                    stan::model::rvalue(fSel, "fSel",
                      stan::model::index_uni(gi)), 3)) {
                current_statement__ = 27;
                stan::model::assign(Seli,
                  sel_ssnormal(LMP,
                    stan::math::segment(Sm,
                      stan::model::rvalue(sp_i, "sp_i",
                        stan::model::index_uni(gi)), 2), pstream__),
                  "assigning variable Seli", stan::model::index_uni(gi));
              } else {
                current_statement__ = 26;
                if (stan::math::logical_eq(
                      stan::model::rvalue(fSel, "fSel",
                        stan::model::index_uni(gi)), 4)) {
                  current_statement__ = 25;
                  stan::model::assign(Seli,
                    sel_dsnormal(LMP,
                      stan::math::segment(Sm,
                        stan::model::rvalue(sp_i, "sp_i",
                          stan::model::index_uni(gi)), 3), pstream__),
                    "assigning variable Seli", stan::model::index_uni(gi));
                }
              }
            }
          }
        }
        current_statement__ = 44;
        for (int gi = 1; gi <= NG; ++gi) {
          current_statement__ = 42;
          if (stan::math::logical_gt(
                stan::model::rvalue(Fkg, "Fkg", stan::model::index_uni(gi)),
                0)) {
            current_statement__ = 35;
            stan::model::assign(Zki,
              stan::math::add(stan::model::deep_copy(Zki),
                stan::math::multiply(
                  stan::model::rvalue(Seli, "Seli",
                    stan::model::index_uni(
                      stan::model::rvalue(GSbase, "GSbase",
                        stan::model::index_uni(gi)))),
                  stan::model::rvalue(Fk, "Fk",
                    stan::model::index_uni(
                      stan::model::rvalue(Fkg, "Fkg",
                        stan::model::index_uni(gi)))))),
              "assigning variable Zki");
            current_statement__ = 40;
            if (stan::math::logical_neq(
                  stan::model::rvalue(GSmix0, "GSmix0",
                    stan::model::index_uni(gi)), 0)) {
              int si = std::numeric_limits<int>::min();
              current_statement__ = 36;
              si = (1 + ((gi - 1) * 2));
              current_statement__ = 38;
              for (int i =
                     stan::model::rvalue(GSmix1, "GSmix1",
                       stan::model::index_uni(si)); i <=
                   stan::model::rvalue(GSmix1, "GSmix1",
                     stan::model::index_uni((si + 1))); ++i) {
                current_statement__ = 37;
                stan::model::assign(Zki,
                  stan::math::add(stan::model::deep_copy(Zki),
                    stan::math::multiply(
                      stan::math::multiply(
                        stan::model::rvalue(Sm, "Sm",
                          stan::model::index_uni((NP + i))),
                        stan::model::rvalue(Seli, "Seli",
                          stan::model::index_uni(
                            stan::model::rvalue(GSmix2, "GSmix2",
                              stan::model::index_uni(i))))),
                      stan::model::rvalue(Fk, "Fk",
                        stan::model::index_uni(
                          stan::model::rvalue(Fkg, "Fkg",
                            stan::model::index_uni(gi)))))),
                  "assigning variable Zki");
              }
            }
          }
        }
        current_statement__ = 45;
        SPRF = stan::math::multiply(ma_L,
                 Pop_L(gl_nodes, gl_weights, LLB, Zki, Galpha, Gbeta,
                   pstream__));
        current_statement__ = 46;
        SPR = (SPRF / SPR0);
      }
      out__.write(SPR);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ nLinf = DUMMY_VAR__;
      current_statement__ = 1;
      nLinf = in__.read<local_scalar_t__>();
      out__.write_free_lb((-poLinfm / poLinfs), nLinf);
      local_scalar_t__ nGalpha = DUMMY_VAR__;
      current_statement__ = 2;
      nGalpha = in__.read<local_scalar_t__>();
      out__.write(nGalpha);
      local_scalar_t__ nMk = DUMMY_VAR__;
      current_statement__ = 3;
      nMk = in__.read<local_scalar_t__>();
      out__.write(nMk);
      Eigen::Matrix<local_scalar_t__,-1,1> nFk =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NF, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(nFk,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NF),
        "assigning variable nFk");
      out__.write(nFk);
      Eigen::Matrix<local_scalar_t__,-1,1> nSm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nSm_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(nSm,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nSm_1dim__),
        "assigning variable nSm");
      out__.write(nSm);
      local_scalar_t__ nNB_phi = DUMMY_VAR__;
      current_statement__ = 6;
      nNB_phi = in__.read<local_scalar_t__>();
      out__.write(nNB_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "nLinf", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "nGalpha",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "nMk", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "nFk", "double",
        std::vector<size_t>{static_cast<size_t>(NF)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "nSm", "double",
        std::vector<size_t>{static_cast<size_t>(nSm_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "nNB_phi",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ nLinf = DUMMY_VAR__;
      current_statement__ = 1;
      nLinf = context__.vals_r("nLinf")[(1 - 1)];
      out__.write_free_lb((-poLinfm / poLinfs), nLinf);
      local_scalar_t__ nGalpha = DUMMY_VAR__;
      current_statement__ = 2;
      nGalpha = context__.vals_r("nGalpha")[(1 - 1)];
      out__.write(nGalpha);
      local_scalar_t__ nMk = DUMMY_VAR__;
      current_statement__ = 3;
      nMk = context__.vals_r("nMk")[(1 - 1)];
      out__.write(nMk);
      Eigen::Matrix<local_scalar_t__,-1,1> nFk =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NF, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nFk_flat__;
        current_statement__ = 4;
        nFk_flat__ = context__.vals_r("nFk");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(nFk, nFk_flat__[(pos__ - 1)],
            "assigning variable nFk", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nFk);
      Eigen::Matrix<local_scalar_t__,-1,1> nSm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nSm_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nSm_flat__;
        current_statement__ = 5;
        nSm_flat__ = context__.vals_r("nSm");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nSm_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(nSm, nSm_flat__[(pos__ - 1)],
            "assigning variable nSm", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nSm);
      local_scalar_t__ nNB_phi = DUMMY_VAR__;
      current_statement__ = 6;
      nNB_phi = context__.vals_r("nNB_phi")[(1 - 1)];
      out__.write(nNB_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"nLinf", "nGalpha", "nMk", "nFk",
                "nSm", "nNB_phi"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"Linf", "Galpha", "Mk", "Fk", "Sm", "NB_phi", "Gbeta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"SPR"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(NF)},
                std::vector<size_t>{static_cast<size_t>(nSm_1dim__)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(NF)},
             std::vector<size_t>{static_cast<size_t>(Sm_1dim__)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      param_names__.emplace_back(std::string() + "nFk" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nSm_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nSm" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        param_names__.emplace_back(std::string() + "Fk" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Sm_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "Sm" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
      param_names__.emplace_back(std::string() + "nFk" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nSm_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nSm" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      for (int sym1__ = 1; sym1__ <= NF; ++sym1__) {
        param_names__.emplace_back(std::string() + "Fk" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Sm_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "Sm" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"nSm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Sm_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"parameters\"},{\"name\":\"nSm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NF) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Sm_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + NF) + nSm_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((1 +
      1) + 1) + NF) + Sm_1dim__) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + NF) + nSm_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((1 +
      1) + 1) + NF) + Sm_1dim__) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_BLICC_namespace::model_BLICC;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_BLICC_namespace::profiles__;
}
#endif
#endif
