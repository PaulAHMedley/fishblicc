// Generated by rstantools.  Do not edit by hand.

/*
    fishblicc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fishblicc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fishblicc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_BLICC_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 260, column 2 to column 39)",
                                                      " (in 'string', line 261, column 2 to column 15)",
                                                      " (in 'string', line 262, column 2 to column 11)",
                                                      " (in 'string', line 263, column 2 to column 11)",
                                                      " (in 'string', line 264, column 2 to column 12)",
                                                      " (in 'string', line 265, column 2 to column 19)",
                                                      " (in 'string', line 266, column 2 to column 15)",
                                                      " (in 'string', line 269, column 2 to column 38)",
                                                      " (in 'string', line 270, column 2 to column 45)",
                                                      " (in 'string', line 271, column 2 to column 37)",
                                                      " (in 'string', line 272, column 2 to column 37)",
                                                      " (in 'string', line 273, column 2 to column 41)",
                                                      " (in 'string', line 274, column 2 to column 43)",
                                                      " (in 'string', line 275, column 2 to column 11)",
                                                      " (in 'string', line 276, column 2 to column 53)",
                                                      " (in 'string', line 277, column 2 to column 29)",
                                                      " (in 'string', line 281, column 4 to column 40)",
                                                      " (in 'string', line 279, column 4 to column 12)",
                                                      " (in 'string', line 278, column 2 to line 281, column 40)",
                                                      " (in 'string', line 328, column 2 to column 11)",
                                                      " (in 'string', line 333, column 4 to column 14)",
                                                      " (in 'string', line 334, column 4 to column 14)",
                                                      " (in 'string', line 335, column 15 to column 18)",
                                                      " (in 'string', line 335, column 4 to column 72)",
                                                      " (in 'string', line 336, column 11 to column 14)",
                                                      " (in 'string', line 336, column 4 to column 20)",
                                                      " (in 'string', line 337, column 11 to column 14)",
                                                      " (in 'string', line 337, column 4 to column 19)",
                                                      " (in 'string', line 342, column 6 to column 55)",
                                                      " (in 'string', line 340, column 6 to column 50)",
                                                      " (in 'string', line 339, column 4 to line 342, column 55)",
                                                      " (in 'string', line 344, column 4 to column 67)",
                                                      " (in 'string', line 345, column 4 to column 37)",
                                                      " (in 'string', line 347, column 4 to column 30)",
                                                      " (in 'string', line 348, column 4 to column 67)",
                                                      " (in 'string', line 349, column 4 to column 37)",
                                                      " (in 'string', line 351, column 4 to column 20)",
                                                      " (in 'string', line 332, column 2 to line 352, column 3)",
                                                      " (in 'string', line 287, column 9 to column 12)",
                                                      " (in 'string', line 287, column 2 to column 18)",
                                                      " (in 'string', line 291, column 2 to column 38)",
                                                      " (in 'string', line 292, column 2 to column 40)",
                                                      " (in 'string', line 293, column 2 to column 36)",
                                                      " (in 'string', line 294, column 2 to column 36)",
                                                      " (in 'string', line 295, column 2 to column 37)",
                                                      " (in 'string', line 296, column 2 to column 36)",
                                                      " (in 'string', line 297, column 2 to column 40)",
                                                      " (in 'string', line 303, column 4 to column 17)",
                                                      " (in 'string', line 304, column 11 to column 14)",
                                                      " (in 'string', line 304, column 4 to column 20)",
                                                      " (in 'string', line 305, column 11 to column 14)",
                                                      " (in 'string', line 305, column 4 to column 20)",
                                                      " (in 'string', line 306, column 11 to column 14)",
                                                      " (in 'string', line 306, column 4 to column 19)",
                                                      " (in 'string', line 310, column 6 to column 50)",
                                                      " (in 'string', line 308, column 6 to column 45)",
                                                      " (in 'string', line 307, column 4 to line 310, column 50)",
                                                      " (in 'string', line 311, column 4 to column 17)",
                                                      " (in 'string', line 313, column 4 to column 67)",
                                                      " (in 'string', line 314, column 4 to column 38)",
                                                      " (in 'string', line 315, column 4 to column 23)",
                                                      " (in 'string', line 316, column 4 to column 24)",
                                                      " (in 'string', line 317, column 4 to column 15)",
                                                      " (in 'string', line 301, column 2 to line 319, column 3)",
                                                      " (in 'string', line 324, column 4 to column 52)",
                                                      " (in 'string', line 323, column 2 to line 325, column 3)",
                                                      " (in 'string', line 213, column 2 to column 18)",
                                                      " (in 'string', line 215, column 2 to column 19)",
                                                      " (in 'string', line 216, column 9 to column 12)",
                                                      " (in 'string', line 216, column 2 to column 18)",
                                                      " (in 'string', line 217, column 9 to column 12)",
                                                      " (in 'string', line 217, column 2 to column 14)",
                                                      " (in 'string', line 218, column 2 to column 9)",
                                                      " (in 'string', line 219, column 2 to column 10)",
                                                      " (in 'string', line 220, column 2 to column 10)",
                                                      " (in 'string', line 221, column 2 to column 15)",
                                                      " (in 'string', line 224, column 2 to column 15)",
                                                      " (in 'string', line 225, column 2 to column 15)",
                                                      " (in 'string', line 226, column 2 to column 14)",
                                                      " (in 'string', line 227, column 2 to column 14)",
                                                      " (in 'string', line 228, column 2 to column 14)",
                                                      " (in 'string', line 229, column 2 to column 14)",
                                                      " (in 'string', line 230, column 2 to column 14)",
                                                      " (in 'string', line 231, column 2 to column 14)",
                                                      " (in 'string', line 232, column 2 to column 15)",
                                                      " (in 'string', line 233, column 2 to column 15)",
                                                      " (in 'string', line 234, column 2 to column 15)",
                                                      " (in 'string', line 235, column 2 to column 15)",
                                                      " (in 'string', line 236, column 2 to column 15)",
                                                      " (in 'string', line 237, column 2 to column 15)",
                                                      " (in 'string', line 238, column 2 to column 18)",
                                                      " (in 'string', line 239, column 2 to column 18)",
                                                      " (in 'string', line 242, column 2 to column 20)",
                                                      " (in 'string', line 243, column 2 to column 22)",
                                                      " (in 'string', line 244, column 9 to column 11)",
                                                      " (in 'string', line 244, column 2 to column 51)",
                                                      " (in 'string', line 245, column 9 to column 12)",
                                                      " (in 'string', line 245, column 2 to column 18)",
                                                      " (in 'string', line 246, column 2 to column 11)",
                                                      " (in 'string', line 250, column 4 to column 13)",
                                                      " (in 'string', line 248, column 4 to column 13)",
                                                      " (in 'string', line 247, column 2 to line 250, column 13)",
                                                      " (in 'string', line 253, column 4 to column 35)",
                                                      " (in 'string', line 252, column 2 to line 253, column 35)",
                                                      " (in 'string', line 254, column 2 to column 50)",
                                                      " (in 'string', line 265, column 9 to column 13)",
                                                      " (in 'string', line 24, column 4 to column 45)",
                                                      " (in 'string', line 25, column 4 to column 17)",
                                                      " (in 'string', line 26, column 11 to column 13)",
                                                      " (in 'string', line 26, column 4 to column 18)",
                                                      " (in 'string', line 27, column 11 to column 13)",
                                                      " (in 'string', line 27, column 4 to column 18)",
                                                      " (in 'string', line 28, column 11 to column 13)",
                                                      " (in 'string', line 28, column 4 to column 38)",
                                                      " (in 'string', line 29, column 4 to column 34)",
                                                      " (in 'string', line 30, column 11 to column 13)",
                                                      " (in 'string', line 30, column 4 to column 26)",
                                                      " (in 'string', line 31, column 4 to column 10)",
                                                      " (in 'string', line 32, column 4 to column 12)",
                                                      " (in 'string', line 33, column 4 to column 10)",
                                                      " (in 'string', line 34, column 4 to column 11)",
                                                      " (in 'string', line 35, column 4 to column 11)",
                                                      " (in 'string', line 36, column 4 to column 11)",
                                                      " (in 'string', line 37, column 4 to column 11)",
                                                      " (in 'string', line 38, column 4 to column 16)",
                                                      " (in 'string', line 39, column 4 to column 11)",
                                                      " (in 'string', line 40, column 4 to column 11)",
                                                      " (in 'string', line 41, column 4 to column 11)",
                                                      " (in 'string', line 43, column 13 to column 15)",
                                                      " (in 'string', line 43, column 6 to column 55)",
                                                      " (in 'string', line 44, column 6 to column 31)",
                                                      " (in 'string', line 45, column 6 to column 32)",
                                                      " (in 'string', line 42, column 4 to line 46, column 5)",
                                                      " (in 'string', line 47, column 4 to column 23)",
                                                      " (in 'string', line 50, column 6 to column 22)",
                                                      " (in 'string', line 51, column 6 to column 30)",
                                                      " (in 'string', line 52, column 6 to column 21)",
                                                      " (in 'string', line 49, column 17 to line 53, column 5)",
                                                      " (in 'string', line 49, column 4 to line 53, column 5)",
                                                      " (in 'string', line 54, column 4 to column 17)",
                                                      " (in 'string', line 56, column 6 to column 16)",
                                                      " (in 'string', line 57, column 6 to column 22)",
                                                      " (in 'string', line 59, column 8 to column 15)",
                                                      " (in 'string', line 61, column 10 to column 17)",
                                                      " (in 'string', line 60, column 85 to line 62, column 9)",
                                                      " (in 'string', line 60, column 8 to line 62, column 9)",
                                                      " (in 'string', line 66, column 10 to column 21)",
                                                      " (in 'string', line 68, column 12 to column 82)",
                                                      " (in 'string', line 67, column 24 to line 69, column 11)",
                                                      " (in 'string', line 67, column 10 to line 69, column 11)",
                                                      " (in 'string', line 70, column 10 to column 17)",
                                                      " (in 'string', line 71, column 10 to column 42)",
                                                      " (in 'string', line 72, column 39 to column 53)",
                                                      " (in 'string', line 72, column 20 to column 33)",
                                                      " (in 'string', line 72, column 10 to column 53)",
                                                      " (in 'string', line 73, column 10 to column 36)",
                                                      " (in 'string', line 74, column 10 to column 33)",
                                                      " (in 'string', line 75, column 10 to column 39)",
                                                      " (in 'string', line 76, column 10 to column 18)",
                                                      " (in 'string', line 77, column 10 to column 18)",
                                                      " (in 'string', line 78, column 10 to column 18)",
                                                      " (in 'string', line 79, column 10 to column 23)",
                                                      " (in 'string', line 81, column 12 to column 27)",
                                                      " (in 'string', line 82, column 12 to column 26)",
                                                      " (in 'string', line 83, column 12 to column 26)",
                                                      " (in 'string', line 91, column 14 to column 24)",
                                                      " (in 'string', line 92, column 14 to column 40)",
                                                      " (in 'string', line 93, column 14 to column 30)",
                                                      " (in 'string', line 94, column 14 to column 26)",
                                                      " (in 'string', line 95, column 14 to column 21)",
                                                      " (in 'string', line 90, column 19 to line 96, column 13)",
                                                      " (in 'string', line 85, column 14 to column 24)",
                                                      " (in 'string', line 86, column 14 to column 40)",
                                                      " (in 'string', line 87, column 14 to column 30)",
                                                      " (in 'string', line 88, column 14 to column 26)",
                                                      " (in 'string', line 89, column 14 to column 21)",
                                                      " (in 'string', line 84, column 36 to line 90, column 13)",
                                                      " (in 'string', line 84, column 12 to line 96, column 13)",
                                                      " (in 'string', line 97, column 12 to column 28)",
                                                      " (in 'string', line 98, column 12 to column 42)",
                                                      " (in 'string', line 99, column 12 to column 22)",
                                                      " (in 'string', line 100, column 12 to column 28)",
                                                      " (in 'string', line 101, column 12 to column 26)",
                                                      " (in 'string', line 102, column 12 to column 24)",
                                                      " (in 'string', line 103, column 12 to column 22)",
                                                      " (in 'string', line 104, column 12 to column 36)",
                                                      " (in 'string', line 105, column 12 to column 34)",
                                                      " (in 'string', line 80, column 28 to line 106, column 11)",
                                                      " (in 'string', line 80, column 10 to line 106, column 11)",
                                                      " (in 'string', line 107, column 10 to column 22)",
                                                      " (in 'string', line 108, column 10 to column 21)",
                                                      " (in 'string', line 109, column 10 to column 22)",
                                                      " (in 'string', line 65, column 15 to line 110, column 9)",
                                                      " (in 'string', line 64, column 10 to column 22)",
                                                      " (in 'string', line 63, column 21 to line 65, column 9)",
                                                      " (in 'string', line 63, column 8 to line 110, column 9)",
                                                      " (in 'string', line 58, column 22 to line 111, column 7)",
                                                      " (in 'string', line 58, column 6 to line 111, column 7)",
                                                      " (in 'string', line 55, column 21 to line 112, column 5)",
                                                      " (in 'string', line 55, column 4 to line 112, column 5)",
                                                      " (in 'string', line 115, column 6 to column 21)",
                                                      " (in 'string', line 116, column 6 to column 12)",
                                                      " (in 'string', line 117, column 6 to column 16)",
                                                      " (in 'string', line 120, column 10 to column 16)",
                                                      " (in 'string', line 121, column 10 to column 20)",
                                                      " (in 'string', line 119, column 23 to line 122, column 9)",
                                                      " (in 'string', line 119, column 8 to line 122, column 9)",
                                                      " (in 'string', line 118, column 23 to line 123, column 7)",
                                                      " (in 'string', line 118, column 6 to line 123, column 7)",
                                                      " (in 'string', line 125, column 8 to column 18)",
                                                      " (in 'string', line 126, column 8 to column 18)",
                                                      " (in 'string', line 127, column 8 to column 18)",
                                                      " (in 'string', line 128, column 8 to column 18)",
                                                      " (in 'string', line 129, column 8 to column 22)",
                                                      " (in 'string', line 130, column 8 to column 18)",
                                                      " (in 'string', line 124, column 18 to line 131, column 7)",
                                                      " (in 'string', line 124, column 6 to line 131, column 7)",
                                                      " (in 'string', line 114, column 20 to line 132, column 5)",
                                                      " (in 'string', line 114, column 4 to line 132, column 5)",
                                                      " (in 'string', line 133, column 4 to column 20)",
                                                      " (in 'string', line 134, column 4 to column 28)",
                                                      " (in 'string', line 135, column 4 to column 19)",
                                                      " (in 'string', line 15, column 51 to line 136, column 3)",
                                                      " (in 'string', line 140, column 2 to column 21)",
                                                      " (in 'string', line 141, column 9 to column 11)",
                                                      " (in 'string', line 141, column 2 to column 50)",
                                                      " (in 'string', line 142, column 2 to column 13)",
                                                      " (in 'string', line 138, column 54 to line 143, column 1)",
                                                      " (in 'string', line 146, column 2 to column 21)",
                                                      " (in 'string', line 147, column 9 to column 11)",
                                                      " (in 'string', line 147, column 2 to column 16)",
                                                      " (in 'string', line 152, column 6 to column 40)",
                                                      " (in 'string', line 151, column 11 to line 153, column 5)",
                                                      " (in 'string', line 150, column 6 to column 40)",
                                                      " (in 'string', line 149, column 23 to line 151, column 5)",
                                                      " (in 'string', line 149, column 4 to line 153, column 5)",
                                                      " (in 'string', line 148, column 18 to line 154, column 3)",
                                                      " (in 'string', line 148, column 2 to line 154, column 3)",
                                                      " (in 'string', line 155, column 2 to column 12)",
                                                      " (in 'string', line 144, column 63 to line 156, column 1)",
                                                      " (in 'string', line 159, column 2 to column 21)",
                                                      " (in 'string', line 160, column 9 to column 11)",
                                                      " (in 'string', line 160, column 2 to column 16)",
                                                      " (in 'string', line 165, column 6 to column 18)",
                                                      " (in 'string', line 164, column 11 to line 166, column 5)",
                                                      " (in 'string', line 163, column 6 to column 40)",
                                                      " (in 'string', line 162, column 23 to line 164, column 5)",
                                                      " (in 'string', line 162, column 4 to line 166, column 5)",
                                                      " (in 'string', line 161, column 18 to line 167, column 3)",
                                                      " (in 'string', line 161, column 2 to line 167, column 3)",
                                                      " (in 'string', line 168, column 2 to column 12)",
                                                      " (in 'string', line 157, column 53 to line 169, column 1)",
                                                      " (in 'string', line 174, column 2 to column 21)",
                                                      " (in 'string', line 175, column 2 to column 25)",
                                                      " (in 'string', line 176, column 2 to column 32)",
                                                      " (in 'string', line 177, column 9 to column 11)",
                                                      " (in 'string', line 177, column 2 to column 37)",
                                                      " (in 'string', line 178, column 9 to column 11)",
                                                      " (in 'string', line 178, column 2 to column 38)",
                                                      " (in 'string', line 179, column 9 to column 13)",
                                                      " (in 'string', line 179, column 2 to column 72)",
                                                      " (in 'string', line 180, column 9 to column 11)",
                                                      " (in 'string', line 180, column 2 to column 18)",
                                                      " (in 'string', line 181, column 13 to column 15)",
                                                      " (in 'string', line 181, column 2 to column 20)",
                                                      " (in 'string', line 182, column 2 to column 76)",
                                                      " (in 'string', line 183, column 2 to column 28)",
                                                      " (in 'string', line 184, column 2 to column 136)",
                                                      " (in 'string', line 185, column 2 to column 28)",
                                                      " (in 'string', line 188, column 11 to column 14)",
                                                      " (in 'string', line 188, column 4 to column 38)",
                                                      " (in 'string', line 189, column 11 to column 14)",
                                                      " (in 'string', line 189, column 4 to column 35)",
                                                      " (in 'string', line 190, column 15 to column 17)",
                                                      " (in 'string', line 190, column 4 to column 88)",
                                                      " (in 'string', line 191, column 4 to column 37)",
                                                      " (in 'string', line 192, column 15 to column 17)",
                                                      " (in 'string', line 192, column 4 to column 22)",
                                                      " (in 'string', line 194, column 6 to column 59)",
                                                      " (in 'string', line 193, column 4 to line 194, column 59)",
                                                      " (in 'string', line 195, column 4 to column 22)",
                                                      " (in 'string', line 196, column 4 to column 30)",
                                                      " (in 'string', line 187, column 18 to line 197, column 3)",
                                                      " (in 'string', line 187, column 2 to line 197, column 3)",
                                                      " (in 'string', line 198, column 2 to column 14)",
                                                      " (in 'string', line 171, column 97 to line 199, column 1)",
                                                      " (in 'string', line 202, column 2 to column 22)",
                                                      " (in 'string', line 203, column 9 to column 11)",
                                                      " (in 'string', line 203, column 2 to column 80)",
                                                      " (in 'string', line 204, column 2 to column 17)",
                                                      " (in 'string', line 200, column 44 to line 205, column 1)"};
template <typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__>, -1, 1>>
gauss_laguerre_quad(const int& nt, const T1__& alpha, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ r8_epsilon;
    r8_epsilon = DUMMY_VAR__;
    
    current_statement__ = 107;
    r8_epsilon = 2.220446049250313E-016;
    int itn;
    itn = std::numeric_limits<int>::min();
    
    current_statement__ = 108;
    itn = 30;
    current_statement__ = 109;
    validate_non_negative_index("aj", "nt", nt);
    Eigen::Matrix<local_scalar_t__, -1, 1> aj;
    aj = Eigen::Matrix<local_scalar_t__, -1, 1>(nt);
    stan::math::fill(aj, DUMMY_VAR__);
    
    current_statement__ = 111;
    validate_non_negative_index("bj", "nt", nt);
    Eigen::Matrix<local_scalar_t__, -1, 1> bj;
    bj = Eigen::Matrix<local_scalar_t__, -1, 1>(nt);
    stan::math::fill(bj, DUMMY_VAR__);
    
    current_statement__ = 113;
    validate_non_negative_index("wt", "nt", nt);
    Eigen::Matrix<local_scalar_t__, -1, 1> wt;
    wt = Eigen::Matrix<local_scalar_t__, -1, 1>(nt);
    stan::math::fill(wt, DUMMY_VAR__);
    
    current_statement__ = 114;
    assign(wt, nil_index_list(), rep_vector(0, nt), "assigning variable wt");
    local_scalar_t__ zemu;
    zemu = DUMMY_VAR__;
    
    current_statement__ = 115;
    zemu = stan::math::tgamma((alpha + 1.0));
    current_statement__ = 116;
    validate_non_negative_index("knot_wt", "nt", nt);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> knot_wt;
    knot_wt = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(2, Eigen::Matrix<local_scalar_t__, -1, 1>(nt));
    stan::math::fill(knot_wt, DUMMY_VAR__);
    
    int m;
    m = std::numeric_limits<int>::min();
    
    int mml;
    mml = std::numeric_limits<int>::min();
    
    int k;
    k = std::numeric_limits<int>::min();
    
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    local_scalar_t__ c;
    c = DUMMY_VAR__;
    
    local_scalar_t__ f;
    f = DUMMY_VAR__;
    
    local_scalar_t__ g;
    g = DUMMY_VAR__;
    
    local_scalar_t__ sign_g;
    sign_g = DUMMY_VAR__;
    
    local_scalar_t__ p;
    p = DUMMY_VAR__;
    
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    local_scalar_t__ s;
    s = DUMMY_VAR__;
    
    {
      current_statement__ = 129;
      validate_non_negative_index("i", "nt", nt);
      Eigen::Matrix<local_scalar_t__, -1, 1> i;
      i = Eigen::Matrix<local_scalar_t__, -1, 1>(nt);
      stan::math::fill(i, DUMMY_VAR__);
      
      current_statement__ = 130;
      assign(i, nil_index_list(), cumulative_sum(rep_vector(1, nt)),
        "assigning variable i");
      current_statement__ = 131;
      assign(aj, nil_index_list(),
        add(subtract(multiply(2.0, i), 1.0), alpha), "assigning variable aj");
      current_statement__ = 132;
      assign(bj, nil_index_list(),
        stan::math::sqrt(elt_multiply(i, add(i, alpha))),
        "assigning variable bj");
    }
    current_statement__ = 134;
    assign(wt, cons_list(index_uni(1), nil_index_list()),
      stan::math::sqrt(zemu), "assigning variable wt");
    current_statement__ = 139;
    if (logical_eq(nt, 1)) {
      current_statement__ = 135;
      assign(knot_wt, cons_list(index_uni(1), nil_index_list()), aj,
        "assigning variable knot_wt");
      current_statement__ = 136;
      assign(knot_wt, cons_list(index_uni(2), nil_index_list()), square(wt),
        "assigning variable knot_wt");
      current_statement__ = 137;
      return knot_wt;
    } 
    current_statement__ = 140;
    assign(bj, cons_list(index_uni(nt), nil_index_list()), 0.0,
      "assigning variable bj");
    current_statement__ = 200;
    for (int ll = 1; ll <= nt; ++ll) {
      int j;
      j = std::numeric_limits<int>::min();
      
      current_statement__ = 141;
      j = 0;
      int Do_Loop;
      Do_Loop = std::numeric_limits<int>::min();
      
      current_statement__ = 142;
      Do_Loop = 1;
      current_statement__ = 198;
      while (Do_Loop) {
        current_statement__ = 143;
        m = ll;
        current_statement__ = 146;
        while ((primitive_value(logical_lt(m, nt)) && primitive_value(
               logical_gt(stan::math::fabs(bj[(m - 1)]),
                 (r8_epsilon *
                   (stan::math::fabs(aj[(m - 1)]) +
                     stan::math::fabs(aj[((m + 1) - 1)]))))))) {
          current_statement__ = 144;
          m = (m + 1);
        }
        current_statement__ = 196;
        if (logical_eq(m, ll)) {
          current_statement__ = 194;
          Do_Loop = 0;
        } else {
          current_statement__ = 147;
          p = aj[(ll - 1)];
          current_statement__ = 150;
          if (logical_lte(itn, j)) {
            current_statement__ = 148;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "gauss_laguerre_quad - Fatal error! Iteration limit exceeded";
            throw std::domain_error(errmsg_stream__.str());
          } 
          current_statement__ = 151;
          j = (j + 1);
          current_statement__ = 152;
          g = ((aj[((ll + 1) - 1)] - p) / (2.0 * bj[(ll - 1)]));
          current_statement__ = 155;
          if (logical_gte(g, 0)) {
            current_statement__ = 154;
            sign_g = 1.0;
          } else {
            current_statement__ = 153;
            sign_g = -1.0;
          }
          current_statement__ = 156;
          r = stan::math::sqrt((square(g) + 1.0));
          current_statement__ = 157;
          s = (g + (stan::math::fabs(r) * sign_g));
          current_statement__ = 158;
          g = ((aj[(m - 1)] - p) + (bj[(ll - 1)] / s));
          current_statement__ = 159;
          s = 1.0;
          current_statement__ = 160;
          c = 1.0;
          current_statement__ = 161;
          p = 0.0;
          current_statement__ = 162;
          mml = (m - ll);
          current_statement__ = 189;
          for (int ii = 1; ii <= mml; ++ii) {
            int i;
            i = std::numeric_limits<int>::min();
            
            current_statement__ = 163;
            i = (m - ii);
            current_statement__ = 164;
            f = (s * bj[(i - 1)]);
            current_statement__ = 165;
            b = (c * bj[(i - 1)]);
            current_statement__ = 178;
            if (logical_lte(stan::math::fabs(g), stan::math::fabs(f))) {
              current_statement__ = 172;
              c = (g / f);
              current_statement__ = 173;
              r = stan::math::sqrt((square(c) + 1.0));
              current_statement__ = 174;
              assign(bj, cons_list(index_uni((i + 1)), nil_index_list()),
                (f * r), "assigning variable bj");
              current_statement__ = 175;
              s = (1.0 / r);
              current_statement__ = 176;
              c = (c * s);
            } else {
              current_statement__ = 166;
              s = (f / g);
              current_statement__ = 167;
              r = stan::math::sqrt((square(s) + 1.0));
              current_statement__ = 168;
              assign(bj, cons_list(index_uni((i + 1)), nil_index_list()),
                (g * r), "assigning variable bj");
              current_statement__ = 169;
              c = (1.0 / r);
              current_statement__ = 170;
              s = (s * c);
            }
            current_statement__ = 179;
            g = (aj[((i + 1) - 1)] - p);
            current_statement__ = 180;
            r = (((aj[(i - 1)] - g) * s) + ((2.0 * c) * b));
            current_statement__ = 181;
            p = (s * r);
            current_statement__ = 182;
            assign(aj, cons_list(index_uni((i + 1)), nil_index_list()),
              (g + p), "assigning variable aj");
            current_statement__ = 183;
            g = ((c * r) - b);
            current_statement__ = 184;
            f = wt[((i + 1) - 1)];
            current_statement__ = 185;
            b = wt[(i - 1)];
            current_statement__ = 186;
            assign(wt, cons_list(index_uni((i + 1)), nil_index_list()),
              ((s * b) + (c * f)), "assigning variable wt");
            current_statement__ = 187;
            assign(wt, cons_list(index_uni(i), nil_index_list()),
              ((c * b) - (s * f)), "assigning variable wt");}
          current_statement__ = 190;
          assign(aj, cons_list(index_uni(ll), nil_index_list()),
            (aj[(ll - 1)] - p), "assigning variable aj");
          current_statement__ = 191;
          assign(bj, cons_list(index_uni(ll), nil_index_list()), g,
            "assigning variable bj");
          current_statement__ = 192;
          assign(bj, cons_list(index_uni(m), nil_index_list()), 0.0,
            "assigning variable bj");
        }
      }}
    current_statement__ = 219;
    for (int ii = 2; ii <= m; ++ii) {
      int i;
      i = std::numeric_limits<int>::min();
      
      current_statement__ = 201;
      i = (ii - 1);
      current_statement__ = 202;
      k = i;
      current_statement__ = 203;
      p = aj[(i - 1)];
      current_statement__ = 209;
      for (int j = ii; j <= nt; ++j) {
        current_statement__ = 207;
        if (logical_lt(aj[(j - 1)], p)) {
          current_statement__ = 204;
          k = j;
          current_statement__ = 205;
          p = aj[(j - 1)];
        } }
      current_statement__ = 217;
      if (logical_neq(k, i)) {
        current_statement__ = 210;
        g = aj[(i - 1)];
        current_statement__ = 211;
        assign(aj, cons_list(index_uni(k), nil_index_list()), g,
          "assigning variable aj");
        current_statement__ = 212;
        assign(aj, cons_list(index_uni(i), nil_index_list()), p,
          "assigning variable aj");
        current_statement__ = 213;
        p = wt[(i - 1)];
        current_statement__ = 214;
        assign(wt, cons_list(index_uni(i), nil_index_list()), wt[(k - 1)],
          "assigning variable wt");
        current_statement__ = 215;
        assign(wt, cons_list(index_uni(k), nil_index_list()), p,
          "assigning variable wt");
      } }
    current_statement__ = 220;
    assign(knot_wt, cons_list(index_uni(1), nil_index_list()), aj,
      "assigning variable knot_wt");
    current_statement__ = 221;
    assign(knot_wt, cons_list(index_uni(2), nil_index_list()), square(wt),
      "assigning variable knot_wt");
    current_statement__ = 222;
    return knot_wt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gauss_laguerre_quad_functor__ {
template <typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__>, -1, 1>>
operator()(const int& nt, const T1__& alpha, std::ostream* pstream__)  const 
{
return gauss_laguerre_quad(nt, alpha, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
sel_logistic(const T0__& LMP_arg__, const T1__& Sel50, const T2__& Ss1,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& LMP = to_ref(LMP_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 224;
    nl = rows(LMP);
    current_statement__ = 225;
    validate_non_negative_index("Sel", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> Sel;
    Sel = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(Sel, DUMMY_VAR__);
    
    current_statement__ = 226;
    assign(Sel, nil_index_list(),
      inv_logit(multiply(Ss1, subtract(LMP, Sel50))),
      "assigning variable Sel");
    current_statement__ = 227;
    return Sel;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_logistic_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& LMP, const T1__& Sel50, const T2__& Ss1,
           std::ostream* pstream__)  const 
{
return sel_logistic(LMP, Sel50, Ss1, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__,
T3__>, -1, 1>
sel_dsnormal(const T0__& LMP_arg__, const T1__& Smax, const T2__& Ss1,
             const T3__& Ss2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__,
          T3__>;
  const auto& LMP = to_ref(LMP_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 229;
    nl = rows(LMP);
    current_statement__ = 230;
    validate_non_negative_index("SL", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> SL;
    SL = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(SL, DUMMY_VAR__);
    
    current_statement__ = 238;
    for (int i = 1; i <= nl; ++i) {
      current_statement__ = 236;
      if (logical_lt(LMP[(i - 1)], Smax)) {
        current_statement__ = 234;
        assign(SL, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp((-Ss1 * pow((LMP[(i - 1)] - Smax), 2))),
          "assigning variable SL");
      } else {
        current_statement__ = 232;
        assign(SL, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp((-Ss2 * pow((LMP[(i - 1)] - Smax), 2))),
          "assigning variable SL");
      }}
    current_statement__ = 239;
    return SL;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_dsnormal_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__,
T3__>, -1, 1>
operator()(const T0__& LMP, const T1__& Smax, const T2__& Ss1,
           const T3__& Ss2, std::ostream* pstream__)  const 
{
return sel_dsnormal(LMP, Smax, Ss1, Ss2, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
sel_ssnormal(const T0__& LMP_arg__, const T1__& Smax, const T2__& Ss1,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& LMP = to_ref(LMP_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 241;
    nl = rows(LMP);
    current_statement__ = 242;
    validate_non_negative_index("SL", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> SL;
    SL = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(SL, DUMMY_VAR__);
    
    current_statement__ = 250;
    for (int i = 1; i <= nl; ++i) {
      current_statement__ = 248;
      if (logical_lt(LMP[(i - 1)], Smax)) {
        current_statement__ = 246;
        assign(SL, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp((-Ss1 * pow((LMP[(i - 1)] - Smax), 2))),
          "assigning variable SL");
      } else {
        current_statement__ = 244;
        assign(SL, cons_list(index_uni(i), nil_index_list()), 1.0,
          "assigning variable SL");
      }}
    current_statement__ = 251;
    return SL;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sel_ssnormal_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& LMP, const T1__& Smax, const T2__& Ss1,
           std::ostream* pstream__)  const 
{
return sel_ssnormal(LMP, Smax, Ss1, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
T4__, stan::promote_args_t<T5__>>, -1, 1>
Survival_Est(const T0__& gl_node_arg__, const T1__& gl_wt_arg__,
             const T2__& Len_arg__, const T3__& Zki_arg__, const T4__& alpha,
             const T5__& beta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T4__, stan::promote_args_t<T5__>>;
  const auto& gl_node = to_ref(gl_node_arg__);
  const auto& gl_wt = to_ref(gl_wt_arg__);
  const auto& Len = to_ref(Len_arg__);
  const auto& Zki = to_ref(Zki_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 253;
    nl = rows(Len);
    int nv;
    nv = std::numeric_limits<int>::min();
    
    current_statement__ = 254;
    nv = rows(gl_node);
    local_scalar_t__ lg_alpha;
    lg_alpha = DUMMY_VAR__;
    
    current_statement__ = 255;
    lg_alpha = stan::math::lgamma(alpha);
    current_statement__ = 256;
    validate_non_negative_index("x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__, -1, 1> x_beta;
    x_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(nv);
    stan::math::fill(x_beta, DUMMY_VAR__);
    
    current_statement__ = 257;
    assign(x_beta, nil_index_list(), divide(gl_node, beta),
      "assigning variable x_beta");
    current_statement__ = 258;
    validate_non_negative_index("log_x_beta", "nv", nv);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_x_beta;
    log_x_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(nv);
    stan::math::fill(log_x_beta, DUMMY_VAR__);
    
    current_statement__ = 259;
    assign(log_x_beta, nil_index_list(), stan::math::log(x_beta),
      "assigning variable log_x_beta");
    current_statement__ = 260;
    validate_non_negative_index("Zin", "nl - 1", (nl - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> Zin;
    Zin = Eigen::Matrix<local_scalar_t__, -1, 1>((nl - 1));
    stan::math::fill(Zin, DUMMY_VAR__);
    
    current_statement__ = 261;
    assign(Zin, nil_index_list(),
      append_row(-Zki[(1 - 1)],
        subtract(
          rvalue(Zki,
            cons_list(index_min_max(1, (nl - 2)), nil_index_list()), "Zki"),
          rvalue(Zki,
            cons_list(index_min_max(2, (nl - 1)), nil_index_list()), "Zki"))),
      "assigning variable Zin");
    current_statement__ = 262;
    validate_non_negative_index("surv", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> surv;
    surv = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(surv, DUMMY_VAR__);
    
    current_statement__ = 264;
    validate_non_negative_index("ss", "nv", nv);
    Eigen::Matrix<local_scalar_t__, 1, -1> ss;
    ss = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
    stan::math::fill(ss, DUMMY_VAR__);
    
    current_statement__ = 266;
    assign(ss, nil_index_list(),
      transpose(
        subtract(
          subtract(
            multiply(stan::math::log(add(gl_node, (beta * Len[(1 - 1)]))),
              (alpha - 1.0)), (beta * Len[(1 - 1)])), lg_alpha)),
      "assigning variable ss");
    current_statement__ = 267;
    assign(surv, cons_list(index_uni(1), nil_index_list()),
      multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");
    current_statement__ = 268;
    assign(ss, nil_index_list(),
      transpose(
        subtract(
          subtract(
            add(
              add(
                multiply(
                  minus(
                    stan::math::log(
                      subtract(add(x_beta, Len[(2 - 1)]), Len[(1 - 1)]))),
                  Zki[(1 - 1)]), multiply(log_x_beta, Zki[(1 - 1)])),
              multiply(stan::math::log(add(gl_node, (beta * Len[(2 - 1)]))),
                (alpha - 1.0))), (beta * Len[(2 - 1)])), lg_alpha)),
      "assigning variable ss");
    current_statement__ = 269;
    assign(surv, cons_list(index_uni(2), nil_index_list()),
      multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");
    current_statement__ = 284;
    for (int n = 3; n <= nl; ++n) {
      current_statement__ = 270;
      validate_non_negative_index("Lrange", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> Lrange;
      Lrange = Eigen::Matrix<local_scalar_t__, -1, 1>((n - 1));
      stan::math::fill(Lrange, DUMMY_VAR__);
      
      current_statement__ = 271;
      assign(Lrange, nil_index_list(),
        rvalue(Len, cons_list(index_min_max(1, (n - 1)), nil_index_list()),
          "Len"), "assigning variable Lrange");
      current_statement__ = 272;
      validate_non_negative_index("Zii", "n - 1", (n - 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> Zii;
      Zii = Eigen::Matrix<local_scalar_t__, -1, 1>((n - 1));
      stan::math::fill(Zii, DUMMY_VAR__);
      
      current_statement__ = 273;
      assign(Zii, nil_index_list(),
        rvalue(Zin, cons_list(index_min_max(1, (n - 1)), nil_index_list()),
          "Zin"), "assigning variable Zii");
      current_statement__ = 274;
      validate_non_negative_index("v2", "nv", nv);
      Eigen::Matrix<local_scalar_t__, 1, -1> v2;
      v2 = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
      stan::math::fill(v2, DUMMY_VAR__);
      
      current_statement__ = 275;
      assign(v2, nil_index_list(),
        transpose(
          add(multiply(log_x_beta, Zki[((n - 1) - 1)]),
            multiply(stan::math::log(add(gl_node, (beta * Len[(n - 1)]))),
              (alpha - 1.0)))), "assigning variable v2");
      local_scalar_t__ v3;
      v3 = DUMMY_VAR__;
      
      current_statement__ = 276;
      v3 = ((beta * Len[(n - 1)]) + lg_alpha);
      current_statement__ = 277;
      validate_non_negative_index("v1", "nv", nv);
      Eigen::Matrix<local_scalar_t__, 1, -1> v1;
      v1 = Eigen::Matrix<local_scalar_t__, 1, -1>(nv);
      stan::math::fill(v1, DUMMY_VAR__);
      
      current_statement__ = 280;
      for (int i = 1; i <= nv; ++i) {
        current_statement__ = 279;
        assign(v1, cons_list(index_uni(i), nil_index_list()),
          sum(
            elt_multiply(
              stan::math::log(
                subtract((x_beta[(i - 1)] + Len[(n - 1)]), Lrange)), Zii)),
          "assigning variable v1");}
      current_statement__ = 281;
      assign(ss, nil_index_list(), subtract(add(v1, v2), v3),
        "assigning variable ss");
      current_statement__ = 282;
      assign(surv, cons_list(index_uni(n), nil_index_list()),
        multiply(stan::math::exp(ss), gl_wt), "assigning variable surv");}
    current_statement__ = 285;
    return surv;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct Survival_Est_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& gl_node, const T1__& gl_wt, const T2__& Len,
           const T3__& Zki, const T4__& alpha, const T5__& beta,
           std::ostream* pstream__)  const 
{
return Survival_Est(gl_node, gl_wt, Len, Zki, alpha, beta, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
NinInterval(const T0__& Surv_arg__, const T1__& Zki_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& Surv = to_ref(Surv_arg__);
  const auto& Zki = to_ref(Zki_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nl;
    nl = std::numeric_limits<int>::min();
    
    current_statement__ = 287;
    nl = rows(Surv);
    current_statement__ = 288;
    validate_non_negative_index("NinIntv", "nl", nl);
    Eigen::Matrix<local_scalar_t__, -1, 1> NinIntv;
    NinIntv = Eigen::Matrix<local_scalar_t__, -1, 1>(nl);
    stan::math::fill(NinIntv, DUMMY_VAR__);
    
    current_statement__ = 289;
    assign(NinIntv, nil_index_list(),
      elt_divide(
        append_row(
          subtract(
            rvalue(Surv,
              cons_list(index_min_max(1, (nl - 1)), nil_index_list()),
              "Surv"),
            rvalue(Surv, cons_list(index_min_max(2, nl), nil_index_list()),
              "Surv")), Surv[(nl - 1)]), Zki), "assigning variable NinIntv");
    current_statement__ = 290;
    return NinIntv;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct NinInterval_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& Surv, const T1__& Zki, std::ostream* pstream__)  const 
{
return NinInterval(Surv, Zki, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_BLICC final : public model_base_crtp<model_BLICC> {
private:
  int NK;
  int oBN;
  Eigen::Matrix<double, -1, 1> Len;
  std::vector<int> fq;
  double b;
  double Ls;
  double Lm;
  int Flat_top;
  double poLinfm;
  double poLinfs;
  double polGam;
  double polGas;
  double polMkm;
  double polMks;
  double polFkm;
  double polFks;
  double polSmxm;
  double polSmxs;
  double polSs1m;
  double polSs1s;
  double polSs2m;
  double polSs2s;
  double polNB_phim;
  double polNB_phis;
  double eps;
  double NObs;
  std::vector<Eigen::Matrix<double, -1, 1>> kn_wt;
  Eigen::Matrix<double, -1, 1> LMP;
  int N_Ss;
 
public:
  ~model_BLICC() { }
  
  inline std::string model_name() const final { return "model_BLICC"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_BLICC(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_BLICC_namespace::model_BLICC";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 67;
      context__.validate_dims("data initialization","NK","int",
          context__.to_vec());
      NK = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      NK = context__.vals_i("NK")[(1 - 1)];
      current_statement__ = 67;
      current_statement__ = 67;
      check_greater_or_equal(function__, "NK", NK, 2);
      current_statement__ = 68;
      context__.validate_dims("data initialization","oBN","int",
          context__.to_vec());
      oBN = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      oBN = context__.vals_i("oBN")[(1 - 1)];
      current_statement__ = 68;
      current_statement__ = 68;
      check_greater_or_equal(function__, "oBN", oBN, 1);
      current_statement__ = 69;
      validate_non_negative_index("Len", "oBN", oBN);
      current_statement__ = 70;
      context__.validate_dims("data initialization","Len","double",
          context__.to_vec(oBN));
      Len = Eigen::Matrix<double, -1, 1>(oBN);
      stan::math::fill(Len, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Len_flat__;
        current_statement__ = 70;
        assign(Len_flat__, nil_index_list(), context__.vals_r("Len"),
          "assigning variable Len_flat__");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= oBN; ++sym1__) {
          current_statement__ = 70;
          assign(Len, cons_list(index_uni(sym1__), nil_index_list()),
            Len_flat__[(pos__ - 1)], "assigning variable Len");
          current_statement__ = 70;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 71;
      validate_non_negative_index("fq", "oBN", oBN);
      current_statement__ = 72;
      context__.validate_dims("data initialization","fq","int",
          context__.to_vec(oBN));
      fq = std::vector<int>(oBN, std::numeric_limits<int>::min());
      
      current_statement__ = 72;
      assign(fq, nil_index_list(), context__.vals_i("fq"),
        "assigning variable fq");
      current_statement__ = 73;
      context__.validate_dims("data initialization","b","double",
          context__.to_vec());
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 73;
      b = context__.vals_r("b")[(1 - 1)];
      current_statement__ = 74;
      context__.validate_dims("data initialization","Ls","double",
          context__.to_vec());
      Ls = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 74;
      Ls = context__.vals_r("Ls")[(1 - 1)];
      current_statement__ = 75;
      context__.validate_dims("data initialization","Lm","double",
          context__.to_vec());
      Lm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 75;
      Lm = context__.vals_r("Lm")[(1 - 1)];
      current_statement__ = 76;
      context__.validate_dims("data initialization","Flat_top","int",
          context__.to_vec());
      Flat_top = std::numeric_limits<int>::min();
      
      current_statement__ = 76;
      Flat_top = context__.vals_i("Flat_top")[(1 - 1)];
      current_statement__ = 77;
      context__.validate_dims("data initialization","poLinfm","double",
          context__.to_vec());
      poLinfm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 77;
      poLinfm = context__.vals_r("poLinfm")[(1 - 1)];
      current_statement__ = 78;
      context__.validate_dims("data initialization","poLinfs","double",
          context__.to_vec());
      poLinfs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      poLinfs = context__.vals_r("poLinfs")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization","polGam","double",
          context__.to_vec());
      polGam = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      polGam = context__.vals_r("polGam")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","polGas","double",
          context__.to_vec());
      polGas = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 80;
      polGas = context__.vals_r("polGas")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization","polMkm","double",
          context__.to_vec());
      polMkm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 81;
      polMkm = context__.vals_r("polMkm")[(1 - 1)];
      current_statement__ = 82;
      context__.validate_dims("data initialization","polMks","double",
          context__.to_vec());
      polMks = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 82;
      polMks = context__.vals_r("polMks")[(1 - 1)];
      current_statement__ = 83;
      context__.validate_dims("data initialization","polFkm","double",
          context__.to_vec());
      polFkm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 83;
      polFkm = context__.vals_r("polFkm")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization","polFks","double",
          context__.to_vec());
      polFks = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 84;
      polFks = context__.vals_r("polFks")[(1 - 1)];
      current_statement__ = 85;
      context__.validate_dims("data initialization","polSmxm","double",
          context__.to_vec());
      polSmxm = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 85;
      polSmxm = context__.vals_r("polSmxm")[(1 - 1)];
      current_statement__ = 86;
      context__.validate_dims("data initialization","polSmxs","double",
          context__.to_vec());
      polSmxs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      polSmxs = context__.vals_r("polSmxs")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization","polSs1m","double",
          context__.to_vec());
      polSs1m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 87;
      polSs1m = context__.vals_r("polSs1m")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization","polSs1s","double",
          context__.to_vec());
      polSs1s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 88;
      polSs1s = context__.vals_r("polSs1s")[(1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization","polSs2m","double",
          context__.to_vec());
      polSs2m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 89;
      polSs2m = context__.vals_r("polSs2m")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization","polSs2s","double",
          context__.to_vec());
      polSs2s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 90;
      polSs2s = context__.vals_r("polSs2s")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization","polNB_phim","double",
          context__.to_vec());
      polNB_phim = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 91;
      polNB_phim = context__.vals_r("polNB_phim")[(1 - 1)];
      current_statement__ = 92;
      context__.validate_dims("data initialization","polNB_phis","double",
          context__.to_vec());
      polNB_phis = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 92;
      polNB_phis = context__.vals_r("polNB_phis")[(1 - 1)];
      current_statement__ = 93;
      eps = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 93;
      eps = 1.0e-6;
      current_statement__ = 94;
      NObs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 94;
      NObs = sum(fq);
      current_statement__ = 95;
      validate_non_negative_index("kn_wt", "NK", NK);
      current_statement__ = 96;
      kn_wt = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(NK));
      stan::math::fill(kn_wt, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 96;
      assign(kn_wt, nil_index_list(), gauss_laguerre_quad(NK, 0, pstream__),
        "assigning variable kn_wt");
      current_statement__ = 97;
      validate_non_negative_index("LMP", "oBN", oBN);
      current_statement__ = 98;
      LMP = Eigen::Matrix<double, -1, 1>(oBN);
      stan::math::fill(LMP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 99;
      N_Ss = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      if (logical_eq(Flat_top, 0)) {
        current_statement__ = 101;
        N_Ss = 1;
      } else {
        current_statement__ = 100;
        N_Ss = 2;
      }
      current_statement__ = 104;
      for (int i = 1; i <= (oBN - 1); ++i) {
        current_statement__ = 103;
        assign(LMP, cons_list(index_uni(i), nil_index_list()),
          (0.5 * (Len[(i - 1)] + Len[((i + 1) - 1)])),
          "assigning variable LMP");}
      current_statement__ = 105;
      assign(LMP, cons_list(index_uni(oBN), nil_index_list()),
        (Len[(oBN - 1)] + (0.5 * (Len[(oBN - 1)] - Len[((oBN - 1) - 1)]))),
        "assigning variable LMP");
      current_statement__ = 106;
      validate_non_negative_index("nSs", "N_Ss", N_Ss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N_Ss;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_BLICC_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ nLinf;
      nLinf = DUMMY_VAR__;
      
      current_statement__ = 1;
      nLinf = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs), lp__);
      } else {
        current_statement__ = 1;
        nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs));
      }
      local_scalar_t__ nGalpha;
      nGalpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      nGalpha = in__.scalar();
      local_scalar_t__ nMk;
      nMk = DUMMY_VAR__;
      
      current_statement__ = 3;
      nMk = in__.scalar();
      local_scalar_t__ nFk;
      nFk = DUMMY_VAR__;
      
      current_statement__ = 4;
      nFk = in__.scalar();
      local_scalar_t__ nSmx;
      nSmx = DUMMY_VAR__;
      
      current_statement__ = 5;
      nSmx = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> nSs;
      nSs = Eigen::Matrix<local_scalar_t__, -1, 1>(N_Ss);
      stan::math::fill(nSs, DUMMY_VAR__);
      
      current_statement__ = 6;
      nSs = in__.vector(N_Ss);
      local_scalar_t__ nNB_phi;
      nNB_phi = DUMMY_VAR__;
      
      current_statement__ = 7;
      nNB_phi = in__.scalar();
      local_scalar_t__ Linf;
      Linf = DUMMY_VAR__;
      
      current_statement__ = 8;
      Linf = (poLinfm + (nLinf * poLinfs));
      local_scalar_t__ Galpha;
      Galpha = DUMMY_VAR__;
      
      current_statement__ = 9;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      local_scalar_t__ Mk;
      Mk = DUMMY_VAR__;
      
      current_statement__ = 10;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      local_scalar_t__ Fk;
      Fk = DUMMY_VAR__;
      
      current_statement__ = 11;
      Fk = stan::math::exp((polFkm + (nFk * polFks)));
      local_scalar_t__ Smx;
      Smx = DUMMY_VAR__;
      
      current_statement__ = 12;
      Smx = stan::math::exp((polSmxm + (nSmx * polSmxs)));
      local_scalar_t__ Ss1;
      Ss1 = DUMMY_VAR__;
      
      current_statement__ = 13;
      Ss1 = stan::math::exp((polSs1m + (nSs[(1 - 1)] * polSs1s)));
      local_scalar_t__ Ss2;
      Ss2 = DUMMY_VAR__;
      
      local_scalar_t__ NB_phi;
      NB_phi = DUMMY_VAR__;
      
      current_statement__ = 15;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      local_scalar_t__ Gbeta;
      Gbeta = DUMMY_VAR__;
      
      current_statement__ = 16;
      Gbeta = (Galpha / Linf);
      current_statement__ = 19;
      if (logical_eq(Flat_top, 0)) {
        current_statement__ = 18;
        Ss2 = 0;
      } else {
        current_statement__ = 17;
        Ss2 = stan::math::exp((polSs2m + (nSs[(2 - 1)] * polSs2s)));
      }
      {
        current_statement__ = 39;
        validate_non_negative_index("efq", "oBN", oBN);
        Eigen::Matrix<local_scalar_t__, -1, 1> efq;
        efq = Eigen::Matrix<local_scalar_t__, -1, 1>(oBN);
        stan::math::fill(efq, DUMMY_VAR__);
        
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<false>(nLinf, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<false>(nGalpha, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<false>(nMk, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(normal_lpdf<false>(nFk, 0, 1));
        current_statement__ = 45;
        lp_accum__.add(normal_lpdf<false>(nSmx, 0, 1));
        current_statement__ = 46;
        lp_accum__.add(normal_lpdf<false>(nSs, 0, 1));
        current_statement__ = 47;
        lp_accum__.add(normal_lpdf<false>(nNB_phi, 0, 1));
        {
          local_scalar_t__ Sum_efq;
          Sum_efq = DUMMY_VAR__;
          
          current_statement__ = 49;
          validate_non_negative_index("Fki", "oBN", oBN);
          Eigen::Matrix<local_scalar_t__, -1, 1> Fki;
          Fki = Eigen::Matrix<local_scalar_t__, -1, 1>(oBN);
          stan::math::fill(Fki, DUMMY_VAR__);
          
          current_statement__ = 51;
          validate_non_negative_index("Zki", "oBN", oBN);
          Eigen::Matrix<local_scalar_t__, -1, 1> Zki;
          Zki = Eigen::Matrix<local_scalar_t__, -1, 1>(oBN);
          stan::math::fill(Zki, DUMMY_VAR__);
          
          current_statement__ = 53;
          validate_non_negative_index("Sv", "oBN", oBN);
          Eigen::Matrix<local_scalar_t__, -1, 1> Sv;
          Sv = Eigen::Matrix<local_scalar_t__, -1, 1>(oBN);
          stan::math::fill(Sv, DUMMY_VAR__);
          
          current_statement__ = 57;
          if (logical_eq(Flat_top, 0)) {
            current_statement__ = 56;
            assign(Fki, nil_index_list(),
              multiply(sel_ssnormal(LMP, Smx, Ss1, pstream__), Fk),
              "assigning variable Fki");
          } else {
            current_statement__ = 55;
            assign(Fki, nil_index_list(),
              multiply(sel_dsnormal(LMP, Smx, Ss1, Ss2, pstream__), Fk),
              "assigning variable Fki");
          }
          current_statement__ = 58;
          assign(Zki, nil_index_list(), add(Fki, Mk),
            "assigning variable Zki");
          current_statement__ = 59;
          assign(Sv, nil_index_list(),
            Survival_Est(kn_wt[(1 - 1)], kn_wt[(2 - 1)], Len, Zki, Galpha,
              Gbeta, pstream__), "assigning variable Sv");
          current_statement__ = 60;
          assign(efq, nil_index_list(),
            elt_multiply(Fki, NinInterval(Sv, Zki, pstream__)),
            "assigning variable efq");
          current_statement__ = 61;
          Sum_efq = sum(efq);
          current_statement__ = 62;
          assign(efq, nil_index_list(),
            multiply(stan::model::deep_copy(efq), (NObs / Sum_efq)),
            "assigning variable efq");
          current_statement__ = 63;
          assign(efq, nil_index_list(),
            add(stan::model::deep_copy(efq), eps), "assigning variable efq");
        }
        {
          current_statement__ = 65;
          lp_accum__.add(neg_binomial_2_lpmf<false>(fq, efq, NB_phi));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_BLICC_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double nLinf;
      nLinf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf = in__.scalar();
      current_statement__ = 1;
      nLinf = stan::math::lb_constrain(nLinf, (-poLinfm / poLinfs));
      double nGalpha;
      nGalpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nGalpha = in__.scalar();
      double nMk;
      nMk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      nMk = in__.scalar();
      double nFk;
      nFk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      nFk = in__.scalar();
      double nSmx;
      nSmx = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      nSmx = in__.scalar();
      Eigen::Matrix<double, -1, 1> nSs;
      nSs = Eigen::Matrix<double, -1, 1>(N_Ss);
      stan::math::fill(nSs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      nSs = in__.vector(N_Ss);
      double nNB_phi;
      nNB_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      nNB_phi = in__.scalar();
      double Linf;
      Linf = std::numeric_limits<double>::quiet_NaN();
      
      double Galpha;
      Galpha = std::numeric_limits<double>::quiet_NaN();
      
      double Mk;
      Mk = std::numeric_limits<double>::quiet_NaN();
      
      double Fk;
      Fk = std::numeric_limits<double>::quiet_NaN();
      
      double Smx;
      Smx = std::numeric_limits<double>::quiet_NaN();
      
      double Ss1;
      Ss1 = std::numeric_limits<double>::quiet_NaN();
      
      double Ss2;
      Ss2 = std::numeric_limits<double>::quiet_NaN();
      
      double NB_phi;
      NB_phi = std::numeric_limits<double>::quiet_NaN();
      
      double Gbeta;
      Gbeta = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(nLinf);
      vars__.emplace_back(nGalpha);
      vars__.emplace_back(nMk);
      vars__.emplace_back(nFk);
      vars__.emplace_back(nSmx);
      for (int sym1__ = 1; sym1__ <= N_Ss; ++sym1__) {
        vars__.emplace_back(nSs[(sym1__ - 1)]);}
      vars__.emplace_back(nNB_phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      Linf = (poLinfm + (nLinf * poLinfs));
      current_statement__ = 9;
      Galpha = stan::math::exp((polGam + (nGalpha * polGas)));
      current_statement__ = 10;
      Mk = stan::math::exp((polMkm + (nMk * polMks)));
      current_statement__ = 11;
      Fk = stan::math::exp((polFkm + (nFk * polFks)));
      current_statement__ = 12;
      Smx = stan::math::exp((polSmxm + (nSmx * polSmxs)));
      current_statement__ = 13;
      Ss1 = stan::math::exp((polSs1m + (nSs[(1 - 1)] * polSs1s)));
      current_statement__ = 15;
      NB_phi = stan::math::exp((polNB_phim + (nNB_phi * polNB_phis)));
      current_statement__ = 16;
      Gbeta = (Galpha / Linf);
      current_statement__ = 19;
      if (logical_eq(Flat_top, 0)) {
        current_statement__ = 18;
        Ss2 = 0;
      } else {
        current_statement__ = 17;
        Ss2 = stan::math::exp((polSs2m + (nSs[(2 - 1)] * polSs2s)));
      }
      if (emit_transformed_parameters__) {
        vars__.emplace_back(Linf);
        vars__.emplace_back(Galpha);
        vars__.emplace_back(Mk);
        vars__.emplace_back(Fk);
        vars__.emplace_back(Smx);
        vars__.emplace_back(Ss1);
        vars__.emplace_back(Ss2);
        vars__.emplace_back(NB_phi);
        vars__.emplace_back(Gbeta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double SPR;
      SPR = std::numeric_limits<double>::quiet_NaN();
      
      {
        double SPR0;
        SPR0 = std::numeric_limits<double>::quiet_NaN();
        
        double SPRF;
        SPRF = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 23;
        validate_non_negative_index("MB", "oBN", oBN);
        Eigen::Matrix<double, 1, -1> MB;
        MB = Eigen::Matrix<double, 1, -1>(oBN);
        stan::math::fill(MB, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 24;
        assign(MB, nil_index_list(),
          transpose(
            elt_multiply(stan::math::exp(multiply(b, stan::math::log(Len))),
              inv_logit(multiply(Ls, subtract(Len, Lm))))),
          "assigning variable MB");
        current_statement__ = 25;
        validate_non_negative_index("Zki", "oBN", oBN);
        Eigen::Matrix<double, -1, 1> Zki;
        Zki = Eigen::Matrix<double, -1, 1>(oBN);
        stan::math::fill(Zki, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 27;
        validate_non_negative_index("Sv", "oBN", oBN);
        Eigen::Matrix<double, -1, 1> Sv;
        Sv = Eigen::Matrix<double, -1, 1>(oBN);
        stan::math::fill(Sv, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 31;
        if (logical_eq(Flat_top, 0)) {
          current_statement__ = 30;
          assign(Zki, nil_index_list(),
            add(multiply(sel_ssnormal(LMP, Smx, Ss1, pstream__), Fk), Mk),
            "assigning variable Zki");
        } else {
          current_statement__ = 29;
          assign(Zki, nil_index_list(),
            add(multiply(sel_dsnormal(LMP, Smx, Ss1, Ss2, pstream__), Fk),
              Mk), "assigning variable Zki");
        }
        current_statement__ = 32;
        assign(Sv, nil_index_list(),
          Survival_Est(kn_wt[(1 - 1)], kn_wt[(2 - 1)], Len, Zki, Galpha,
            Gbeta, pstream__), "assigning variable Sv");
        current_statement__ = 33;
        SPRF = multiply(MB, NinInterval(Sv, Zki, pstream__));
        current_statement__ = 34;
        assign(Zki, nil_index_list(), rep_vector(Mk, oBN),
          "assigning variable Zki");
        current_statement__ = 35;
        assign(Sv, nil_index_list(),
          Survival_Est(kn_wt[(1 - 1)], kn_wt[(2 - 1)], Len, Zki, Galpha,
            Gbeta, pstream__), "assigning variable Sv");
        current_statement__ = 36;
        SPR0 = multiply(MB, NinInterval(Sv, Zki, pstream__));
        current_statement__ = 37;
        SPR = (SPRF / SPR0);
      }
      vars__.emplace_back(SPR);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double nLinf;
      nLinf = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf = context__.vals_r("nLinf")[(1 - 1)];
      double nLinf_free__;
      nLinf_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      nLinf_free__ = stan::math::lb_free(nLinf, (-poLinfm / poLinfs));
      double nGalpha;
      nGalpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nGalpha = context__.vals_r("nGalpha")[(1 - 1)];
      double nMk;
      nMk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      nMk = context__.vals_r("nMk")[(1 - 1)];
      double nFk;
      nFk = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      nFk = context__.vals_r("nFk")[(1 - 1)];
      double nSmx;
      nSmx = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      nSmx = context__.vals_r("nSmx")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> nSs;
      nSs = Eigen::Matrix<double, -1, 1>(N_Ss);
      stan::math::fill(nSs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nSs_flat__;
        current_statement__ = 6;
        assign(nSs_flat__, nil_index_list(), context__.vals_r("nSs"),
          "assigning variable nSs_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_Ss; ++sym1__) {
          current_statement__ = 6;
          assign(nSs, cons_list(index_uni(sym1__), nil_index_list()),
            nSs_flat__[(pos__ - 1)], "assigning variable nSs");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      double nNB_phi;
      nNB_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      nNB_phi = context__.vals_r("nNB_phi")[(1 - 1)];
      vars__.emplace_back(nLinf_free__);
      vars__.emplace_back(nGalpha);
      vars__.emplace_back(nMk);
      vars__.emplace_back(nFk);
      vars__.emplace_back(nSmx);
      for (int sym1__ = 1; sym1__ <= N_Ss; ++sym1__) {
        vars__.emplace_back(nSs[(sym1__ - 1)]);}
      vars__.emplace_back(nNB_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("nLinf");
    names__.emplace_back("nGalpha");
    names__.emplace_back("nMk");
    names__.emplace_back("nFk");
    names__.emplace_back("nSmx");
    names__.emplace_back("nSs");
    names__.emplace_back("nNB_phi");
    names__.emplace_back("Linf");
    names__.emplace_back("Galpha");
    names__.emplace_back("Mk");
    names__.emplace_back("Fk");
    names__.emplace_back("Smx");
    names__.emplace_back("Ss1");
    names__.emplace_back("Ss2");
    names__.emplace_back("NB_phi");
    names__.emplace_back("Gbeta");
    names__.emplace_back("SPR");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_Ss)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    param_names__.emplace_back(std::string() + "nFk");
    param_names__.emplace_back(std::string() + "nSmx");
    for (int sym1__ = 1; sym1__ <= N_Ss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nSs" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      param_names__.emplace_back(std::string() + "Fk");
      param_names__.emplace_back(std::string() + "Smx");
      param_names__.emplace_back(std::string() + "Ss1");
      param_names__.emplace_back(std::string() + "Ss2");
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "nLinf");
    param_names__.emplace_back(std::string() + "nGalpha");
    param_names__.emplace_back(std::string() + "nMk");
    param_names__.emplace_back(std::string() + "nFk");
    param_names__.emplace_back(std::string() + "nSmx");
    for (int sym1__ = 1; sym1__ <= N_Ss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nSs" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "nNB_phi");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Linf");
      param_names__.emplace_back(std::string() + "Galpha");
      param_names__.emplace_back(std::string() + "Mk");
      param_names__.emplace_back(std::string() + "Fk");
      param_names__.emplace_back(std::string() + "Smx");
      param_names__.emplace_back(std::string() + "Ss1");
      param_names__.emplace_back(std::string() + "Ss2");
      param_names__.emplace_back(std::string() + "NB_phi");
      param_names__.emplace_back(std::string() + "Gbeta");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "SPR");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSmx\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSs\",\"type\":{\"name\":\"vector\",\"length\":" << N_Ss << "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Smx\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ss1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ss2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"nLinf\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nGalpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nMk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nFk\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSmx\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nSs\",\"type\":{\"name\":\"vector\",\"length\":" << N_Ss << "},\"block\":\"parameters\"},{\"name\":\"nNB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Linf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Galpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Mk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Fk\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Smx\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ss1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ss2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"NB_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Gbeta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"SPR\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_BLICC_namespace::model_BLICC;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_BLICC_namespace::profiles__;
}
#endif
#endif
